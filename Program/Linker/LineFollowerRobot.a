;/****
;	*	@name		LINE FOLLOWER ROBOT
;	*	@file 		LineFollowerRobot.c
;	*
;	*	@author 	Uladzislau 'vladubase' Dubatouka
;	*				<vladubase@gmail.com>.
;	*	@version	V1.1
;	*	@date 		Created on 2020.07.14.
;	*
;	*	@brief 		This program is controlling the Line following robot using PID regulator.
;	*				It has a flexible settings system via #defines at the beginning of the .C main file.
;	*				IO ports are configured through registers.
;	*
;	*  	@attention 	"The usual procedure for setting up the PID regulator:
;	*					1. At a low speed, we adjust the P-controller (we select a value of kP such
;	*						that in the coolest turns the robot passes keeping the line close to its
;	*						extreme sensors). kD and kI are equal to zero, i.e. use a pure P-regulator;
;	*					2. Increase the speed, select the value of kD. If the robot went without
;	*						inertia when setting the P-controller, then the kP value can be left unchanged.
;	*						If the robot has already gone with inertia, as is usually the case
;	*						with fast robots, then the kP value will need to be lowered -
;	*						we will see this by the fact that the robot will cease to deviate
;	*						strongly from the line thanks to the help of the D-controller;
;	*					3. When the PD controller is configured, then I can be selected,
;	*						reducing the deviation of the robot from the line. The values ​​of
;	*						the coefficients kD and kP are usually also somewhat lower.
;	*						An i-controller is useful for racing where a line can make loops.
;	*						Deviation of the robot from a straight line is fraught with
;	*						the choice of the wrong direction of movement. When racing on tracks
;	*						without loops, the PD controller is often used, since in the general
;	*						case it allows you to develop a higher speed."
;	*						(Credit: https://www.goodlancer.com/pid-control/).
;	*
;	*   @note	4.25 ms for main cycle (not counting MAIN_CYCLE_DELAY) with 4 low-level sensors.
;	*			6 ms for main cycle (not counting MAIN_CYCLE_DELAY) with 15 low-level sensors.
;	*
;*****/
;
;/**************************** Includes ****************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega328p_bits.h>
;#include <delay.h>
;#include <math.h>
;#include <stdbool.h>
;#include <stdint.h>
;
;/***************************** Defines ****************************/
;
;#define		F_CPU				((uint32_t)20000000)	// Quartz resonator clock frequency
;
;#define		QTY_OF_SENSORS		8						// Quantity of sensors
;#define		AVG_SPEED			((uint8_t)155)			// Average speed of robot
;
;#define		MOTORS_NOT_PERFECT	true 					// Do the motors have different real parameters (e.g. Speed, Torque, etc.)?
;#if MOTORS_NOT_PERFECT									// There is nothing perfect ;)
;	#define	L_MOTOR_MISMATCH	((float)1.0)			// Coefficient of motor power difference
;	#define	R_MOTOR_MISMATCH	((float)1.07)			// Coefficient of motor power difference
;#endif /* MOTORS_NOT_PERFECT */
;
;// PID
;// Setup: P -> PD -> PID
;#define		kP					((uint8_t)1)			// Proportional	feedback coefficient
;#define		kI					((uint8_t)0)			// Integral 	feedback coefficient
;#define		kD					((uint8_t)0)			// Differential	feedback coefficient
;#define		QTY_OF_ERR			((uint8_t)10)			// Quantity of errors in memory during last (QTY_OF_ERR * MAIN_CYCLE_DELAY) ms
;#define		MAIN_CYCLE_DELAY	((uint8_t)2)			// The main cycle delay (in ms) for correct work of D-regulation
;
;// Sensor order in the right --> direction
;#if (QTY_OF_SENSORS >= 1)
;    #define	READ_SENSOR_1		PIND & (1 << DDD2)
;#endif /* QTY_OF_SENSORS >= 1 */
;#if QTY_OF_SENSORS >= 2
;    #define	READ_SENSOR_2		PIND & (1 << DDD4)
;#endif /* QTY_OF_SENSORS >= 2 */
;#if QTY_OF_SENSORS >= 3
;    #define	READ_SENSOR_3		PINC & (1 << DDC5)
;#endif /* QTY_OF_SENSORS >= 3 */
;#if QTY_OF_SENSORS >= 4
;    #define	READ_SENSOR_4		PINC & (1 << DDC4)
;#endif /* QTY_OF_SENSORS >= 4 */
;#if QTY_OF_SENSORS >= 5
;    #define	READ_SENSOR_5		PINC & (1 << DDC3)
;#endif /* QTY_OF_SENSORS >= 5 */
;#if QTY_OF_SENSORS >= 6
;    #define	READ_SENSOR_6		PINC & (1 << DDC2)
;#endif /* QTY_OF_SENSORS >= 6 */
;#if QTY_OF_SENSORS >= 7
;    #define	READ_SENSOR_7		PINC & (1 << DDC1)
;#endif /* QTY_OF_SENSORS >= 7 */
;#if QTY_OF_SENSORS >= 8
;    #define	READ_SENSOR_8		PINC & (1 << DDC0)
;#endif /* QTY_OF_SENSORS >= 8 */
;#if QTY_OF_SENSORS >= 9
;    #define	READ_SENSOR_9		PINx & (1 << DDxx)
;#endif /* QTY_OF_SENSORS >= 9 */
;#if QTY_OF_SENSORS >= 10
;    #define	READ_SENSOR_10		PINx & (1 << DDxx)
;#endif /* QTY_OF_SENSORS >= 10 */
;#if QTY_OF_SENSORS >= 11
;    #define	READ_SENSOR_11		PINx & (1 << DDxx)
;#endif /* QTY_OF_SENSORS >= 11 */
;#if QTY_OF_SENSORS >= 12
;    #define	READ_SENSOR_12		PINx & (1 << DDxx)
;#endif /* QTY_OF_SENSORS >= 12 */
;#if QTY_OF_SENSORS >= 13
;    #define	READ_SENSOR_13		PINx & (1 << DDxx)
;#endif /* QTY_OF_SENSORS >= 13 */
;#if QTY_OF_SENSORS >= 14
;    #define	READ_SENSOR_14		PINx & (1 << DDxx)
;#endif /* QTY_OF_SENSORS >= 14 */
;#if QTY_OF_SENSORS >= 15
;    #define	READ_SENSOR_15		PINx & (1 << DDxx)
;#endif /* QTY_OF_SENSORS >= 15 */
;#if QTY_OF_SENSORS >= 16
;    #define	READ_SENSOR_16		PINx & (1 << DDxx)
;#endif /* QTY_OF_SENSORS >= 16 */
;
;//#define	READ_IR_SENSOR		PINx & (1 << DDxx)
;
;/************************* Global Variables ***********************/
;
;bool line_data[QTY_OF_SENSORS] = {0};					// Store current values from sensor line
;
;/*********************** Function  prototypes *********************/
;
;void InitSys (void);
;void ReadSensorLineData (void);
;float CurrentRobotError (void);
;
;/****************************** Main ******************************/
;
;void main (void) {
; 0000 0085 void main (void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0086 	// DEFINITION OF VARIABLES
; 0000 0087 	register float error_history[QTY_OF_ERR] = {0};		// Storing the values of recent errors
; 0000 0088 	register float error_sum = 0.0;						// Sum of errors in history
; 0000 0089 	register uint8_t i = 0;
; 0000 008A 	register float P = 0.0;
; 0000 008B 	register float I = 0.0;
; 0000 008C 	register float D = 0.0;
; 0000 008D 	register float PID_total_correction = 0.0;      	// Sum of P, I, D
; 0000 008E 	register int16_t left_motor_speed = 0;
; 0000 008F 	register int16_t right_motor_speed = 0;
; 0000 0090 
; 0000 0091 	// MICROCONTROLLER INITIALIZATION
; 0000 0092 	InitSys ();
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;	error_history -> Y+20
;	error_sum -> Y+16
;	i -> R17
;	P -> Y+12
;	I -> Y+8
;	D -> Y+4
;	PID_total_correction -> Y+0
;	left_motor_speed -> R18,R19
;	right_motor_speed -> R20,R21
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0093 
; 0000 0094 	// Waiting for a signal on IR sensor
; 0000 0095 	#ifdef READ_IR_SENSOR
; 0000 0096 		while (READ_IR_SENSOR) {
; 0000 0097 			LED_1_ON;
; 0000 0098 			delay_ms (25);
; 0000 0099 			LED_1_OFF;
; 0000 009A 			delay_ms (25);
; 0000 009B 		}
; 0000 009C 	#endif /* READ_IR_SENSOR */
; 0000 009D 
; 0000 009E 	//delay_ms (5000);									// This delay is required by the competition rules
; 0000 009F 
; 0000 00A0 	// MAIN CYCLE
; 0000 00A1 	while (true) {
;PCODE: $0000001A VOL: 0
; 0000 00A2 		error_sum = 0.0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 00A3 
; 0000 00A4 	    // Shift error values
; 0000 00A5 		for (i = 0; i < QTY_OF_ERR - 1; i++) {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 00A6 			error_history[i] = error_history[i + 1];
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 00A7 		}
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 00A8 		error_history[QTY_OF_ERR - 1] = CurrentRobotError ();
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00A9 
; 0000 00AA 		// Calculation of value P
; 0000 00AB 		P = error_history[QTY_OF_ERR - 1] * kP;			// Current error * kP
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00AC 		// Calculation of value I
; 0000 00AD 		for (i = 0; i < QTY_OF_ERR; i++) {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 00AE 			error_sum += error_history[i];
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00AF 		}
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00B0 		I = error_sum * kI;								// sum of errors * kI
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00B1 		// Calculation of value D
; 0000 00B2 		D = (error_history[QTY_OF_ERR - 1] -        	// (current error - first error) * kD
; 0000 00B3         	error_history[0]) * kD;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00B4 
; 0000 00B5 		PID_total_correction = (P + I) + D;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00B6 
; 0000 00B7 		//
; 0000 00B8 		left_motor_speed  = AVG_SPEED - (uint16_t)PID_total_correction;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00B9 		right_motor_speed = AVG_SPEED + (uint16_t)PID_total_correction;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00BA 
; 0000 00BB 		// Validating a range of variables
; 0000 00BC 		if (left_motor_speed > 255)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00BD 			left_motor_speed = 255;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00BE 		else if (left_motor_speed < 0)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00BF 			left_motor_speed = 0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00C0 		if (right_motor_speed > 255)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00C1 			right_motor_speed = 255;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00C2 		else if (right_motor_speed < 0)
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00C3 			right_motor_speed = 0;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C4 
; 0000 00C5 		// Motors power difference compensation
; 0000 00C6 		#if MOTORS_NOT_PERFECT
; 0000 00C7 			OCR2A = 0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C8 			OCR2B = left_motor_speed * L_MOTOR_MISMATCH;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C9 			OCR0A = 0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00CA 			OCR0B = right_motor_speed * R_MOTOR_MISMATCH;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00CB 		#else
; 0000 00CC 			OCR2A = 0;
; 0000 00CD 			OCR2B = left_motor_speed;
; 0000 00CE 			OCR0A = 0;
; 0000 00CF 			OCR0B = right_motor_speed;
; 0000 00D0 		#endif /* MOTORS_NOT_PERFECT */
; 0000 00D1 
; 0000 00D2 		delay_ms (MAIN_CYCLE_DELAY);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00D3 	}
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00D4 }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;
;/*************************** Functions ****************************/
;
;void InitSys (void) {
; 0000 00D8 void InitSys (void) {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D9 	// Motors
; 0000 00DA 	    // Output mode
; 0000 00DB 		DDRB |= (1 << DDB3);			            	// OC2A
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00DC 		DDRD |= (1 << DDD6) |			            	// OC0A
; 0000 00DD 				(1 << DDD5) |			            	// OC0B
; 0000 00DE 				(1 << DDD3);			            	// OC2B
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00DF 
; 0000 00E0 	// SensorLine
; 0000 00E1 	    // Input mode
; 0000 00E2 		DDRB &= ~((1 << DDB2) | (1 << DDB1) | (1 << DDB0));
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00E3 		DDRD &= ~(1 << DDD7);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00E4 
; 0000 00E5 	// Infrared Sensor
; 0000 00E6 	    // Input mode
; 0000 00E7 		#ifdef READ_SENSOR_IR
; 0000 00E8 			DDRx &= ~(1 << DDxx);
; 0000 00E9 		#endif /* READ_SENSOR_IR */
; 0000 00EA 
; 0000 00EB 	// Timer/Counter(s) initialization
; 0000 00EC 		// Timer/Counter 0
; 0000 00ED 		// Fast PWM Mode
; 0000 00EE 		// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
; 0000 00EF 		// TOP = 0xFF
; 0000 00F0 		// Prescaler: 1:64
; 0000 00F1 		TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00F2 		TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00F3 		TCCR0B |= (1 << CS01) | (1 << CS00);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F4 		TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00F5 		TCNT0  = 0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00F6 		TIMSK0 = 0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00F7 		OCR0A  = 0x00;	OCR0B  = 0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F8 
; 0000 00F9 		// Timer/Counter 1
; 0000 00FA 		// Fast PWM 10-bit Mode
; 0000 00FB 		// Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM (non-inverting mode)
; 0000 00FC 		// TOP = 0x03FF
; 0000 00FD 		// Prescaler: 1:64
; 0000 00FE 		TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00FF 		TCCR1A &= ~((1 << COM1A0) | (1 << COM1B0) | (1 << 3) | (1 << 2));
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0100 		TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0101 		TCCR1B &= ~((1 << ICNC1) | (1 << ICES1) | (1 << 5) | (1 << WGM13) | (1 << CS12));
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0102 		TCCR1C = 0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0103 		TCNT1H = 0x00;	TCNT1L = 0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0104 		TIMSK1 = 0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0105 		ICR1H  = 0x00;	ICR1L  = 0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0106 		OCR1AH = 0x00;	OCR1AL = 0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0107 		OCR1BH = 0x00;	OCR1BL = 0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0108 
; 0000 0109 		// Timer/Counter 2
; 0000 010A 		// Fast PWM Mode
; 0000 010B 		// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
; 0000 010C 		// TOP = 0xFF
; 0000 010D 		// Prescaler: 1:64
; 0000 010E 		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 010F 		TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0110 		TCCR2B |= (1 << CS22);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0111 		TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0112 		TCNT2  = 0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0113 		TIMSK2 = 0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0114 		OCR2A  = 0x00;	OCR2B  = 0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0115 
; 0000 0116 	// Crystal Oscillator division factor: 1
; 0000 0117 		#pragma optsize-
; 0000 0118 			CLKPR |= (1 << CLKPCE);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0119 			CLKPR = 0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 011A 		#ifdef _OPTIMIZE_SIZE_
; 0000 011B 			#pragma optsize+
; 0000 011C 		#endif /* _OPTIMIZE_SIZE_ */
; 0000 011D }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;
;void ReadSensorLineData (void) {
; 0000 011F void ReadSensorLineData (void) {
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0120 	#ifdef READ_SENSOR_1
; 0000 0121 		line_data[0] = READ_SENSOR_1;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0122 	#endif /* READ_SENSOR_1 */
; 0000 0123 	#ifdef READ_SENSOR_2
; 0000 0124 		line_data[1] = READ_SENSOR_2;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0125 	#endif /* READ_SENSOR_2 */
; 0000 0126 	#ifdef READ_SENSOR_3
; 0000 0127 		line_data[2] = READ_SENSOR_3;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0128 	#endif /* READ_SENSOR_3 */
; 0000 0129 	#ifdef READ_SENSOR_4
; 0000 012A 		line_data[3] = READ_SENSOR_4;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 012B 	#endif /* READ_SENSOR_4 */
; 0000 012C 	#ifdef READ_SENSOR_5
; 0000 012D 		line_data[4] = READ_SENSOR_5;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 012E 	#endif /* READ_SENSOR_5 */
; 0000 012F 	#ifdef READ_SENSOR_6
; 0000 0130 		line_data[5] = READ_SENSOR_6;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0131 	#endif /* READ_SENSOR_6 */
; 0000 0132 	#ifdef READ_SENSOR_7
; 0000 0133 		line_data[6] = READ_SENSOR_7;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0134 	#endif /* READ_SENSOR_7 */
; 0000 0135 	#ifdef READ_SENSOR_8
; 0000 0136 		line_data[7] = READ_SENSOR_8;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0137 	#endif /* READ_SENSOR_8 */
; 0000 0138 	#ifdef READ_SENSOR_9
; 0000 0139 		line_data[8] = READ_SENSOR_9;
; 0000 013A 	#endif /* READ_SENSOR_9 */
; 0000 013B 	#ifdef READ_SENSOR_10
; 0000 013C 		line_data[9] = READ_SENSOR_10;
; 0000 013D 	#endif /* READ_SENSOR_10 */
; 0000 013E 	#ifdef READ_SENSOR_11
; 0000 013F 		line_data[10] = READ_SENSOR_11;
; 0000 0140 	#endif /* READ_SENSOR_11 */
; 0000 0141 	#ifdef READ_SENSOR_12
; 0000 0142 		line_data[11] = READ_SENSOR_12;
; 0000 0143 	#endif /* READ_SENSOR_12 */
; 0000 0144 	#ifdef READ_SENSOR_13
; 0000 0145 		line_data[12] = READ_SENSOR_13;
; 0000 0146 	#endif /* READ_SENSOR_13 */
; 0000 0147 	#ifdef READ_SENSOR_14
; 0000 0148 		line_data[13] = READ_SENSOR_14;
; 0000 0149 	#endif /* READ_SENSOR_14 */
; 0000 014A 	#ifdef READ_SENSOR_15
; 0000 014B 		line_data[14] = READ_SENSOR_15;
; 0000 014C 	#endif /* READ_SENSOR_15 */
; 0000 014D 	#ifdef READ_SENSOR_16
; 0000 014E 		line_data[15] = READ_SENSOR_16;
; 0000 014F 	#endif /* READ_SENSOR_16 */
; 0000 0150 }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;
;float CurrentRobotError (void) {
; 0000 0152 float CurrentRobotError (void) {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0153 	register uint8_t i = 0;
; 0000 0154 	register float current_error = 0.0;
; 0000 0155 
; 0000 0156 	ReadSensorLineData ();
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;	i -> R17
;	current_error -> Y+1
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0157 
; 0000 0158 	for (i = 0; i < QTY_OF_SENSORS; i++) {
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0159 	    if (line_data[i] == 0) {
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 015A             // If the data on the [i]th sensor is zero,
; 0000 015B             // then the sensor is located above the black line
; 0000 015C             // Odd degree to preserve the sign '-'
; 0000 015D             current_error += pow (QTY_OF_SENSORS / 2 - 0.5 - i, 3);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 015E         }
; 0000 015F 	}
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0160 
; 0000 0161 	return current_error;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0162 }
;PCODE: $0000016E VOL: 0
