;/**************************** Includes ****************************/
;
;#include "inc/mega328p.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "inc/mega328p_bits.h"
;#include "inc/delay.h"
;#include "inc/math.h"
;
;/***************************** Defines ****************************/
;
;#define     true                        1
;#define     false                       0
;
;#define     F_CPU                       20000000UL      // Clock frequency of quartz resonator
;
;#define     QTY_OF_SENSORS              4                // Quantity of sensors
;
;// Sensor order in the right -> direction
;#define     ReadSensor1                 PINB & (1 << 2)
;#define     ReadSensor2                 PINB & (1 << 1)
;#define     ReadSensor3                 PINB & (1 << 0)
;#define     ReadSensor4                 PIND & (1 << 7)
;//#define     ReadSensor5                 PIND & (1 << 2)
;//#define     ReadSensor6                 PIND & (1 << 4)
;//#define     ReadSensor7                 PINB & (1 << 0)
;//#define     ReadSensor8                 PIND & (1 << 7)
;//#define     ReadSensor9                 PINx & (1 << x)
;//#define     ReadSensor10                PINx & (1 << x)
;//#define     ReadSensor11                PINx & (1 << x)
;//#define     ReadSensor12                PINx & (1 << x)
;//#define     ReadSensor13                PINx & (1 << x)
;//#define     ReadSensor14                PINx & (1 << x)
;//#define     ReadSensor15                PINx & (1 << x)
;//#define     ReadSensor16                PINx & (1 << x)
;
;//#define     ReadSensorIR                PINx & (1 << x)
;//#define     MEncoderLeft                PINx & (1 << x)
;//#define     MEncoderRight               PINx & (1 << x)
;
;#define     LED_1_ON                      PIND |= (1 << DDD0)
;#define     LED_1_OFF                     PIND &= ~(1 << DDD0)
;#define     LED_2_ON                      PIND |= (1 << DDD1)
;#define     LED_2_OFF                     PIND &= ~(1 << DDD1)
;#define     LED_3_ON                      PIND |= (1 << DDD2)
;#define     LED_3_OFF                     PIND &= ~(1 << DDD2)
;
;/**************************** Function ****************************/
;
;void InitSys (void) {
; 0000 0030 void InitSys (void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0031 
; 0000 0032     // Motors
; 0000 0033         DDRB |= (1 << DDB3);            //OC2A
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0034         DDRD |= (1 << DDD6) |           //OC0A
; 0000 0035                 (1 << DDD5) |           //OC0B
; 0000 0036                 (1 << DDD3);            //OC2B
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0037 
; 0000 0038     // SensorLine
; 0000 0039         DDRB &= ~((1 << DDB2) |
; 0000 003A                 (1 << DDB1) |
; 0000 003B                 (1 << DDB0));
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003C         DDRD &= ~(1 << DDD7);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003D 
; 0000 003E    // Infrared Sensor
; 0000 003F           //DDRD &= ~(0 << DDD0);
; 0000 0040 
; 0000 0041    // LED
; 0000 0042       	DDRD |= (1 << DDD2) | (1 << DDD1) | (1 << DDD0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0043 
; 0000 0044 
; 0000 0045 	// TIMER/COUNTER INITIALIZATION
; 0000 0046 		// Timer/Counter 0
; 0000 0047 		// Fast PWM Mode
; 0000 0048         // Non-inverting mode
; 0000 0049 		// Top = 0xFF
; 0000 004A 		// Prescaler: 1:64
; 0000 004B 		TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 004C 		TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004D 		TCCR0B |= (1 << CS01) | (1 << CS00);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004E 		TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004F 		TCNT0  = 0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0050 		OCR0A  = 0x00;    OCR0B  = 0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0051 
; 0000 0052 		// Timer/Counter 1
; 0000 0053         // Fast PWM 8-bit
; 0000 0054         TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0) | (1 << 3) | (1 << 2) | (1 << WGM11) | (1 << WGM10));
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0055         TCCR1B &= ~((1 << ICNC1) | (1 << ICES1) | (1 << 5) | (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS11) | (1 << CS10));
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0056         TCCR1C = 0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0057 		TCNT1H = 0x00;    TCNT1L = 0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0058 		ICR1H  = 0x00;    ICR1L  = 0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0059 		OCR1AH = 0x00;    OCR1AL = 0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005A 		OCR1BH = 0x00;    OCR1BL = 0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005B 
; 0000 005C 		// Timer/Counter 2
; 0000 005D 		// Fast PWM Mode
; 0000 005E         // Non-inverting mode
; 0000 005F 		// Top = 0xFF
; 0000 0060 		// Prescaler: 1:64
; 0000 0061 		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0062 		TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0063 		TCCR2B |=  (1 << CS22);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0064 		TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0065 		TCNT2  = 0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0066 		OCR2A  = 0x00;    OCR2B  = 0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0067 
; 0000 0068 	// Crystal Oscillator division factor: 1
; 0000 0069 		#pragma optsize-
; 0000 006A 			CLKPR  = 0x80;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006B 			CLKPR  = 0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 006C 		#ifdef _OPTIMIZE_SIZE_
; 0000 006D 		#pragma optsize+
; 0000 006E 		#endif
; 0000 006F 
; 0000 0070 	// External Interrupt(s) initialization
; 0000 0071 		// Turn OFF
; 0000 0072 		EICRA  = 0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0073 		EIMSK  = 0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0074 		PCICR  = 0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0075 
; 0000 0076 	// Timer/Counter 0 Interrupt(s) initialization
; 0000 0077 		// Turn OFF
; 0000 0078 		TIMSK0 = 0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0079 
; 0000 007A 	// Timer/Counter 1 Interrupt(s) initialization
; 0000 007B 		// Turn OFF
; 0000 007C 		TIMSK1 = 0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 007D 
; 0000 007E 	// Timer/Counter 2 Interrupt(s) initialization
; 0000 007F 		// Turn OFF
; 0000 0080 		TIMSK2 = 0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0081 
; 0000 0082 	// USART initialization
; 0000 0083 		// Turn OFF
; 0000 0084 		UCSR0B = 0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0085 
; 0000 0086 	// Analog Comparator initialization
; 0000 0087 		// Turn OFF
; 0000 0088 		ACSR   = 0x80;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0089 		ADCSRB = 0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 008A 		DIDR1  = 0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 008B 
; 0000 008C 	// ADC initialization
; 0000 008D 		// Turn OFF
; 0000 008E 		ADCSRA = 0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 008F 
; 0000 0090 	// SPI initialization
; 0000 0091 		// Turn OFF
; 0000 0092 		SPCR   = 0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0093 
; 0000 0094 	// TWI initialization
; 0000 0095 		// Turn OFF
; 0000 0096 		TWCR   = 0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0097 
; 0000 0098 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;
;unsigned short int ReadSensorLineData (unsigned short int lineData[]) {
; 0000 009A unsigned short int ReadSensorLineData (unsigned short int lineData[]) {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009B 
; 0000 009C     #ifdef ReadSensor1
; 0000 009D         lineData[0] = ReadSensor1;
;PCODE: $0000007A VOL: 0
;	lineData -> Y+0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 009E     #endif
; 0000 009F     #ifdef ReadSensor2
; 0000 00A0         lineData[1] = ReadSensor2;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00A1     #endif
; 0000 00A2     #ifdef ReadSensor3
; 0000 00A3         lineData[2] = ReadSensor3;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A4     #endif
; 0000 00A5     #ifdef ReadSensor4
; 0000 00A6         lineData[3] = ReadSensor4;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A7     #endif
; 0000 00A8     #ifdef ReadSensor5
; 0000 00A9         lineData[4] = ReadSensor5;
; 0000 00AA     #endif
; 0000 00AB     #ifdef ReadSensor6
; 0000 00AC         lineData[5] = ReadSensor6;
; 0000 00AD     #endif
; 0000 00AE     #ifdef ReadSensor7
; 0000 00AF         lineData[6] = ReadSensor7;
; 0000 00B0     #endif
; 0000 00B1     #ifdef ReadSensor8
; 0000 00B2         lineData[7] = ReadSensor8;
; 0000 00B3     #endif
; 0000 00B4     #ifdef ReadSensor9
; 0000 00B5         lineData[8] = ReadSensor9;
; 0000 00B6     #endif
; 0000 00B7     #ifdef ReadSensor10
; 0000 00B8         lineData[9] = ReadSensor10;
; 0000 00B9     #endif
; 0000 00BA     #ifdef ReadSensor11
; 0000 00BB         lineData[10] = ReadSensor11;
; 0000 00BC     #endif
; 0000 00BD     #ifdef ReadSensor12
; 0000 00BE         lineData[11] = ReadSensor12;
; 0000 00BF     #endif
; 0000 00C0     #ifdef ReadSensor13
; 0000 00C1         lineData[12] = ReadSensor13;
; 0000 00C2     #endif
; 0000 00C3     #ifdef ReadSensor14
; 0000 00C4         lineData[13] = ReadSensor14;
; 0000 00C5     #endif
; 0000 00C6     #ifdef ReadSensor15
; 0000 00C7         lineData[14] = ReadSensor15;
; 0000 00C8     #endif
; 0000 00C9     #ifdef ReadSensor16
; 0000 00CA         lineData[15] = ReadSensor16;
; 0000 00CB     #endif
; 0000 00CC 
; 0000 00CD     return lineData[QTY_OF_SENSORS];
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00CE 
; 0000 00CF }
;PCODE: $00000097 VOL: 0
;
;float RobotPosition(void) {
; 0000 00D1 float RobotPosition(void) {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00D2 
; 0000 00D3     int posSum = 0;
; 0000 00D4     float posMedian = QTY_OF_SENSORS / 2;
; 0000 00D5     bool sensorLineData[QTY_OF_SENSORS] = {0};
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;	posSum -> R16,R17
;	posMedian -> Y+2
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;    int signalCorrected;
;    unsigned char i = 0;
;
;    ReadSensorLineData(sensorLineData);
; 0000 00D9 ReadSensorLineData(sensorLineData);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
