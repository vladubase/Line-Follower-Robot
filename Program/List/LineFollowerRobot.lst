
AVRASM ver. 2.1.30  C:\Users\vladu\OneDrive\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm Tue Jul 14 14:03:50 2020

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega328P
                 ;Program type             : Application
                 ;Clock frequency          : 20,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : No
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2303
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x3:
000034 0000
000035 0000
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000038 0000
000039 0000
00003a 0000
00003b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003c 0000
00003d 0000
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000040 0000
000041 0000
000042 0000
000043 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000044 0000
000045 0000
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000048 0000
000049 0000
00004a 0000
00004b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004c 0000
00004d 0000
00004e 0000
00004f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x2020060:
C:\Users\vladu\OneDrive\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm(1120): warning: .cseg .db misalignment - padding zero byte
000052 0001      	.DB  0x1
                 _0x2020000:
000053 4e2d
000054 4e41
000055 4900
000056 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\vladu\OneDrive\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm(1123): warning: .cseg .db misalignment - padding zero byte
000057 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000058 0001      	.DW  0x01
000059 0308      	.DW  __seed_G101
00005a 00a4      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00005b 0000      	.DW  0
                 
                 __RESET:
00005c 94f8      	CLI
00005d 27ee      	CLR  R30
00005e bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005f e0f1      	LDI  R31,1
000060 bff5      	OUT  MCUCR,R31
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000062 e1f8      	LDI  R31,0x18
000063 95a8      	WDR
000064 b7a4      	IN   R26,MCUSR
000065 7fa7      	CBR  R26,8
000066 bfa4      	OUT  MCUSR,R26
000067 93f0 0060 	STS  WDTCSR,R31
000069 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
00006b e08d      	LDI  R24,(14-2)+1
00006c e0a2      	LDI  R26,2
00006d 27bb      	CLR  R27
                 __CLEAR_REG:
00006e 93ed      	ST   X+,R30
00006f 958a      	DEC  R24
000070 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000071 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000072 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000073 e0a0      	LDI  R26,LOW(__SRAM_START)
000074 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000075 93ed      	ST   X+,R30
000076 9701      	SBIW R24,1
000077 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000078 ebe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000079 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007a 9185      	LPM  R24,Z+
00007b 9195      	LPM  R25,Z+
00007c 9700      	SBIW R24,0
00007d f061      	BREQ __GLOBAL_INI_END
00007e 91a5      	LPM  R26,Z+
00007f 91b5      	LPM  R27,Z+
000080 9005      	LPM  R0,Z+
000081 9015      	LPM  R1,Z+
000082 01bf      	MOVW R22,R30
000083 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000084 9005      	LPM  R0,Z+
000085 920d      	ST   X+,R0
000086 9701      	SBIW R24,1
000087 f7e1      	BRNE __GLOBAL_INI_LOOP
000088 01fb      	MOVW R30,R22
000089 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00008a e0e0      	LDI  R30,__GPIOR0_INIT
00008b bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008d bfed      	OUT  SPL,R30
00008e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000090 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000091 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000092 940c 0094 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/****
                 ;	*	@name		LINE FOLLOWER ROBOT
                 ;	*	@file 		LineFollowerRobot.c
                 ;	*
                 ;	*	@author 	Uladzislau 'vladubase' Dubatouka
                 ;	*				<vladubase@gmail.com>.
                 ;	*	@version	V1.1
                 ;	*	@date 		Created on 2020.07.14.
                 ;	*
                 ;	*	@brief 		This program is controlling the Line following robot using PID regulator.
                 ;	*				It has a flexible settings system via #defines at the beginning of the .C main file.
                 ;	*				IO ports are configured through registers.
                 ;	*
                 ;	*  	@attention 	"The usual procedure for setting up the PID regulator:
                 ;	*					1. At a low speed, we adjust the P-controller (we select a value of kP such
                 ;	*						that in the coolest turns the robot passes keeping the line close to its
                 ;	*						extreme sensors). kD and kI are equal to zero, i.e. use a pure P-regulator;
                 ;	*					2. Increase the speed, select the value of kD. If the robot went without
                 ;	*						inertia when setting the P-controller, then the kP value can be left unchanged.
                 ;	*						If the robot has already gone with inertia, as is usually the case
                 ;	*						with fast robots, then the kP value will need to be lowered -
                 ;	*						we will see this by the fact that the robot will cease to deviate
                 ;	*						strongly from the line thanks to the help of the D-controller;
                 ;	*					3. When the PD controller is configured, then I can be selected,
                 ;	*						reducing the deviation of the robot from the line. The values ​​of
                 ;	*						the coefficients kD and kP are usually also somewhat lower.
                 ;	*						An i-controller is useful for racing where a line can make loops.
                 ;	*						Deviation of the robot from a straight line is fraught with
                 ;	*						the choice of the wrong direction of movement. When racing on tracks
                 ;	*						without loops, the PD controller is often used, since in the general
                 ;	*						case it allows you to develop a higher speed."
                 ;	*						(Credit: https://www.goodlancer.com/pid-control/).
                 ;	*
                 ;	*   @note	4.25 ms for main cycle (not counting MAIN_CYCLE_DELAY) with 4 low-level sensors.
                 ;	*			6 ms for main cycle (not counting MAIN_CYCLE_DELAY) with 15 low-level sensors.
                 ;	*
                 ;*****/
                 ;
                 ;/**************************** Includes ****************************/
                 ;
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <mega328p_bits.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <stdbool.h>
                 ;#include <stdint.h>
                 ;
                 ;/***************************** Defines ****************************/
                 ;
                 ;#define		F_CPU				((uint32_t)20000000)	// Quartz resonator clock frequency
                 ;
                 ;#define		QTY_OF_SENSORS		8						// Quantity of sensors
                 ;#define		AVG_SPEED			((uint8_t)155)			// Average speed of robot
                 ;
                 ;#define		MOTORS_NOT_PERFECT	true 					// Do the motors have different real parameters (e.g. Speed, Torque, etc.)?
                 ;#if MOTORS_NOT_PERFECT									// There is nothing perfect ;)
                 ;	#define	L_MOTOR_MISMATCH	((float)1.0)			// Coefficient of motor power difference
                 ;	#define	R_MOTOR_MISMATCH	((float)1.07)			// Coefficient of motor power difference
                 ;#endif /* MOTORS_NOT_PERFECT */
                 ;
                 ;// PID
                 ;// Setup: P -> PD -> PID
                 ;#define		kP					((uint8_t)1)			// Proportional	feedback coefficient
                 ;#define		kI					((uint8_t)0)			// Integral 	feedback coefficient
                 ;#define		kD					((uint8_t)0)			// Differential	feedback coefficient
                 ;#define		QTY_OF_ERR			((uint8_t)10)			// Quantity of errors in memory during last (QTY_OF_ERR * MAIN_CYCLE_DELAY) ms
                 ;#define		MAIN_CYCLE_DELAY	((uint8_t)2)			// The main cycle delay (in ms) for correct work of D-regulation
                 ;
                 ;// Sensor order in the right --> direction
                 ;#if (QTY_OF_SENSORS >= 1)
                 ;    #define	READ_SENSOR_1		PIND & (1 << DDD2)
                 ;#endif /* QTY_OF_SENSORS >= 1 */
                 ;#if QTY_OF_SENSORS >= 2
                 ;    #define	READ_SENSOR_2		PIND & (1 << DDD4)
                 ;#endif /* QTY_OF_SENSORS >= 2 */
                 ;#if QTY_OF_SENSORS >= 3
                 ;    #define	READ_SENSOR_3		PINC & (1 << DDC5)
                 ;#endif /* QTY_OF_SENSORS >= 3 */
                 ;#if QTY_OF_SENSORS >= 4
                 ;    #define	READ_SENSOR_4		PINC & (1 << DDC4)
                 ;#endif /* QTY_OF_SENSORS >= 4 */
                 ;#if QTY_OF_SENSORS >= 5
                 ;    #define	READ_SENSOR_5		PINC & (1 << DDC3)
                 ;#endif /* QTY_OF_SENSORS >= 5 */
                 ;#if QTY_OF_SENSORS >= 6
                 ;    #define	READ_SENSOR_6		PINC & (1 << DDC2)
                 ;#endif /* QTY_OF_SENSORS >= 6 */
                 ;#if QTY_OF_SENSORS >= 7
                 ;    #define	READ_SENSOR_7		PINC & (1 << DDC1)
                 ;#endif /* QTY_OF_SENSORS >= 7 */
                 ;#if QTY_OF_SENSORS >= 8
                 ;    #define	READ_SENSOR_8		PINC & (1 << DDC0)
                 ;#endif /* QTY_OF_SENSORS >= 8 */
                 ;#if QTY_OF_SENSORS >= 9
                 ;    #define	READ_SENSOR_9		PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 9 */
                 ;#if QTY_OF_SENSORS >= 10
                 ;    #define	READ_SENSOR_10		PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 10 */
                 ;#if QTY_OF_SENSORS >= 11
                 ;    #define	READ_SENSOR_11		PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 11 */
                 ;#if QTY_OF_SENSORS >= 12
                 ;    #define	READ_SENSOR_12		PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 12 */
                 ;#if QTY_OF_SENSORS >= 13
                 ;    #define	READ_SENSOR_13		PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 13 */
                 ;#if QTY_OF_SENSORS >= 14
                 ;    #define	READ_SENSOR_14		PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 14 */
                 ;#if QTY_OF_SENSORS >= 15
                 ;    #define	READ_SENSOR_15		PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 15 */
                 ;#if QTY_OF_SENSORS >= 16
                 ;    #define	READ_SENSOR_16		PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 16 */
                 ;
                 ;//#define	READ_IR_SENSOR		PINx & (1 << DDxx)
                 ;
                 ;/************************* Global Variables ***********************/
                 ;
                 ;bool line_data[QTY_OF_SENSORS] = {0};					// Store current values from sensor line
                 ;
                 ;/*********************** Function  prototypes *********************/
                 ;
                 ;void InitSys (void);
                 ;void ReadSensorLineData (void);
                 ;float CurrentRobotError (void);
                 ;
                 ;/****************************** Main ******************************/
                 ;
                 ;void main (void) {
                 ; 0000 0085 void main (void) {
                 
                 	.CSEG
                 _main:
                 ; 0000 0086 	// DEFINITION OF VARIABLES
                 ; 0000 0087 	register float error_history[QTY_OF_ERR] = {0};		// Storing the values of recent errors
                 ; 0000 0088 	register float error_sum = 0.0;						// Sum of errors in history
                 ; 0000 0089 	register uint8_t i = 0;
                 ; 0000 008A 	register float P = 0.0;
                 ; 0000 008B 	register float I = 0.0;
                 ; 0000 008C 	register float D = 0.0;
                 ; 0000 008D 	register float PID_total_correction = 0.0;      	// Sum of P, I, D
                 ; 0000 008E 	register int16_t left_motor_speed = 0;
                 ; 0000 008F 	register int16_t right_motor_speed = 0;
                 ; 0000 0090 
                 ; 0000 0091 	// MICROCONTROLLER INITIALIZATION
                 ; 0000 0092 	InitSys ();
000094 97ec      	SBIW R28,60
000095 e38c      	LDI  R24,60
000096 e0a0      	LDI  R26,LOW(0)
000097 e0b0      	LDI  R27,HIGH(0)
000098 e6e8      	LDI  R30,LOW(_0x3*2)
000099 e0f0      	LDI  R31,HIGH(_0x3*2)
00009a 940e 066e 	CALL __INITLOCB
                 ;	error_history -> Y+20
                 ;	error_sum -> Y+16
                 ;	i -> R17
                 ;	P -> Y+12
                 ;	I -> Y+8
                 ;	D -> Y+4
                 ;	PID_total_correction -> Y+0
                 ;	left_motor_speed -> R18,R19
                 ;	right_motor_speed -> R20,R21
00009c e010      	LDI  R17,0
                +
00009d e020     +LDI R18 , LOW ( 0 )
00009e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00009f e040     +LDI R20 , LOW ( 0 )
0000a0 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0000a1 d0b6      	RCALL _InitSys
                 ; 0000 0093 
                 ; 0000 0094 	// Waiting for a signal on IR sensor
                 ; 0000 0095 	#ifdef READ_IR_SENSOR
                 ; 0000 0096 		while (READ_IR_SENSOR) {
                 ; 0000 0097 			LED_1_ON;
                 ; 0000 0098 			delay_ms (25);
                 ; 0000 0099 			LED_1_OFF;
                 ; 0000 009A 			delay_ms (25);
                 ; 0000 009B 		}
                 ; 0000 009C 	#endif /* READ_IR_SENSOR */
                 ; 0000 009D 
                 ; 0000 009E 	//delay_ms (5000);									// This delay is required by the competition rules
                 ; 0000 009F 
                 ; 0000 00A0 	// MAIN CYCLE
                 ; 0000 00A1 	while (true) {
                 _0x4:
                 ; 0000 00A2 		error_sum = 0.0;
0000a2 e0e0      	LDI  R30,LOW(0)
                +
0000a3 8be8     +STD Y + 16 , R30
0000a4 8be9     +STD Y + 16 + 1 , R30
0000a5 8bea     +STD Y + 16 + 2 , R30
0000a6 8beb     +STD Y + 16 + 3 , R30
                 	__CLRD1S 16
                 ; 0000 00A3 
                 ; 0000 00A4 	    // Shift error values
                 ; 0000 00A5 		for (i = 0; i < QTY_OF_ERR - 1; i++) {
0000a7 e010      	LDI  R17,LOW(0)
                 _0x8:
0000a8 3019      	CPI  R17,9
0000a9 f4a8      	BRSH _0x9
                 ; 0000 00A6 			error_history[i] = error_history[i + 1];
0000aa 940e 03de 	CALL SUBOPT_0x0
0000ac 0fea      	ADD  R30,R26
0000ad 1ffb      	ADC  R31,R27
0000ae 010f      	MOVW R0,R30
0000af 2fe1      	MOV  R30,R17
0000b0 5fef      	SUBI R30,-LOW(1)
0000b1 e0f0      	LDI  R31,0
0000b2 01de      	MOVW R26,R28
0000b3 9654      	ADIW R26,20
0000b4 940e 061e 	CALL __LSLW2
0000b6 0fae      	ADD  R26,R30
0000b7 1fbf      	ADC  R27,R31
0000b8 940e 062e 	CALL __GETD1P
0000ba 01d0      	MOVW R26,R0
0000bb 940e 0634 	CALL __PUTDP1
                 ; 0000 00A7 		}
0000bd 5f1f      	SUBI R17,-1
0000be cfe9      	RJMP _0x8
                 _0x9:
                 ; 0000 00A8 		error_history[QTY_OF_ERR - 1] = CurrentRobotError ();
0000bf d132      	RCALL _CurrentRobotError
                +
0000c0 afe8     +STD Y + 56 , R30
0000c1 aff9     +STD Y + 56 + 1 , R31
0000c2 af6a     +STD Y + 56 + 2 , R22
0000c3 af7b     +STD Y + 56 + 3 , R23
                 	__PUTD1S 56
                 ; 0000 00A9 
                 ; 0000 00AA 		// Calculation of value P
                 ; 0000 00AB 		P = error_history[QTY_OF_ERR - 1] * kP;			// Current error * kP
                +
0000c4 ada8     +LDD R26 , Y + 56
0000c5 adb9     +LDD R27 , Y + 56 + 1
0000c6 ad8a     +LDD R24 , Y + 56 + 2
0000c7 ad9b     +LDD R25 , Y + 56 + 3
                 	__GETD2S 56
0000c8 940e 03e5 	CALL SUBOPT_0x1
0000ca 940e 0563 	CALL __MULF12
                +
0000cc 87ec     +STD Y + 12 , R30
0000cd 87fd     +STD Y + 12 + 1 , R31
0000ce 876e     +STD Y + 12 + 2 , R22
0000cf 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ; 0000 00AC 		// Calculation of value I
                 ; 0000 00AD 		for (i = 0; i < QTY_OF_ERR; i++) {
0000d0 e010      	LDI  R17,LOW(0)
                 _0xB:
0000d1 301a      	CPI  R17,10
0000d2 f490      	BRSH _0xC
                 ; 0000 00AE 			error_sum += error_history[i];
0000d3 940e 03de 	CALL SUBOPT_0x0
0000d5 0fae      	ADD  R26,R30
0000d6 1fbf      	ADC  R27,R31
0000d7 940e 062e 	CALL __GETD1P
                +
0000d9 89a8     +LDD R26 , Y + 16
0000da 89b9     +LDD R27 , Y + 16 + 1
0000db 898a     +LDD R24 , Y + 16 + 2
0000dc 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0000dd 940e 0513 	CALL __ADDF12
                +
0000df 8be8     +STD Y + 16 , R30
0000e0 8bf9     +STD Y + 16 + 1 , R31
0000e1 8b6a     +STD Y + 16 + 2 , R22
0000e2 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
                 ; 0000 00AF 		}
0000e3 5f1f      	SUBI R17,-1
0000e4 cfec      	RJMP _0xB
                 _0xC:
                 ; 0000 00B0 		I = error_sum * kI;								// sum of errors * kI
                +
0000e5 89a8     +LDD R26 , Y + 16
0000e6 89b9     +LDD R27 , Y + 16 + 1
0000e7 898a     +LDD R24 , Y + 16 + 2
0000e8 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0000e9 940e 03ea 	CALL SUBOPT_0x2
0000eb 940e 0563 	CALL __MULF12
                +
0000ed 87e8     +STD Y + 8 , R30
0000ee 87f9     +STD Y + 8 + 1 , R31
0000ef 876a     +STD Y + 8 + 2 , R22
0000f0 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 00B1 		// Calculation of value D
                 ; 0000 00B2 		D = (error_history[QTY_OF_ERR - 1] -        	// (current error - first error) * kD
                 ; 0000 00B3         	error_history[0]) * kD;
                +
0000f1 89ac     +LDD R26 , Y + 20
0000f2 89bd     +LDD R27 , Y + 20 + 1
0000f3 898e     +LDD R24 , Y + 20 + 2
0000f4 899f     +LDD R25 , Y + 20 + 3
                 	__GETD2S 20
                +
0000f5 ade8     +LDD R30 , Y + 56
0000f6 adf9     +LDD R31 , Y + 56 + 1
0000f7 ad6a     +LDD R22 , Y + 56 + 2
0000f8 ad7b     +LDD R23 , Y + 56 + 3
                 	__GETD1S 56
0000f9 940e 050c 	CALL __SUBF12
                +
0000fb e0a0     +LDI R26 , LOW ( 0x0 )
0000fc e0b0     +LDI R27 , HIGH ( 0x0 )
0000fd e080     +LDI R24 , BYTE3 ( 0x0 )
0000fe e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
0000ff 940e 0563 	CALL __MULF12
                +
000101 83ec     +STD Y + 4 , R30
000102 83fd     +STD Y + 4 + 1 , R31
000103 836e     +STD Y + 4 + 2 , R22
000104 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 00B4 
                 ; 0000 00B5 		PID_total_correction = (P + I) + D;
000105 940e 03ef 	CALL SUBOPT_0x3
                +
000107 85ac     +LDD R26 , Y + 12
000108 85bd     +LDD R27 , Y + 12 + 1
000109 858e     +LDD R24 , Y + 12 + 2
00010a 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
00010b 940e 0513 	CALL __ADDF12
00010d 940e 03f4 	CALL SUBOPT_0x4
00010f 940e 0513 	CALL __ADDF12
000111 940e 0643 	CALL __PUTD1S0
                 ; 0000 00B6 
                 ; 0000 00B7 		//
                 ; 0000 00B8 		left_motor_speed  = AVG_SPEED - (uint16_t)PID_total_correction;
000113 940e 03f9 	CALL SUBOPT_0x5
000115 e9ab      	LDI  R26,LOW(155)
000116 e0b0      	LDI  R27,HIGH(155)
000117 1bae      	SUB  R26,R30
000118 0bbf      	SBC  R27,R31
000119 019d      	MOVW R18,R26
                 ; 0000 00B9 		right_motor_speed = AVG_SPEED + (uint16_t)PID_total_correction;
00011a 940e 03f9 	CALL SUBOPT_0x5
00011c 56e5      	SUBI R30,LOW(-155)
00011d 4fff      	SBCI R31,HIGH(-155)
00011e 01af      	MOVW R20,R30
                 ; 0000 00BA 
                 ; 0000 00BB 		// Validating a range of variables
                 ; 0000 00BC 		if (left_motor_speed > 255)
                +
00011f 3020     +CPI R18 , LOW ( 256 )
000120 e0e1     +LDI R30 , HIGH ( 256 )
000121 073e     +CPC R19 , R30
                 	__CPWRN 18,19,256
000122 f01c      	BRLT _0xD
                 ; 0000 00BD 			left_motor_speed = 255;
                +
000123 ef2f     +LDI R18 , LOW ( 255 )
000124 e030     +LDI R19 , HIGH ( 255 )
                 	__GETWRN 18,19,255
                 ; 0000 00BE 		else if (left_motor_speed < 0)
000125 c004      	RJMP _0xE
                 _0xD:
000126 2333      	TST  R19
000127 f412      	BRPL _0xF
                 ; 0000 00BF 			left_motor_speed = 0;
                +
000128 e020     +LDI R18 , LOW ( 0 )
000129 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 00C0 		if (right_motor_speed > 255)
                 _0xF:
                 _0xE:
                +
00012a 3040     +CPI R20 , LOW ( 256 )
00012b e0e1     +LDI R30 , HIGH ( 256 )
00012c 075e     +CPC R21 , R30
                 	__CPWRN 20,21,256
00012d f01c      	BRLT _0x10
                 ; 0000 00C1 			right_motor_speed = 255;
                +
00012e ef4f     +LDI R20 , LOW ( 255 )
00012f e050     +LDI R21 , HIGH ( 255 )
                 	__GETWRN 20,21,255
                 ; 0000 00C2 		else if (right_motor_speed < 0)
000130 c004      	RJMP _0x11
                 _0x10:
000131 2355      	TST  R21
000132 f412      	BRPL _0x12
                 ; 0000 00C3 			right_motor_speed = 0;
                +
000133 e040     +LDI R20 , LOW ( 0 )
000134 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 00C4 
                 ; 0000 00C5 		// Motors power difference compensation
                 ; 0000 00C6 		#if MOTORS_NOT_PERFECT
                 ; 0000 00C7 			OCR2A = 0;
                 _0x12:
                 _0x11:
000135 e0e0      	LDI  R30,LOW(0)
000136 93e0 00b3 	STS  179,R30
                 ; 0000 00C8 			OCR2B = left_motor_speed * L_MOTOR_MISMATCH;
000138 01f9      	MOVW R30,R18
000139 940e 03fe 	CALL SUBOPT_0x6
00013b 940e 0403 	CALL SUBOPT_0x7
00013d 940e 0563 	CALL __MULF12
00013f eba4      	LDI  R26,LOW(180)
000140 e0b0      	LDI  R27,HIGH(180)
000141 940e 04a0 	CALL __CFD1U
000143 93ec      	ST   X,R30
                 ; 0000 00C9 			OCR0A = 0;
000144 e0e0      	LDI  R30,LOW(0)
000145 bde7      	OUT  0x27,R30
                 ; 0000 00CA 			OCR0B = right_motor_speed * R_MOTOR_MISMATCH;
000146 01fa      	MOVW R30,R20
000147 940e 03fe 	CALL SUBOPT_0x6
                +
000149 eca3     +LDI R26 , LOW ( 0x3F88F5C3 )
00014a efb5     +LDI R27 , HIGH ( 0x3F88F5C3 )
00014b e888     +LDI R24 , BYTE3 ( 0x3F88F5C3 )
00014c e39f     +LDI R25 , BYTE4 ( 0x3F88F5C3 )
                 	__GETD2N 0x3F88F5C3
00014d 940e 0563 	CALL __MULF12
00014f 940e 04a0 	CALL __CFD1U
000151 bde8      	OUT  0x28,R30
                 ; 0000 00CB 		#else
                 ; 0000 00CC 			OCR2A = 0;
                 ; 0000 00CD 			OCR2B = left_motor_speed;
                 ; 0000 00CE 			OCR0A = 0;
                 ; 0000 00CF 			OCR0B = right_motor_speed;
                 ; 0000 00D0 		#endif /* MOTORS_NOT_PERFECT */
                 ; 0000 00D1 
                 ; 0000 00D2 		delay_ms (MAIN_CYCLE_DELAY);
000152 e0a2      	LDI  R26,LOW(2)
000153 e0b0      	LDI  R27,0
000154 940e 0446 	CALL _delay_ms
                 ; 0000 00D3 	}
000156 cf4b      	RJMP _0x4
                 ; 0000 00D4 }
                 _0x13:
000157 cfff      	RJMP _0x13
                 ;
                 ;/*************************** Functions ****************************/
                 ;
                 ;void InitSys (void) {
                 ; 0000 00D8 void InitSys (void) {
                 _InitSys:
                 ; 0000 00D9 	// Motors
                 ; 0000 00DA 	    // Output mode
                 ; 0000 00DB 		DDRB |= (1 << DDB3);			            	// OC2A
000158 9a23      	SBI  0x4,3
                 ; 0000 00DC 		DDRD |= (1 << DDD6) |			            	// OC0A
                 ; 0000 00DD 				(1 << DDD5) |			            	// OC0B
                 ; 0000 00DE 				(1 << DDD3);			            	// OC2B
000159 b1ea      	IN   R30,0xA
00015a 66e8      	ORI  R30,LOW(0x68)
00015b b9ea      	OUT  0xA,R30
                 ; 0000 00DF 
                 ; 0000 00E0 	// SensorLine
                 ; 0000 00E1 	    // Input mode
                 ; 0000 00E2 		DDRB &= ~((1 << DDB2) | (1 << DDB1) | (1 << DDB0));
00015c b1e4      	IN   R30,0x4
00015d 7fe8      	ANDI R30,LOW(0xF8)
00015e b9e4      	OUT  0x4,R30
                 ; 0000 00E3 		DDRD &= ~(1 << DDD7);
00015f 9857      	CBI  0xA,7
                 ; 0000 00E4 
                 ; 0000 00E5 	// Infrared Sensor
                 ; 0000 00E6 	    // Input mode
                 ; 0000 00E7 		#ifdef READ_SENSOR_IR
                 ; 0000 00E8 			DDRx &= ~(1 << DDxx);
                 ; 0000 00E9 		#endif /* READ_SENSOR_IR */
                 ; 0000 00EA 
                 ; 0000 00EB 	// Timer/Counter(s) initialization
                 ; 0000 00EC 		// Timer/Counter 0
                 ; 0000 00ED 		// Fast PWM Mode
                 ; 0000 00EE 		// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
                 ; 0000 00EF 		// TOP = 0xFF
                 ; 0000 00F0 		// Prescaler: 1:64
                 ; 0000 00F1 		TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
000160 b5e4      	IN   R30,0x24
000161 6ae3      	ORI  R30,LOW(0xA3)
000162 bde4      	OUT  0x24,R30
                 ; 0000 00F2 		TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
000163 b5e4      	IN   R30,0x24
000164 7ae3      	ANDI R30,LOW(0xA3)
000165 bde4      	OUT  0x24,R30
                 ; 0000 00F3 		TCCR0B |= (1 << CS01) | (1 << CS00);
000166 b5e5      	IN   R30,0x25
000167 60e3      	ORI  R30,LOW(0x3)
000168 bde5      	OUT  0x25,R30
                 ; 0000 00F4 		TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
000169 b5e5      	IN   R30,0x25
00016a 70e3      	ANDI R30,LOW(0x3)
00016b bde5      	OUT  0x25,R30
                 ; 0000 00F5 		TCNT0  = 0x00;
00016c e0e0      	LDI  R30,LOW(0)
00016d bde6      	OUT  0x26,R30
                 ; 0000 00F6 		TIMSK0 = 0x00;
00016e 93e0 006e 	STS  110,R30
                 ; 0000 00F7 		OCR0A  = 0x00;	OCR0B  = 0x00;
000170 bde7      	OUT  0x27,R30
000171 bde8      	OUT  0x28,R30
                 ; 0000 00F8 
                 ; 0000 00F9 		// Timer/Counter 1
                 ; 0000 00FA 		// Fast PWM 10-bit Mode
                 ; 0000 00FB 		// Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM (non-inverting mode)
                 ; 0000 00FC 		// TOP = 0x03FF
                 ; 0000 00FD 		// Prescaler: 1:64
                 ; 0000 00FE 		TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
000172 91e0 0080 	LDS  R30,128
000174 6ae3      	ORI  R30,LOW(0xA3)
000175 93e0 0080 	STS  128,R30
                 ; 0000 00FF 		TCCR1A &= ~((1 << COM1A0) | (1 << COM1B0) | (1 << 3) | (1 << 2));
000177 91e0 0080 	LDS  R30,128
000179 7ae3      	ANDI R30,LOW(0xA3)
00017a 93e0 0080 	STS  128,R30
                 ; 0000 0100 		TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
00017c 91e0 0081 	LDS  R30,129
00017e 60eb      	ORI  R30,LOW(0xB)
00017f 93e0 0081 	STS  129,R30
                 ; 0000 0101 		TCCR1B &= ~((1 << ICNC1) | (1 << ICES1) | (1 << 5) | (1 << WGM13) | (1 << CS12));
000181 91e0 0081 	LDS  R30,129
000183 70eb      	ANDI R30,LOW(0xB)
000184 93e0 0081 	STS  129,R30
                 ; 0000 0102 		TCCR1C = 0x00;
000186 e0e0      	LDI  R30,LOW(0)
000187 93e0 0082 	STS  130,R30
                 ; 0000 0103 		TCNT1H = 0x00;	TCNT1L = 0x00;
000189 93e0 0085 	STS  133,R30
00018b 93e0 0084 	STS  132,R30
                 ; 0000 0104 		TIMSK1 = 0x00;
00018d 93e0 006f 	STS  111,R30
                 ; 0000 0105 		ICR1H  = 0x00;	ICR1L  = 0x00;
00018f 93e0 0087 	STS  135,R30
000191 93e0 0086 	STS  134,R30
                 ; 0000 0106 		OCR1AH = 0x00;	OCR1AL = 0x00;
000193 93e0 0089 	STS  137,R30
000195 93e0 0088 	STS  136,R30
                 ; 0000 0107 		OCR1BH = 0x00;	OCR1BL = 0x00;
000197 93e0 008b 	STS  139,R30
000199 93e0 008a 	STS  138,R30
                 ; 0000 0108 
                 ; 0000 0109 		// Timer/Counter 2
                 ; 0000 010A 		// Fast PWM Mode
                 ; 0000 010B 		// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
                 ; 0000 010C 		// TOP = 0xFF
                 ; 0000 010D 		// Prescaler: 1:64
                 ; 0000 010E 		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
00019b 91e0 00b0 	LDS  R30,176
00019d 6ae3      	ORI  R30,LOW(0xA3)
00019e 93e0 00b0 	STS  176,R30
                 ; 0000 010F 		TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
0001a0 91e0 00b0 	LDS  R30,176
0001a2 7ae3      	ANDI R30,LOW(0xA3)
0001a3 93e0 00b0 	STS  176,R30
                 ; 0000 0110 		TCCR2B |= (1 << CS22);
0001a5 91e0 00b1 	LDS  R30,177
0001a7 60e4      	ORI  R30,4
0001a8 93e0 00b1 	STS  177,R30
                 ; 0000 0111 		TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
0001aa 91e0 00b1 	LDS  R30,177
0001ac 70e4      	ANDI R30,LOW(0x4)
0001ad 93e0 00b1 	STS  177,R30
                 ; 0000 0112 		TCNT2  = 0x00;
0001af e0e0      	LDI  R30,LOW(0)
0001b0 93e0 00b2 	STS  178,R30
                 ; 0000 0113 		TIMSK2 = 0x00;
0001b2 93e0 0070 	STS  112,R30
                 ; 0000 0114 		OCR2A  = 0x00;	OCR2B  = 0x00;
0001b4 93e0 00b3 	STS  179,R30
0001b6 93e0 00b4 	STS  180,R30
                 ; 0000 0115 
                 ; 0000 0116 	// Crystal Oscillator division factor: 1
                 ; 0000 0117 		#pragma optsize-
                 ; 0000 0118 			CLKPR |= (1 << CLKPCE);
0001b8 91e0 0061 	LDS  R30,97
0001ba 68e0      	ORI  R30,0x80
0001bb 93e0 0061 	STS  97,R30
                 ; 0000 0119 			CLKPR = 0x00;
0001bd e0e0      	LDI  R30,LOW(0)
0001be 93e0 0061 	STS  97,R30
                 ; 0000 011A 		#ifdef _OPTIMIZE_SIZE_
                 ; 0000 011B 			#pragma optsize+
                 ; 0000 011C 		#endif /* _OPTIMIZE_SIZE_ */
                 ; 0000 011D }
0001c0 9508      	RET
                 ;
                 ;void ReadSensorLineData (void) {
                 ; 0000 011F void ReadSensorLineData (void) {
                 _ReadSensorLineData:
                 ; 0000 0120 	#ifdef READ_SENSOR_1
                 ; 0000 0121 		line_data[0] = READ_SENSOR_1;
0001c1 b1e9      	IN   R30,0x9
0001c2 70e4      	ANDI R30,LOW(0x4)
0001c3 e0a0      	LDI  R26,LOW(_line_data)
0001c4 e0b3      	LDI  R27,HIGH(_line_data)
0001c5 940e 0408 	CALL SUBOPT_0x8
                 ; 0000 0122 	#endif /* READ_SENSOR_1 */
                 ; 0000 0123 	#ifdef READ_SENSOR_2
                 ; 0000 0124 		line_data[1] = READ_SENSOR_2;
                +
0001c7 e0a1     +LDI R26 , LOW ( _line_data + ( 1 ) )
0001c8 e0b3     +LDI R27 , HIGH ( _line_data + ( 1 ) )
                 	__POINTW2MN _line_data,1
0001c9 b1e9      	IN   R30,0x9
0001ca 71e0      	ANDI R30,LOW(0x10)
0001cb 940e 0408 	CALL SUBOPT_0x8
                 ; 0000 0125 	#endif /* READ_SENSOR_2 */
                 ; 0000 0126 	#ifdef READ_SENSOR_3
                 ; 0000 0127 		line_data[2] = READ_SENSOR_3;
                +
0001cd e0a2     +LDI R26 , LOW ( _line_data + ( 2 ) )
0001ce e0b3     +LDI R27 , HIGH ( _line_data + ( 2 ) )
                 	__POINTW2MN _line_data,2
0001cf b1e6      	IN   R30,0x6
0001d0 72e0      	ANDI R30,LOW(0x20)
0001d1 940e 0408 	CALL SUBOPT_0x8
                 ; 0000 0128 	#endif /* READ_SENSOR_3 */
                 ; 0000 0129 	#ifdef READ_SENSOR_4
                 ; 0000 012A 		line_data[3] = READ_SENSOR_4;
                +
0001d3 e0a3     +LDI R26 , LOW ( _line_data + ( 3 ) )
0001d4 e0b3     +LDI R27 , HIGH ( _line_data + ( 3 ) )
                 	__POINTW2MN _line_data,3
0001d5 b1e6      	IN   R30,0x6
0001d6 71e0      	ANDI R30,LOW(0x10)
0001d7 940e 0408 	CALL SUBOPT_0x8
                 ; 0000 012B 	#endif /* READ_SENSOR_4 */
                 ; 0000 012C 	#ifdef READ_SENSOR_5
                 ; 0000 012D 		line_data[4] = READ_SENSOR_5;
                +
0001d9 e0a4     +LDI R26 , LOW ( _line_data + ( 4 ) )
0001da e0b3     +LDI R27 , HIGH ( _line_data + ( 4 ) )
                 	__POINTW2MN _line_data,4
0001db b1e6      	IN   R30,0x6
0001dc 70e8      	ANDI R30,LOW(0x8)
0001dd 940e 0408 	CALL SUBOPT_0x8
                 ; 0000 012E 	#endif /* READ_SENSOR_5 */
                 ; 0000 012F 	#ifdef READ_SENSOR_6
                 ; 0000 0130 		line_data[5] = READ_SENSOR_6;
                +
0001df e0a5     +LDI R26 , LOW ( _line_data + ( 5 ) )
0001e0 e0b3     +LDI R27 , HIGH ( _line_data + ( 5 ) )
                 	__POINTW2MN _line_data,5
0001e1 b1e6      	IN   R30,0x6
0001e2 70e4      	ANDI R30,LOW(0x4)
0001e3 940e 0408 	CALL SUBOPT_0x8
                 ; 0000 0131 	#endif /* READ_SENSOR_6 */
                 ; 0000 0132 	#ifdef READ_SENSOR_7
                 ; 0000 0133 		line_data[6] = READ_SENSOR_7;
                +
0001e5 e0a6     +LDI R26 , LOW ( _line_data + ( 6 ) )
0001e6 e0b3     +LDI R27 , HIGH ( _line_data + ( 6 ) )
                 	__POINTW2MN _line_data,6
0001e7 b1e6      	IN   R30,0x6
0001e8 70e2      	ANDI R30,LOW(0x2)
0001e9 940e 0408 	CALL SUBOPT_0x8
                 ; 0000 0134 	#endif /* READ_SENSOR_7 */
                 ; 0000 0135 	#ifdef READ_SENSOR_8
                 ; 0000 0136 		line_data[7] = READ_SENSOR_8;
                +
0001eb e0a7     +LDI R26 , LOW ( _line_data + ( 7 ) )
0001ec e0b3     +LDI R27 , HIGH ( _line_data + ( 7 ) )
                 	__POINTW2MN _line_data,7
0001ed b1e6      	IN   R30,0x6
0001ee 70e1      	ANDI R30,LOW(0x1)
0001ef 940e 0408 	CALL SUBOPT_0x8
                 ; 0000 0137 	#endif /* READ_SENSOR_8 */
                 ; 0000 0138 	#ifdef READ_SENSOR_9
                 ; 0000 0139 		line_data[8] = READ_SENSOR_9;
                 ; 0000 013A 	#endif /* READ_SENSOR_9 */
                 ; 0000 013B 	#ifdef READ_SENSOR_10
                 ; 0000 013C 		line_data[9] = READ_SENSOR_10;
                 ; 0000 013D 	#endif /* READ_SENSOR_10 */
                 ; 0000 013E 	#ifdef READ_SENSOR_11
                 ; 0000 013F 		line_data[10] = READ_SENSOR_11;
                 ; 0000 0140 	#endif /* READ_SENSOR_11 */
                 ; 0000 0141 	#ifdef READ_SENSOR_12
                 ; 0000 0142 		line_data[11] = READ_SENSOR_12;
                 ; 0000 0143 	#endif /* READ_SENSOR_12 */
                 ; 0000 0144 	#ifdef READ_SENSOR_13
                 ; 0000 0145 		line_data[12] = READ_SENSOR_13;
                 ; 0000 0146 	#endif /* READ_SENSOR_13 */
                 ; 0000 0147 	#ifdef READ_SENSOR_14
                 ; 0000 0148 		line_data[13] = READ_SENSOR_14;
                 ; 0000 0149 	#endif /* READ_SENSOR_14 */
                 ; 0000 014A 	#ifdef READ_SENSOR_15
                 ; 0000 014B 		line_data[14] = READ_SENSOR_15;
                 ; 0000 014C 	#endif /* READ_SENSOR_15 */
                 ; 0000 014D 	#ifdef READ_SENSOR_16
                 ; 0000 014E 		line_data[15] = READ_SENSOR_16;
                 ; 0000 014F 	#endif /* READ_SENSOR_16 */
                 ; 0000 0150 }
0001f1 9508      	RET
                 ;
                 ;float CurrentRobotError (void) {
                 ; 0000 0152 float CurrentRobotError (void) {
                 _CurrentRobotError:
                 ; 0000 0153 	register uint8_t i = 0;
                 ; 0000 0154 	register float current_error = 0.0;
                 ; 0000 0155 
                 ; 0000 0156 	ReadSensorLineData ();
0001f2 9724      	SBIW R28,4
0001f3 e0e0      	LDI  R30,LOW(0)
0001f4 83e8      	ST   Y,R30
0001f5 83e9      	STD  Y+1,R30
0001f6 83ea      	STD  Y+2,R30
0001f7 83eb      	STD  Y+3,R30
0001f8 931a      	ST   -Y,R17
                 ;	i -> R17
                 ;	current_error -> Y+1
0001f9 e010      	LDI  R17,0
0001fa dfc6      	RCALL _ReadSensorLineData
                 ; 0000 0157 
                 ; 0000 0158 	for (i = 0; i < QTY_OF_SENSORS; i++) {
0001fb e010      	LDI  R17,LOW(0)
                 _0x15:
0001fc 3018      	CPI  R17,8
0001fd f538      	BRSH _0x16
                 ; 0000 0159 	    if (line_data[i] == 0) {
0001fe 2fe1      	MOV  R30,R17
0001ff e0f0      	LDI  R31,0
000200 50e0      	SUBI R30,LOW(-_line_data)
000201 4ffd      	SBCI R31,HIGH(-_line_data)
000202 81e0      	LD   R30,Z
000203 30e0      	CPI  R30,0
000204 f4f1      	BRNE _0x17
                 ; 0000 015A             // If the data on the [i]th sensor is zero,
                 ; 0000 015B             // then the sensor is located above the black line
                 ; 0000 015C             // Odd degree to preserve the sign '-'
                 ; 0000 015D             current_error += pow (QTY_OF_SENSORS / 2 - 0.5 - i, 3);
000205 2fe1      	MOV  R30,R17
000206 27ff      	CLR  R31
000207 2766      	CLR  R22
000208 2777      	CLR  R23
000209 940e 04d9 	CALL __CDF1
                +
00020b e0a0     +LDI R26 , LOW ( 0x40600000 )
00020c e0b0     +LDI R27 , HIGH ( 0x40600000 )
00020d e680     +LDI R24 , BYTE3 ( 0x40600000 )
00020e e490     +LDI R25 , BYTE4 ( 0x40600000 )
                 	__GETD2N 0x40600000
00020f 940e 040e 	CALL SUBOPT_0x9
000211 940e 0648 	CALL __PUTPARD1
                +
000213 e0a0     +LDI R26 , LOW ( 0x40400000 )
000214 e0b0     +LDI R27 , HIGH ( 0x40400000 )
000215 e480     +LDI R24 , BYTE3 ( 0x40400000 )
000216 e490     +LDI R25 , BYTE4 ( 0x40400000 )
                 	__GETD2N 0x40400000
000217 940e 038e 	CALL _pow
                +
000219 81a9     +LDD R26 , Y + 1
00021a 81ba     +LDD R27 , Y + 1 + 1
00021b 818b     +LDD R24 , Y + 1 + 2
00021c 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
00021d 940e 0513 	CALL __ADDF12
                +
00021f 83e9     +STD Y + 1 , R30
000220 83fa     +STD Y + 1 + 1 , R31
000221 836b     +STD Y + 1 + 2 , R22
000222 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 015E         }
                 ; 0000 015F 	}
                 _0x17:
000223 5f1f      	SUBI R17,-1
000224 cfd7      	RJMP _0x15
                 _0x16:
                 ; 0000 0160 
                 ; 0000 0161 	return current_error;
                +
000225 81e9     +LDD R30 , Y + 1
000226 81fa     +LDD R31 , Y + 1 + 1
000227 816b     +LDD R22 , Y + 1 + 2
000228 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000229 8118      	LDD  R17,Y+0
00022a 9625      	ADIW R28,5
00022b 9508      	RET
                 ; 0000 0162 }
                 
                 	.CSEG
                 _ftrunc:
00022c 940e 064d 	CALL __PUTPARD2
00022e 817b         ldd  r23,y+3
00022f 816a         ldd  r22,y+2
000230 81f9         ldd  r31,y+1
000231 81e8         ld   r30,y
000232 fb77         bst  r23,7
000233 0f77         lsl  r23
000234 fd67         sbrc r22,7
000235 6071         sbr  r23,1
000236 2f97         mov  r25,r23
000237 579e         subi r25,0x7e
000238 f081         breq __ftrunc0
000239 f078         brcs __ftrunc0
00023a 3198         cpi  r25,24
00023b f490         brsh __ftrunc1
00023c 27aa         clr  r26
00023d 27bb         clr  r27
00023e 2788         clr  r24
                 __ftrunc2:
00023f 9408         sec
000240 9587         ror  r24
000241 95b7         ror  r27
000242 95a7         ror  r26
000243 959a         dec  r25
000244 f7d1         brne __ftrunc2
000245 23ea         and  r30,r26
000246 23fb         and  r31,r27
000247 2368         and  r22,r24
000248 c005         rjmp __ftrunc1
                 __ftrunc0:
000249 94e8         clt
00024a 2777         clr  r23
00024b 27ee         clr  r30
00024c 27ff         clr  r31
00024d 2766         clr  r22
                 __ftrunc1:
00024e 776f         cbr  r22,0x80
00024f 9576         lsr  r23
000250 f408         brcc __ftrunc3
000251 6860         sbr  r22,0x80
                 __ftrunc3:
000252 f977         bld  r23,7
000253 91a9         ld   r26,y+
000254 91b9         ld   r27,y+
000255 9189         ld   r24,y+
000256 9199         ld   r25,y+
000257 17ea         cp   r30,r26
000258 07fb         cpc  r31,r27
000259 0768         cpc  r22,r24
00025a 0779         cpc  r23,r25
00025b fb97         bst  r25,7
00025c 9508         ret
                 _floor:
00025d 940e 064d 	CALL __PUTPARD2
00025f 940e 063e 	CALL __GETD2S0
000261 940e 022c 	CALL _ftrunc
000263 940e 0643 	CALL __PUTD1S0
000265 f419          brne __floor1
                 __floor0:
000266 940e 0413 	CALL SUBOPT_0xA
000268 c007      	RJMP _0x2080004
                 __floor1:
000269 f7e6          brtc __floor0
00026a 940e 0413 	CALL SUBOPT_0xA
00026c 940e 0403 	CALL SUBOPT_0x7
00026e 940e 050c 	CALL __SUBF12
                 _0x2080004:
000270 9624      	ADIW R28,4
000271 9508      	RET
                 _log:
000272 940e 064d 	CALL __PUTPARD2
000274 9724      	SBIW R28,4
000275 931a      	ST   -Y,R17
000276 930a      	ST   -Y,R16
000277 940e 0416 	CALL SUBOPT_0xB
000279 940e 0663 	CALL __CPD02
00027b f02c      	BRLT _0x200000C
                +
00027c efef     +LDI R30 , LOW ( 0xFF7FFFFF )
00027d efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
00027e e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
00027f ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000280 c071      	RJMP _0x2080003
                 _0x200000C:
000281 940e 041b 	CALL SUBOPT_0xC
000283 940e 0648 	CALL __PUTPARD1
000285 b7ad      	IN   R26,SPL
000286 b7be      	IN   R27,SPH
000287 9711      	SBIW R26,1
000288 931f      	PUSH R17
000289 930f      	PUSH R16
00028a 940e 0450 	CALL _frexp
00028c 910f      	POP  R16
00028d 911f      	POP  R17
00028e 940e 0420 	CALL SUBOPT_0xD
000290 940e 0416 	CALL SUBOPT_0xB
                +
000292 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000293 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000294 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000295 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000296 940e 05f6 	CALL __CMPF12
000298 f440      	BRSH _0x200000D
000299 940e 0425 	CALL SUBOPT_0xE
00029b 940e 0513 	CALL __ADDF12
00029d 940e 0420 	CALL SUBOPT_0xD
                +
00029f 5001     +SUBI R16 , LOW ( 1 )
0002a0 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x200000D:
0002a1 940e 041b 	CALL SUBOPT_0xC
0002a3 940e 0403 	CALL SUBOPT_0x7
0002a5 940e 050c 	CALL __SUBF12
0002a7 937f      	PUSH R23
0002a8 936f      	PUSH R22
0002a9 93ff      	PUSH R31
0002aa 93ef      	PUSH R30
0002ab 940e 041b 	CALL SUBOPT_0xC
0002ad 940e 0403 	CALL SUBOPT_0x7
0002af 940e 0513 	CALL __ADDF12
0002b1 91af      	POP  R26
0002b2 91bf      	POP  R27
0002b3 918f      	POP  R24
0002b4 919f      	POP  R25
0002b5 940e 05b1 	CALL __DIVF21
0002b7 940e 0420 	CALL SUBOPT_0xD
0002b9 940e 0425 	CALL SUBOPT_0xE
0002bb 940e 0427 	CALL SUBOPT_0xF
                +
0002bd e2a6     +LDI R26 , LOW ( 0x3F654226 )
0002be e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0002bf e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0002c0 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0002c1 940e 042e 	CALL SUBOPT_0x10
                +
0002c3 e4ee     +LDI R30 , LOW ( 0x4054114E )
0002c4 e1f1     +LDI R31 , HIGH ( 0x4054114E )
0002c5 e564     +LDI R22 , BYTE3 ( 0x4054114E )
0002c6 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0002c7 940e 040e 	CALL SUBOPT_0x9
0002c9 940e 0416 	CALL SUBOPT_0xB
0002cb 940e 0563 	CALL __MULF12
0002cd 937f      	PUSH R23
0002ce 936f      	PUSH R22
0002cf 93ff      	PUSH R31
0002d0 93ef      	PUSH R30
0002d1 940e 0433 	CALL SUBOPT_0x11
                +
0002d3 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0002d4 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
0002d5 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
0002d6 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
0002d7 940e 050c 	CALL __SUBF12
0002d9 91af      	POP  R26
0002da 91bf      	POP  R27
0002db 918f      	POP  R24
0002dc 919f      	POP  R25
0002dd 940e 05b1 	CALL __DIVF21
0002df 937f      	PUSH R23
0002e0 936f      	PUSH R22
0002e1 93ff      	PUSH R31
0002e2 93ef      	PUSH R30
0002e3 01f8      	MOVW R30,R16
0002e4 940e 03fe 	CALL SUBOPT_0x6
                +
0002e6 e1a8     +LDI R26 , LOW ( 0x3F317218 )
0002e7 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
0002e8 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
0002e9 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
0002ea 940e 0563 	CALL __MULF12
0002ec 91af      	POP  R26
0002ed 91bf      	POP  R27
0002ee 918f      	POP  R24
0002ef 919f      	POP  R25
0002f0 940e 0513 	CALL __ADDF12
                 _0x2080003:
0002f2 8119      	LDD  R17,Y+1
0002f3 8108      	LDD  R16,Y+0
0002f4 962a      	ADIW R28,10
0002f5 9508      	RET
                 _exp:
0002f6 940e 064d 	CALL __PUTPARD2
0002f8 9728      	SBIW R28,8
0002f9 931a      	ST   -Y,R17
0002fa 930a      	ST   -Y,R16
0002fb 940e 0438 	CALL SUBOPT_0x12
                +
0002fd e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
0002fe eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
0002ff ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
000300 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
000301 940e 05f6 	CALL __CMPF12
000303 f418      	BRSH _0x200000F
000304 940e 03ea 	CALL SUBOPT_0x2
000306 c083      	RJMP _0x2080002
                 _0x200000F:
                +
000307 85ea     +LDD R30 , Y + 10
000308 85fb     +LDD R31 , Y + 10 + 1
000309 856c     +LDD R22 , Y + 10 + 2
00030a 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
00030b 940e 065f 	CALL __CPD10
00030d f419      	BRNE _0x2000010
00030e 940e 03e5 	CALL SUBOPT_0x1
000310 c079      	RJMP _0x2080002
                 _0x2000010:
000311 940e 0438 	CALL SUBOPT_0x12
                +
000313 e1e8     +LDI R30 , LOW ( 0x42B17218 )
000314 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000315 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000316 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000317 940e 05f6 	CALL __CMPF12
000319 f009      	BREQ PC+2
00031a f410      	BRCC PC+3
00031b 940c 0322 	JMP  _0x2000011
                +
00031d efef     +LDI R30 , LOW ( 0x7F7FFFFF )
00031e efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00031f e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
000320 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
000321 c068      	RJMP _0x2080002
                 _0x2000011:
000322 940e 0438 	CALL SUBOPT_0x12
                +
000324 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000325 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000326 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000327 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000328 940e 0563 	CALL __MULF12
                +
00032a 87ea     +STD Y + 10 , R30
00032b 87fb     +STD Y + 10 + 1 , R31
00032c 876c     +STD Y + 10 + 2 , R22
00032d 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00032e 940e 0438 	CALL SUBOPT_0x12
000330 df2c      	RCALL _floor
000331 940e 04a2 	CALL __CFD1
000333 018f      	MOVW R16,R30
000334 01f8      	MOVW R30,R16
000335 940e 0438 	CALL SUBOPT_0x12
000337 940e 03fe 	CALL SUBOPT_0x6
000339 940e 040e 	CALL SUBOPT_0x9
00033b 01df      	MOVW R26,R30
00033c 01cb      	MOVW R24,R22
                +
00033d e0e0     +LDI R30 , LOW ( 0x3F000000 )
00033e e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00033f e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000340 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000341 940e 040e 	CALL SUBOPT_0x9
000343 940e 0420 	CALL SUBOPT_0xD
000345 940e 0425 	CALL SUBOPT_0xE
000347 940e 0427 	CALL SUBOPT_0xF
                +
000349 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
00034a e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
00034b e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
00034c e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
00034d 940e 0563 	CALL __MULF12
                +
00034f eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
000350 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000351 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000352 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000353 940e 0513 	CALL __ADDF12
000355 940e 0416 	CALL SUBOPT_0xB
000357 940e 0563 	CALL __MULF12
000359 940e 0420 	CALL SUBOPT_0xD
00035b 940e 0433 	CALL SUBOPT_0x11
                +
00035d e2a8     +LDI R26 , LOW ( 0x41A68D28 )
00035e e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
00035f ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
000360 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000361 940e 0513 	CALL __ADDF12
                +
000363 83ea     +STD Y + 2 , R30
000364 83fb     +STD Y + 2 + 1 , R31
000365 836c     +STD Y + 2 + 2 , R22
000366 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000367 940e 041b 	CALL SUBOPT_0xC
                +
000369 81aa     +LDD R26 , Y + 2
00036a 81bb     +LDD R27 , Y + 2 + 1
00036b 818c     +LDD R24 , Y + 2 + 2
00036c 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00036d 940e 0513 	CALL __ADDF12
                +
00036f efa3     +LDI R26 , LOW ( 0x3FB504F3 )
000370 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000371 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000372 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000373 940e 0563 	CALL __MULF12
000375 937f      	PUSH R23
000376 936f      	PUSH R22
000377 93ff      	PUSH R31
000378 93ef      	PUSH R30
000379 940e 0416 	CALL SUBOPT_0xB
00037b 940e 0433 	CALL SUBOPT_0x11
00037d 940e 050c 	CALL __SUBF12
00037f 91af      	POP  R26
000380 91bf      	POP  R27
000381 918f      	POP  R24
000382 919f      	POP  R25
000383 940e 05b1 	CALL __DIVF21
000385 940e 0648 	CALL __PUTPARD1
000387 01d8      	MOVW R26,R16
000388 940e 0461 	CALL _ldexp
                 _0x2080002:
00038a 8119      	LDD  R17,Y+1
00038b 8108      	LDD  R16,Y+0
00038c 962e      	ADIW R28,14
00038d 9508      	RET
                 _pow:
00038e 940e 064d 	CALL __PUTPARD2
000390 9724      	SBIW R28,4
000391 940e 03ef 	CALL SUBOPT_0x3
000393 940e 065f 	CALL __CPD10
000395 f419      	BRNE _0x2000012
000396 940e 03ea 	CALL SUBOPT_0x2
000398 c043      	RJMP _0x2080001
                 _0x2000012:
                +
000399 85a8     +LDD R26 , Y + 8
00039a 85b9     +LDD R27 , Y + 8 + 1
00039b 858a     +LDD R24 , Y + 8 + 2
00039c 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00039d 940e 0663 	CALL __CPD02
00039f f484      	BRGE _0x2000013
0003a0 940e 043d 	CALL SUBOPT_0x13
0003a2 940e 065f 	CALL __CPD10
0003a4 f419      	BRNE _0x2000014
0003a5 940e 03e5 	CALL SUBOPT_0x1
0003a7 c034      	RJMP _0x2080001
                 _0x2000014:
                +
0003a8 85a8     +LDD R26 , Y + 8
0003a9 85b9     +LDD R27 , Y + 8 + 1
0003aa 858a     +LDD R24 , Y + 8 + 2
0003ab 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0003ac 940e 0442 	CALL SUBOPT_0x14
0003ae df47      	RCALL _exp
0003af c02c      	RJMP _0x2080001
                 _0x2000013:
0003b0 940e 043d 	CALL SUBOPT_0x13
0003b2 01de      	MOVW R26,R28
0003b3 940e 04a2 	CALL __CFD1
0003b5 940e 0634 	CALL __PUTDP1
0003b7 940e 0413 	CALL SUBOPT_0xA
0003b9 940e 04d9 	CALL __CDF1
0003bb 01df      	MOVW R26,R30
0003bc 01cb      	MOVW R24,R22
0003bd 940e 043d 	CALL SUBOPT_0x13
0003bf 940e 0669 	CALL __CPD12
0003c1 f019      	BREQ _0x2000015
0003c2 940e 03ea 	CALL SUBOPT_0x2
0003c4 c017      	RJMP _0x2080001
                 _0x2000015:
0003c5 940e 03ef 	CALL SUBOPT_0x3
0003c7 940e 046d 	CALL __ANEGF1
0003c9 01df      	MOVW R26,R30
0003ca 01cb      	MOVW R24,R22
0003cb 940e 0442 	CALL SUBOPT_0x14
0003cd df28      	RCALL _exp
                +
0003ce 87e8     +STD Y + 8 , R30
0003cf 87f9     +STD Y + 8 + 1 , R31
0003d0 876a     +STD Y + 8 + 2 , R22
0003d1 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0003d2 81e8      	LD   R30,Y
0003d3 70e1      	ANDI R30,LOW(0x1)
0003d4 f419      	BRNE _0x2000016
0003d5 940e 03ef 	CALL SUBOPT_0x3
0003d7 c004      	RJMP _0x2080001
                 _0x2000016:
0003d8 940e 03ef 	CALL SUBOPT_0x3
0003da 940e 046d 	CALL __ANEGF1
                 _0x2080001:
0003dc 962c      	ADIW R28,12
0003dd 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _line_data:
000300           	.BYTE 0x8
                 __seed_G101:
000308           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0003de 2fe1      	MOV  R30,R17
0003df e0f0      	LDI  R31,0
0003e0 01de      	MOVW R26,R28
0003e1 9654      	ADIW R26,20
0003e2 940e 061e 	CALL __LSLW2
0003e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
                +
0003e5 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0003e6 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0003e7 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0003e8 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0003e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
                +
0003ea e0e0     +LDI R30 , LOW ( 0x0 )
0003eb e0f0     +LDI R31 , HIGH ( 0x0 )
0003ec e060     +LDI R22 , BYTE3 ( 0x0 )
0003ed e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0003ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
                +
0003ef 85e8     +LDD R30 , Y + 8
0003f0 85f9     +LDD R31 , Y + 8 + 1
0003f1 856a     +LDD R22 , Y + 8 + 2
0003f2 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0003f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
                +
0003f4 81ac     +LDD R26 , Y + 4
0003f5 81bd     +LDD R27 , Y + 4 + 1
0003f6 818e     +LDD R24 , Y + 4 + 2
0003f7 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0003f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0003f9 940e 0639 	CALL __GETD1S0
0003fb 940e 04a0 	CALL __CFD1U
0003fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003fe 940e 0629 	CALL __CWD1
000400 940e 04d9 	CALL __CDF1
000402 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
                +
000403 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000404 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000405 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000406 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000407 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x8:
000408 23ee      	TST  R30
000409 e0e1      	LDI  R30,1
00040a f409      	BRBC 0x1,PC+2
00040b e0e0      	LDI  R30,0
00040c 93ec      	ST   X,R30
00040d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00040e 940e 0652 	CALL __SWAPD12
000410 940e 050c 	CALL __SUBF12
000412 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000413 940e 0639 	CALL __GETD1S0
000415 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xB:
                +
000416 81ae     +LDD R26 , Y + 6
000417 81bf     +LDD R27 , Y + 6 + 1
000418 8588     +LDD R24 , Y + 6 + 2
000419 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00041a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
                +
00041b 81ee     +LDD R30 , Y + 6
00041c 81ff     +LDD R31 , Y + 6 + 1
00041d 8568     +LDD R22 , Y + 6 + 2
00041e 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
00041f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
                +
000420 83ee     +STD Y + 6 , R30
000421 83ff     +STD Y + 6 + 1 , R31
000422 8768     +STD Y + 6 + 2 , R22
000423 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000424 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000425 dff5      	RCALL SUBOPT_0xC
000426 cfef      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
000427 940e 0563 	CALL __MULF12
                +
000429 83ea     +STD Y + 2 , R30
00042a 83fb     +STD Y + 2 + 1 , R31
00042b 836c     +STD Y + 2 + 2 , R22
00042c 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00042d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
00042e 940e 0563 	CALL __MULF12
000430 01df      	MOVW R26,R30
000431 01cb      	MOVW R24,R22
000432 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
                +
000433 81ea     +LDD R30 , Y + 2
000434 81fb     +LDD R31 , Y + 2 + 1
000435 816c     +LDD R22 , Y + 2 + 2
000436 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000437 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
                +
000438 85aa     +LDD R26 , Y + 10
000439 85bb     +LDD R27 , Y + 10 + 1
00043a 858c     +LDD R24 , Y + 10 + 2
00043b 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
00043c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
                +
00043d 81ec     +LDD R30 , Y + 4
00043e 81fd     +LDD R31 , Y + 4 + 1
00043f 816e     +LDD R22 , Y + 4 + 2
000440 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000441 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000442 940e 0272 	CALL _log
000444 dfaf      	RCALL SUBOPT_0x4
000445 cfe8      	RJMP SUBOPT_0x10
                 
                 
                 	.CSEG
                 _delay_ms:
000446 9610      	adiw r26,0
000447 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000448 e888     +LDI R24 , LOW ( 0x1388 )
000449 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
00044a 9701     +SBIW R24 , 1
00044b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
00044c 95a8      	wdr
00044d 9711      	sbiw r26,1
00044e f7c9      	brne __delay_ms0
                 __delay_ms1:
00044f 9508      	ret
                 
                 _frexp:
000450 91e9      	LD   R30,Y+
000451 91f9      	LD   R31,Y+
000452 9169      	LD   R22,Y+
000453 9179      	LD   R23,Y+
000454 fb77      	BST  R23,7
000455 0f66      	LSL  R22
000456 1f77      	ROL  R23
000457 2788      	CLR  R24
000458 577e      	SUBI R23,0x7E
000459 0b88      	SBC  R24,R24
00045a 937d      	ST   X+,R23
00045b 938c      	ST   X,R24
00045c e77e      	LDI  R23,0x7E
00045d 9576      	LSR  R23
00045e 9567      	ROR  R22
00045f f06e      	BRTS __ANEGF1
000460 9508      	RET
                 
                 _ldexp:
000461 91e9      	LD   R30,Y+
000462 91f9      	LD   R31,Y+
000463 9169      	LD   R22,Y+
000464 9179      	LD   R23,Y+
000465 fb77      	BST  R23,7
000466 0f66      	LSL  R22
000467 1f77      	ROL  R23
000468 0f7a      	ADD  R23,R26
000469 9576      	LSR  R23
00046a 9567      	ROR  R22
00046b f00e      	BRTS __ANEGF1
00046c 9508      	RET
                 
                 __ANEGF1:
00046d 9730      	SBIW R30,0
00046e 4060      	SBCI R22,0
00046f 4070      	SBCI R23,0
000470 f009      	BREQ __ANEGF10
000471 5870      	SUBI R23,0x80
                 __ANEGF10:
000472 9508      	RET
                 
                 __ROUND_REPACK:
000473 2355      	TST  R21
000474 f442      	BRPL __REPACK
000475 3850      	CPI  R21,0x80
000476 f411      	BRNE __ROUND_REPACK0
000477 ffe0      	SBRS R30,0
000478 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000479 9631      	ADIW R30,1
00047a 1f69      	ADC  R22,R25
00047b 1f79      	ADC  R23,R25
00047c f06b      	BRVS __REPACK1
                 
                 __REPACK:
00047d e850      	LDI  R21,0x80
00047e 2757      	EOR  R21,R23
00047f f411      	BRNE __REPACK0
000480 935f      	PUSH R21
000481 c0cf      	RJMP __ZERORES
                 __REPACK0:
000482 3f5f      	CPI  R21,0xFF
000483 f031      	BREQ __REPACK1
000484 0f66      	LSL  R22
000485 0c00      	LSL  R0
000486 9557      	ROR  R21
000487 9567      	ROR  R22
000488 2f75      	MOV  R23,R21
000489 9508      	RET
                 __REPACK1:
00048a 935f      	PUSH R21
00048b 2000      	TST  R0
00048c f00a      	BRMI __REPACK2
00048d c0cf      	RJMP __MAXRES
                 __REPACK2:
00048e c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00048f e850      	LDI  R21,0x80
000490 2e19      	MOV  R1,R25
000491 2215      	AND  R1,R21
000492 0f88      	LSL  R24
000493 1f99      	ROL  R25
000494 2795      	EOR  R25,R21
000495 0f55      	LSL  R21
000496 9587      	ROR  R24
                 
                 __UNPACK1:
000497 e850      	LDI  R21,0x80
000498 2e07      	MOV  R0,R23
000499 2205      	AND  R0,R21
00049a 0f66      	LSL  R22
00049b 1f77      	ROL  R23
00049c 2775      	EOR  R23,R21
00049d 0f55      	LSL  R21
00049e 9567      	ROR  R22
00049f 9508      	RET
                 
                 __CFD1U:
0004a0 9468      	SET
0004a1 c001      	RJMP __CFD1U0
                 __CFD1:
0004a2 94e8      	CLT
                 __CFD1U0:
0004a3 935f      	PUSH R21
0004a4 dff2      	RCALL __UNPACK1
0004a5 3870      	CPI  R23,0x80
0004a6 f018      	BRLO __CFD10
0004a7 3f7f      	CPI  R23,0xFF
0004a8 f408      	BRCC __CFD10
0004a9 c0a7      	RJMP __ZERORES
                 __CFD10:
0004aa e156      	LDI  R21,22
0004ab 1b57      	SUB  R21,R23
0004ac f4aa      	BRPL __CFD11
0004ad 9551      	NEG  R21
0004ae 3058      	CPI  R21,8
0004af f40e      	BRTC __CFD19
0004b0 3059      	CPI  R21,9
                 __CFD19:
0004b1 f030      	BRLO __CFD17
0004b2 efef      	SER  R30
0004b3 efff      	SER  R31
0004b4 ef6f      	SER  R22
0004b5 e77f      	LDI  R23,0x7F
0004b6 f977      	BLD  R23,7
0004b7 c01a      	RJMP __CFD15
                 __CFD17:
0004b8 2777      	CLR  R23
0004b9 2355      	TST  R21
0004ba f0b9      	BREQ __CFD15
                 __CFD18:
0004bb 0fee      	LSL  R30
0004bc 1fff      	ROL  R31
0004bd 1f66      	ROL  R22
0004be 1f77      	ROL  R23
0004bf 955a      	DEC  R21
0004c0 f7d1      	BRNE __CFD18
0004c1 c010      	RJMP __CFD15
                 __CFD11:
0004c2 2777      	CLR  R23
                 __CFD12:
0004c3 3058      	CPI  R21,8
0004c4 f028      	BRLO __CFD13
0004c5 2fef      	MOV  R30,R31
0004c6 2ff6      	MOV  R31,R22
0004c7 2f67      	MOV  R22,R23
0004c8 5058      	SUBI R21,8
0004c9 cff9      	RJMP __CFD12
                 __CFD13:
0004ca 2355      	TST  R21
0004cb f031      	BREQ __CFD15
                 __CFD14:
0004cc 9576      	LSR  R23
0004cd 9567      	ROR  R22
0004ce 95f7      	ROR  R31
0004cf 95e7      	ROR  R30
0004d0 955a      	DEC  R21
0004d1 f7d1      	BRNE __CFD14
                 __CFD15:
0004d2 2000      	TST  R0
0004d3 f40a      	BRPL __CFD16
0004d4 d141      	RCALL __ANEGD1
                 __CFD16:
0004d5 915f      	POP  R21
0004d6 9508      	RET
                 
                 __CDF1U:
0004d7 9468      	SET
0004d8 c001      	RJMP __CDF1U0
                 __CDF1:
0004d9 94e8      	CLT
                 __CDF1U0:
0004da 9730      	SBIW R30,0
0004db 4060      	SBCI R22,0
0004dc 4070      	SBCI R23,0
0004dd f0b1      	BREQ __CDF10
0004de 2400      	CLR  R0
0004df f026      	BRTS __CDF11
0004e0 2377      	TST  R23
0004e1 f412      	BRPL __CDF11
0004e2 9400      	COM  R0
0004e3 d132      	RCALL __ANEGD1
                 __CDF11:
0004e4 2e17      	MOV  R1,R23
0004e5 e17e      	LDI  R23,30
0004e6 2011      	TST  R1
                 __CDF12:
0004e7 f032      	BRMI __CDF13
0004e8 957a      	DEC  R23
0004e9 0fee      	LSL  R30
0004ea 1fff      	ROL  R31
0004eb 1f66      	ROL  R22
0004ec 1c11      	ROL  R1
0004ed cff9      	RJMP __CDF12
                 __CDF13:
0004ee 2fef      	MOV  R30,R31
0004ef 2ff6      	MOV  R31,R22
0004f0 2d61      	MOV  R22,R1
0004f1 935f      	PUSH R21
0004f2 df8a      	RCALL __REPACK
0004f3 915f      	POP  R21
                 __CDF10:
0004f4 9508      	RET
                 
                 __SWAPACC:
0004f5 934f      	PUSH R20
0004f6 01af      	MOVW R20,R30
0004f7 01fd      	MOVW R30,R26
0004f8 01da      	MOVW R26,R20
0004f9 01ab      	MOVW R20,R22
0004fa 01bc      	MOVW R22,R24
0004fb 01ca      	MOVW R24,R20
0004fc 2d40      	MOV  R20,R0
0004fd 2c01      	MOV  R0,R1
0004fe 2e14      	MOV  R1,R20
0004ff 914f      	POP  R20
000500 9508      	RET
                 
                 __UADD12:
000501 0fea      	ADD  R30,R26
000502 1ffb      	ADC  R31,R27
000503 1f68      	ADC  R22,R24
000504 9508      	RET
                 
                 __NEGMAN1:
000505 95e0      	COM  R30
000506 95f0      	COM  R31
000507 9560      	COM  R22
000508 5fef      	SUBI R30,-1
000509 4fff      	SBCI R31,-1
00050a 4f6f      	SBCI R22,-1
00050b 9508      	RET
                 
                 __SUBF12:
00050c 935f      	PUSH R21
00050d df81      	RCALL __UNPACK
00050e 3890      	CPI  R25,0x80
00050f f171      	BREQ __ADDF129
000510 e850      	LDI  R21,0x80
000511 2615      	EOR  R1,R21
                 
000512 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000513 935f      	PUSH R21
000514 df7a      	RCALL __UNPACK
000515 3890      	CPI  R25,0x80
000516 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000517 3870      	CPI  R23,0x80
000518 f121      	BREQ __ADDF128
                 __ADDF121:
000519 2f57      	MOV  R21,R23
00051a 1b59      	SUB  R21,R25
00051b f12b      	BRVS __ADDF1211
00051c f412      	BRPL __ADDF122
00051d dfd7      	RCALL __SWAPACC
00051e cffa      	RJMP __ADDF121
                 __ADDF122:
00051f 3158      	CPI  R21,24
000520 f018      	BRLO __ADDF123
000521 27aa      	CLR  R26
000522 27bb      	CLR  R27
000523 2788      	CLR  R24
                 __ADDF123:
000524 3058      	CPI  R21,8
000525 f028      	BRLO __ADDF124
000526 2fab      	MOV  R26,R27
000527 2fb8      	MOV  R27,R24
000528 2788      	CLR  R24
000529 5058      	SUBI R21,8
00052a cff9      	RJMP __ADDF123
                 __ADDF124:
00052b 2355      	TST  R21
00052c f029      	BREQ __ADDF126
                 __ADDF125:
00052d 9586      	LSR  R24
00052e 95b7      	ROR  R27
00052f 95a7      	ROR  R26
000530 955a      	DEC  R21
000531 f7d9      	BRNE __ADDF125
                 __ADDF126:
000532 2d50      	MOV  R21,R0
000533 2551      	EOR  R21,R1
000534 f072      	BRMI __ADDF127
000535 dfcb      	RCALL __UADD12
000536 f438      	BRCC __ADDF129
000537 9567      	ROR  R22
000538 95f7      	ROR  R31
000539 95e7      	ROR  R30
00053a 9573      	INC  R23
00053b f413      	BRVC __ADDF129
00053c c020      	RJMP __MAXRES
                 __ADDF128:
00053d dfb7      	RCALL __SWAPACC
                 __ADDF129:
00053e df3e      	RCALL __REPACK
00053f 915f      	POP  R21
000540 9508      	RET
                 __ADDF1211:
000541 f7d8      	BRCC __ADDF128
000542 cffb      	RJMP __ADDF129
                 __ADDF127:
000543 1bea      	SUB  R30,R26
000544 0bfb      	SBC  R31,R27
000545 0b68      	SBC  R22,R24
000546 f051      	BREQ __ZERORES
000547 f410      	BRCC __ADDF1210
000548 9400      	COM  R0
000549 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00054a 2366      	TST  R22
00054b f392      	BRMI __ADDF129
00054c 0fee      	LSL  R30
00054d 1fff      	ROL  R31
00054e 1f66      	ROL  R22
00054f 957a      	DEC  R23
000550 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000551 27ee      	CLR  R30
000552 27ff      	CLR  R31
000553 2766      	CLR  R22
000554 2777      	CLR  R23
000555 915f      	POP  R21
000556 9508      	RET
                 
                 __MINRES:
000557 efef      	SER  R30
000558 efff      	SER  R31
000559 e76f      	LDI  R22,0x7F
00055a ef7f      	SER  R23
00055b 915f      	POP  R21
00055c 9508      	RET
                 
                 __MAXRES:
00055d efef      	SER  R30
00055e efff      	SER  R31
00055f e76f      	LDI  R22,0x7F
000560 e77f      	LDI  R23,0x7F
000561 915f      	POP  R21
000562 9508      	RET
                 
                 __MULF12:
000563 935f      	PUSH R21
000564 df2a      	RCALL __UNPACK
000565 3870      	CPI  R23,0x80
000566 f351      	BREQ __ZERORES
000567 3890      	CPI  R25,0x80
000568 f341      	BREQ __ZERORES
000569 2401      	EOR  R0,R1
00056a 9408      	SEC
00056b 1f79      	ADC  R23,R25
00056c f423      	BRVC __MULF124
00056d f31c      	BRLT __ZERORES
                 __MULF125:
00056e 2000      	TST  R0
00056f f33a      	BRMI __MINRES
000570 cfec      	RJMP __MAXRES
                 __MULF124:
000571 920f      	PUSH R0
000572 931f      	PUSH R17
000573 932f      	PUSH R18
000574 933f      	PUSH R19
000575 934f      	PUSH R20
000576 2711      	CLR  R17
000577 2722      	CLR  R18
000578 2799      	CLR  R25
000579 9f68      	MUL  R22,R24
00057a 01a0      	MOVW R20,R0
00057b 9f8f      	MUL  R24,R31
00057c 2d30      	MOV  R19,R0
00057d 0d41      	ADD  R20,R1
00057e 1f59      	ADC  R21,R25
00057f 9f6b      	MUL  R22,R27
000580 0d30      	ADD  R19,R0
000581 1d41      	ADC  R20,R1
000582 1f59      	ADC  R21,R25
000583 9f8e      	MUL  R24,R30
000584 d027      	RCALL __MULF126
000585 9fbf      	MUL  R27,R31
000586 d025      	RCALL __MULF126
000587 9f6a      	MUL  R22,R26
000588 d023      	RCALL __MULF126
000589 9fbe      	MUL  R27,R30
00058a d01d      	RCALL __MULF127
00058b 9faf      	MUL  R26,R31
00058c d01b      	RCALL __MULF127
00058d 9fae      	MUL  R26,R30
00058e 0d11      	ADD  R17,R1
00058f 1f29      	ADC  R18,R25
000590 1f39      	ADC  R19,R25
000591 1f49      	ADC  R20,R25
000592 1f59      	ADC  R21,R25
000593 2fe3      	MOV  R30,R19
000594 2ff4      	MOV  R31,R20
000595 2f65      	MOV  R22,R21
000596 2f52      	MOV  R21,R18
000597 914f      	POP  R20
000598 913f      	POP  R19
000599 912f      	POP  R18
00059a 911f      	POP  R17
00059b 900f      	POP  R0
00059c 2366      	TST  R22
00059d f02a      	BRMI __MULF122
00059e 0f55      	LSL  R21
00059f 1fee      	ROL  R30
0005a0 1fff      	ROL  R31
0005a1 1f66      	ROL  R22
0005a2 c002      	RJMP __MULF123
                 __MULF122:
0005a3 9573      	INC  R23
0005a4 f24b      	BRVS __MULF125
                 __MULF123:
0005a5 decd      	RCALL __ROUND_REPACK
0005a6 915f      	POP  R21
0005a7 9508      	RET
                 
                 __MULF127:
0005a8 0d10      	ADD  R17,R0
0005a9 1d21      	ADC  R18,R1
0005aa 1f39      	ADC  R19,R25
0005ab c002      	RJMP __MULF128
                 __MULF126:
0005ac 0d20      	ADD  R18,R0
0005ad 1d31      	ADC  R19,R1
                 __MULF128:
0005ae 1f49      	ADC  R20,R25
0005af 1f59      	ADC  R21,R25
0005b0 9508      	RET
                 
                 __DIVF21:
0005b1 935f      	PUSH R21
0005b2 dedc      	RCALL __UNPACK
0005b3 3870      	CPI  R23,0x80
0005b4 f421      	BRNE __DIVF210
0005b5 2011      	TST  R1
                 __DIVF211:
0005b6 f40a      	BRPL __DIVF219
0005b7 cf9f      	RJMP __MINRES
                 __DIVF219:
0005b8 cfa4      	RJMP __MAXRES
                 __DIVF210:
0005b9 3890      	CPI  R25,0x80
0005ba f409      	BRNE __DIVF218
                 __DIVF217:
0005bb cf95      	RJMP __ZERORES
                 __DIVF218:
0005bc 2401      	EOR  R0,R1
0005bd 9408      	SEC
0005be 0b97      	SBC  R25,R23
0005bf f41b      	BRVC __DIVF216
0005c0 f3d4      	BRLT __DIVF217
0005c1 2000      	TST  R0
0005c2 cff3      	RJMP __DIVF211
                 __DIVF216:
0005c3 2f79      	MOV  R23,R25
0005c4 931f      	PUSH R17
0005c5 932f      	PUSH R18
0005c6 933f      	PUSH R19
0005c7 934f      	PUSH R20
0005c8 2411      	CLR  R1
0005c9 2711      	CLR  R17
0005ca 2722      	CLR  R18
0005cb 2733      	CLR  R19
0005cc 2744      	CLR  R20
0005cd 2755      	CLR  R21
0005ce e290      	LDI  R25,32
                 __DIVF212:
0005cf 17ae      	CP   R26,R30
0005d0 07bf      	CPC  R27,R31
0005d1 0786      	CPC  R24,R22
0005d2 0741      	CPC  R20,R17
0005d3 f030      	BRLO __DIVF213
0005d4 1bae      	SUB  R26,R30
0005d5 0bbf      	SBC  R27,R31
0005d6 0b86      	SBC  R24,R22
0005d7 0b41      	SBC  R20,R17
0005d8 9408      	SEC
0005d9 c001      	RJMP __DIVF214
                 __DIVF213:
0005da 9488      	CLC
                 __DIVF214:
0005db 1f55      	ROL  R21
0005dc 1f22      	ROL  R18
0005dd 1f33      	ROL  R19
0005de 1c11      	ROL  R1
0005df 1faa      	ROL  R26
0005e0 1fbb      	ROL  R27
0005e1 1f88      	ROL  R24
0005e2 1f44      	ROL  R20
0005e3 959a      	DEC  R25
0005e4 f751      	BRNE __DIVF212
0005e5 01f9      	MOVW R30,R18
0005e6 2d61      	MOV  R22,R1
0005e7 914f      	POP  R20
0005e8 913f      	POP  R19
0005e9 912f      	POP  R18
0005ea 911f      	POP  R17
0005eb 2366      	TST  R22
0005ec f032      	BRMI __DIVF215
0005ed 0f55      	LSL  R21
0005ee 1fee      	ROL  R30
0005ef 1fff      	ROL  R31
0005f0 1f66      	ROL  R22
0005f1 957a      	DEC  R23
0005f2 f243      	BRVS __DIVF217
                 __DIVF215:
0005f3 de7f      	RCALL __ROUND_REPACK
0005f4 915f      	POP  R21
0005f5 9508      	RET
                 
                 __CMPF12:
0005f6 2399      	TST  R25
0005f7 f09a      	BRMI __CMPF120
0005f8 2377      	TST  R23
0005f9 f042      	BRMI __CMPF121
0005fa 1797      	CP   R25,R23
0005fb f048      	BRLO __CMPF122
0005fc f429      	BRNE __CMPF121
0005fd 17ae      	CP   R26,R30
0005fe 07bf      	CPC  R27,R31
0005ff 0786      	CPC  R24,R22
000600 f020      	BRLO __CMPF122
000601 f031      	BREQ __CMPF123
                 __CMPF121:
000602 9498      	CLZ
000603 9488      	CLC
000604 9508      	RET
                 __CMPF122:
000605 9498      	CLZ
000606 9408      	SEC
000607 9508      	RET
                 __CMPF123:
000608 9418      	SEZ
000609 9488      	CLC
00060a 9508      	RET
                 __CMPF120:
00060b 2377      	TST  R23
00060c f7c2      	BRPL __CMPF122
00060d 1797      	CP   R25,R23
00060e f398      	BRLO __CMPF121
00060f f7a9      	BRNE __CMPF122
000610 17ea      	CP   R30,R26
000611 07fb      	CPC  R31,R27
000612 0768      	CPC  R22,R24
000613 f388      	BRLO __CMPF122
000614 f399      	BREQ __CMPF123
000615 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
000616 95f0      	COM  R31
000617 9560      	COM  R22
000618 9570      	COM  R23
000619 95e1      	NEG  R30
00061a 4fff      	SBCI R31,-1
00061b 4f6f      	SBCI R22,-1
00061c 4f7f      	SBCI R23,-1
00061d 9508      	RET
                 
                 __LSLW2:
00061e 0fee      	LSL  R30
00061f 1fff      	ROL  R31
000620 0fee      	LSL  R30
000621 1fff      	ROL  R31
000622 9508      	RET
                 
                 __CBD1:
000623 2ffe      	MOV  R31,R30
000624 0fff      	ADD  R31,R31
000625 0bff      	SBC  R31,R31
000626 2f6f      	MOV  R22,R31
000627 2f7f      	MOV  R23,R31
000628 9508      	RET
                 
                 __CWD1:
000629 2f6f      	MOV  R22,R31
00062a 0f66      	ADD  R22,R22
00062b 0b66      	SBC  R22,R22
00062c 2f76      	MOV  R23,R22
00062d 9508      	RET
                 
                 __GETD1P:
00062e 91ed      	LD   R30,X+
00062f 91fd      	LD   R31,X+
000630 916d      	LD   R22,X+
000631 917c      	LD   R23,X
000632 9713      	SBIW R26,3
000633 9508      	RET
                 
                 __PUTDP1:
000634 93ed      	ST   X+,R30
000635 93fd      	ST   X+,R31
000636 936d      	ST   X+,R22
000637 937c      	ST   X,R23
000638 9508      	RET
                 
                 __GETD1S0:
000639 81e8      	LD   R30,Y
00063a 81f9      	LDD  R31,Y+1
00063b 816a      	LDD  R22,Y+2
00063c 817b      	LDD  R23,Y+3
00063d 9508      	RET
                 
                 __GETD2S0:
00063e 81a8      	LD   R26,Y
00063f 81b9      	LDD  R27,Y+1
000640 818a      	LDD  R24,Y+2
000641 819b      	LDD  R25,Y+3
000642 9508      	RET
                 
                 __PUTD1S0:
000643 83e8      	ST   Y,R30
000644 83f9      	STD  Y+1,R31
000645 836a      	STD  Y+2,R22
000646 837b      	STD  Y+3,R23
000647 9508      	RET
                 
                 __PUTPARD1:
000648 937a      	ST   -Y,R23
000649 936a      	ST   -Y,R22
00064a 93fa      	ST   -Y,R31
00064b 93ea      	ST   -Y,R30
00064c 9508      	RET
                 
                 __PUTPARD2:
00064d 939a      	ST   -Y,R25
00064e 938a      	ST   -Y,R24
00064f 93ba      	ST   -Y,R27
000650 93aa      	ST   -Y,R26
000651 9508      	RET
                 
                 __SWAPD12:
000652 2e18      	MOV  R1,R24
000653 2f86      	MOV  R24,R22
000654 2d61      	MOV  R22,R1
000655 2e19      	MOV  R1,R25
000656 2f97      	MOV  R25,R23
000657 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000658 2e1b      	MOV  R1,R27
000659 2fbf      	MOV  R27,R31
00065a 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00065b 2e1a      	MOV  R1,R26
00065c 2fae      	MOV  R26,R30
00065d 2de1      	MOV  R30,R1
00065e 9508      	RET
                 
                 __CPD10:
00065f 9730      	SBIW R30,0
000660 4060      	SBCI R22,0
000661 4070      	SBCI R23,0
000662 9508      	RET
                 
                 __CPD02:
000663 2400      	CLR  R0
000664 160a      	CP   R0,R26
000665 060b      	CPC  R0,R27
000666 0608      	CPC  R0,R24
000667 0609      	CPC  R0,R25
000668 9508      	RET
                 
                 __CPD12:
000669 17ea      	CP   R30,R26
00066a 07fb      	CPC  R31,R27
00066b 0768      	CPC  R22,R24
00066c 0779      	CPC  R23,R25
00066d 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00066e 0fac      	ADD  R26,R28
00066f 1fbd      	ADC  R27,R29
                 __INITLOC0:
000670 9005      	LPM  R0,Z+
000671 920d      	ST   X+,R0
000672 958a      	DEC  R24
000673 f7e1      	BRNE __INITLOC0
000674 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  35 r1 :  30 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  11 r17:  34 r18:  18 r19:  17 r20:  28 r21:  68 r22: 110 r23: 108 
r24:  76 r25:  72 r26:  95 r27:  74 r28:  15 r29:   2 r30: 234 r31: 101 
x  :  16 y  : 175 z  :   9 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  13 
adiw  :   9 and   :   5 andi  :  16 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   1 brbs  :   0 brcc  :   6 brcs  :   1 break :   0 breq  :  19 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   5 brmi  :   9 brne  :  23 brpl  :   9 brsh  :   6 brtc  :   2 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 152 
cbi   :   1 cbr   :   2 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  34 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :   8 cpc   :  18 cpi   :  23 cpse  :   0 dec   :  10 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  17 inc   :   2 jmp   :  28 ld    :  21 ldd   :  90 ldi   : 176 
lds   :   9 lpm   :   8 lsl   :  16 lsr   :   5 mov   :  46 movw  :  32 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   8 out   :  18 pop   :  36 push  :  36 rcall :  28 ret   :  64 
reti  :   0 rjmp  :  46 rol   :  28 ror   :  17 sbc   :  10 sbci  :  14 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :  15 sbr   :   2 sbrc  :   1 
sbrs  :   1 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  27 std   :  54 sts   :  28 sub   :   5 subi  :  13 swap  :   0 
tst   :  20 wdr   :   2 
Instructions used: 77 out of 116 (66.4%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000cea   3226     80   3306   32768  10.1%
[.dseg] 0x000100 0x00030c      0     12     12    2303   0.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
