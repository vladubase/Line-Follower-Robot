
AVRASM ver. 2.1.30  D:\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm Wed Jul 08 08:43:04 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 20,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x3:
000034 0000
000035 0000
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000038 0000
000039 0000
00003a 0000
00003b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003c 0000
00003d 0000
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000040 0000
000041 0000
000042 0000
000043 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000044 0000
000045 0000
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000048 0000
000049 0000
00004a 0000
00004b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004c 0000
00004d 0000
00004e 0000
00004f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x2020060:
D:\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm(1136): warning: .cseg .db misalignment - padding zero byte
000052 0001      	.DB  0x1
                 _0x2020000:
000053 4e2d
000054 4e41
000055 4900
000056 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm(1139): warning: .cseg .db misalignment - padding zero byte
000057 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000058 0001      	.DW  0x01
000059 0310      	.DW  __seed_G101
00005a 00a4      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00005b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005c 94f8      	CLI
00005d 27ee      	CLR  R30
00005e bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005f e0f1      	LDI  R31,1
000060 bff5      	OUT  MCUCR,R31
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000062 e1f8      	LDI  R31,0x18
000063 95a8      	WDR
000064 b7a4      	IN   R26,MCUSR
000065 7fa7      	CBR  R26,8
000066 bfa4      	OUT  MCUSR,R26
000067 93f0 0060 	STS  WDTCSR,R31
000069 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
00006b e08d      	LDI  R24,(14-2)+1
00006c e0a2      	LDI  R26,2
00006d 27bb      	CLR  R27
                 __CLEAR_REG:
00006e 93ed      	ST   X+,R30
00006f 958a      	DEC  R24
000070 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000071 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000072 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000073 e0a0      	LDI  R26,LOW(__SRAM_START)
000074 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000075 93ed      	ST   X+,R30
000076 9701      	SBIW R24,1
000077 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000078 ebe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000079 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007a 9185      	LPM  R24,Z+
00007b 9195      	LPM  R25,Z+
00007c 9700      	SBIW R24,0
00007d f061      	BREQ __GLOBAL_INI_END
00007e 91a5      	LPM  R26,Z+
00007f 91b5      	LPM  R27,Z+
000080 9005      	LPM  R0,Z+
000081 9015      	LPM  R1,Z+
000082 01bf      	MOVW R22,R30
000083 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000084 9005      	LPM  R0,Z+
000085 920d      	ST   X+,R0
000086 9701      	SBIW R24,1
000087 f7e1      	BRNE __GLOBAL_INI_LOOP
000088 01fb      	MOVW R30,R22
000089 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00008a e0e0      	LDI  R30,__GPIOR0_INIT
00008b bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008d bfed      	OUT  SPL,R30
00008e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000090 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000091 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000092 940c 0094 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*
                 ;*	Line Follower Robot
                 ;*	LineFollowerRobot.c
                 ;*
                 ;*	by Uladzislau 'vladubase' Dubatouka <vladubase@gmail.com>.
                 ;*	Created on 2020.05.12.
                 ;*
                 ;*   4.25 ms for main cycle (not counting MAIN_CYCLE_DELAY) with 4 sensors
                 ;*   6 ms for main cycle (not counting MAIN_CYCLE_DELAY) with 15 sensors
                 ;*
                 ;*/
                 ;
                 ;/**************************** Includes ****************************/
                 ;
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <mega328p_bits.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <stdbool.h>
                 ;#include <stdint.h>
                 ;
                 ;/***************************** Defines ****************************/
                 ;
                 ;#define		F_CPU					20000000UL		// Quartz resonator clock frequency
                 ;
                 ;#define		QTY_OF_SENSORS			16				// Quantity of sensors
                 ;#define		AVG_SPEED				155				// Average speed of robot
                 ;
                 ;#define		MOTORS_NOT_PERFECT		false			// Do the motors have different real parameters (e.g. Speed, Torque, etc.)?
                 ;#if MOTORS_NOT_PERFECT
                 ;	#define	L_MOTOR_MISMATCH		1.05F			// Coefficient of motor power difference
                 ;	#define	R_MOTOR_MISMATCH		1.0F			// There is nothing perfect ;)
                 ;#endif /* MOTORS_NOT_PERFECT */
                 ;
                 ;// PID
                 ;// Setup: P -> PD -> PID
                 ;#define		kP						10.0F			// Proportional	feedback coefficient
                 ;#define		kI						0.0F			// Integral 	feedback coefficient
                 ;#define		kD						0.0F			// Differential	feedback coefficient
                 ;#define		QTY_OF_ERR				10				// Quantity of errors in memory during last (QTY_OF_ERR * MAIN_CYCLE_DELAY) ms
                 ;#define		MAIN_CYCLE_DELAY		2				// The main cycle delay (in ms) for correct work of D-regulation
                 ;
                 ;// Sensor order in the right --> direction
                 ;
                 ;#if QTY_OF_SENSORS >= 1
                 ;    #define	READ_SENSOR_1			PINB & (1 << DDB5)
                 ;#endif /* QTY_OF_SENSORS >= 1 */
                 ;#if QTY_OF_SENSORS >= 2
                 ;    #define	READ_SENSOR_2			PINB & (1 << DDB4)
                 ;#endif /* QTY_OF_SENSORS >= 2 */
                 ;#if QTY_OF_SENSORS >= 3
                 ;    #define	READ_SENSOR_3			PINB & (1 << DDB2)
                 ;#endif /* QTY_OF_SENSORS >= 3 */
                 ;#if QTY_OF_SENSORS >= 4
                 ;    #define	READ_SENSOR_4			PINB & (1 << DDD1)
                 ;#endif /* QTY_OF_SENSORS >= 4 */
                 ;#if QTY_OF_SENSORS >= 5
                 ;    #define	READ_SENSOR_5			PINB & (1 << DDB0)
                 ;#endif /* QTY_OF_SENSORS >= 5 */
                 ;#if QTY_OF_SENSORS >= 6
                 ;    #define	READ_SENSOR_6			PIND & (1 << DDB7)
                 ;#endif /* QTY_OF_SENSORS >= 6 */
                 ;#if QTY_OF_SENSORS >= 7
                 ;    #define	READ_SENSOR_7			PINC & (1 << DDC0)
                 ;#endif /* QTY_OF_SENSORS >= 7 */
                 ;#if QTY_OF_SENSORS >= 8
                 ;    #define	READ_SENSOR_8			PINC & (1 << DDC1)
                 ;#endif /* QTY_OF_SENSORS >= 8 */
                 ;#if QTY_OF_SENSORS >= 9
                 ;    #define	READ_SENSOR_9			PINC & (1 << DDC2)
                 ;#endif /* QTY_OF_SENSORS >= 9 */
                 ;#if QTY_OF_SENSORS >= 10
                 ;    #define	READ_SENSOR_10			PINC & (1 << DDC3)
                 ;#endif /* QTY_OF_SENSORS >= 10 */
                 ;#if QTY_OF_SENSORS >= 11
                 ;    #define	READ_SENSOR_11			PINC & (1 << DDC4)
                 ;#endif /* QTY_OF_SENSORS >= 11 */
                 ;#if QTY_OF_SENSORS >= 12
                 ;    #define	READ_SENSOR_12			PINC & (1 << DDC5)
                 ;#endif /* QTY_OF_SENSORS >= 12 */
                 ;#if QTY_OF_SENSORS >= 13
                 ;    #define	READ_SENSOR_13			PIND & (1 << DDD4)
                 ;#endif /* QTY_OF_SENSORS >= 13 */
                 ;#if QTY_OF_SENSORS >= 14
                 ;    #define	READ_SENSOR_14			PIND & (1 << DDD2)
                 ;#endif /* QTY_OF_SENSORS >= 14 */
                 ;#if QTY_OF_SENSORS >= 15
                 ;    #define	READ_SENSOR_15			PIND & (1 << DDD1)
                 ;#endif /* QTY_OF_SENSORS >= 15 */
                 ;#if QTY_OF_SENSORS >= 16
                 ;    #define	READ_SENSOR_16			PIND & (1 << DDD0)
                 ;#endif /* QTY_OF_SENSORS >= 16 */
                 ;
                 ;//#define		READ_IR_SENSOR          PINx & (1 << DDxx)
                 ;
                 ;/************************* Global Variables ***********************/
                 ;
                 ;bool line_data[QTY_OF_SENSORS] = {0};				// Store current values from sensor line
                 ;
                 ;/*********************** Function  prototypes *********************/
                 ;
                 ;void InitSys (void);
                 ;void ReadSensorLineData (void);
                 ;float CurrentRobotError (void);
                 ;
                 ;/****************************** Main ******************************/
                 ;
                 ;void main (void) {
                 ; 0000 006C void main (void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 006D 	register float error_history[QTY_OF_ERR] = {0};	// Storing the values of recent errors
                 ; 0000 006E 	register float error_sum = 0.0;					// Sum of errors in history
                 ; 0000 006F 	register uint8_t i = 0;
                 ; 0000 0070 	register float P = 0.0;
                 ; 0000 0071 	register float I = 0.0;
                 ; 0000 0072 	register float D = 0.0;
                 ; 0000 0073 	register float PID_total_correction = 0.0;
                 ; 0000 0074 	register int16_t left_motor_speed = 0;
                 ; 0000 0075 	register int16_t right_motor_speed = 0;
                 ; 0000 0076 
                 ; 0000 0077 	InitSys ();
000094 97ec      	SBIW R28,60
000095 e38c      	LDI  R24,60
000096 e0a0      	LDI  R26,LOW(0)
000097 e0b0      	LDI  R27,HIGH(0)
000098 e6e8      	LDI  R30,LOW(_0x3*2)
000099 e0f0      	LDI  R31,HIGH(_0x3*2)
00009a 940e 0699 	CALL __INITLOCB
                 ;	error_history -> Y+20
                 ;	error_sum -> Y+16
                 ;	i -> R17
                 ;	P -> Y+12
                 ;	I -> Y+8
                 ;	D -> Y+4
                 ;	PID_total_correction -> Y+0
                 ;	left_motor_speed -> R18,R19
                 ;	right_motor_speed -> R20,R21
00009c e010      	LDI  R17,0
                +
00009d e020     +LDI R18 , LOW ( 0 )
00009e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00009f e040     +LDI R20 , LOW ( 0 )
0000a0 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0000a1 d0a2      	RCALL _InitSys
                 ; 0000 0078 
                 ; 0000 0079 	// Waiting for a signal on IR sensor
                 ; 0000 007A 	#ifdef READ_IR_SENSOR
                 ; 0000 007B 		while (READ_IR_SENSOR) {
                 ; 0000 007C 			LED_1_ON;
                 ; 0000 007D 			delay_ms (25);
                 ; 0000 007E 			LED_1_OFF;
                 ; 0000 007F 			delay_ms (25);
                 ; 0000 0080 		}
                 ; 0000 0081 	#endif /* SensorIR */
                 ; 0000 0082 
                 ; 0000 0083 	//delay_ms (5000);								// This delay is required by the competition rules
                 ; 0000 0084 
                 ; 0000 0085 	while (true) {
                 _0x4:
                 ; 0000 0086 		error_sum = 0.0;
0000a2 e0e0      	LDI  R30,LOW(0)
                +
0000a3 8be8     +STD Y + 16 , R30
0000a4 8be9     +STD Y + 16 + 1 , R30
0000a5 8bea     +STD Y + 16 + 2 , R30
0000a6 8beb     +STD Y + 16 + 3 , R30
                 	__CLRD1S 16
                 ; 0000 0087 
                 ; 0000 0088 		for (i = 0; i < QTY_OF_ERR - 1; i++) {	    // Shift error values
0000a7 e010      	LDI  R17,LOW(0)
                 _0x8:
0000a8 3019      	CPI  R17,9
0000a9 f4a8      	BRSH _0x9
                 ; 0000 0089 			error_history[i] = error_history[i + 1];
0000aa 940e 040b 	CALL SUBOPT_0x0
0000ac 0fea      	ADD  R30,R26
0000ad 1ffb      	ADC  R31,R27
0000ae 010f      	MOVW R0,R30
0000af 2fe1      	MOV  R30,R17
0000b0 e0f0      	LDI  R31,0
0000b1 9631      	ADIW R30,1
0000b2 01de      	MOVW R26,R28
0000b3 9654      	ADIW R26,20
0000b4 940e 064f 	CALL __LSLW2
0000b6 0fae      	ADD  R26,R30
0000b7 1fbf      	ADC  R27,R31
0000b8 940e 0659 	CALL __GETD1P
0000ba 01d0      	MOVW R26,R0
0000bb 940e 065f 	CALL __PUTDP1
                 ; 0000 008A 		}
0000bd 5f1f      	SUBI R17,-1
0000be cfe9      	RJMP _0x8
                 _0x9:
                 ; 0000 008B 		error_history[QTY_OF_ERR - 1] = CurrentRobotError ();
0000bf d15f      	RCALL _CurrentRobotError
                +
0000c0 afe8     +STD Y + 56 , R30
0000c1 aff9     +STD Y + 56 + 1 , R31
0000c2 af6a     +STD Y + 56 + 2 , R22
0000c3 af7b     +STD Y + 56 + 3 , R23
                 	__PUTD1S 56
                 ; 0000 008C 
                 ; 0000 008D 		P = error_history[QTY_OF_ERR - 1] * kP;		// Current error * kP
                +
0000c4 ada8     +LDD R26 , Y + 56
0000c5 adb9     +LDD R27 , Y + 56 + 1
0000c6 ad8a     +LDD R24 , Y + 56 + 2
0000c7 ad9b     +LDD R25 , Y + 56 + 3
                 	__GETD2S 56
                +
0000c8 e0e0     +LDI R30 , LOW ( 0x41200000 )
0000c9 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0000ca e260     +LDI R22 , BYTE3 ( 0x41200000 )
0000cb e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0000cc 940e 0594 	CALL __MULF12
                +
0000ce 87ec     +STD Y + 12 , R30
0000cf 87fd     +STD Y + 12 + 1 , R31
0000d0 876e     +STD Y + 12 + 2 , R22
0000d1 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ; 0000 008E 		for (i = 0; i < QTY_OF_ERR; i++) {
0000d2 e010      	LDI  R17,LOW(0)
                 _0xB:
0000d3 301a      	CPI  R17,10
0000d4 f490      	BRSH _0xC
                 ; 0000 008F 			error_sum += error_history[i];
0000d5 940e 040b 	CALL SUBOPT_0x0
0000d7 0fae      	ADD  R26,R30
0000d8 1fbf      	ADC  R27,R31
0000d9 940e 0659 	CALL __GETD1P
                +
0000db 89a8     +LDD R26 , Y + 16
0000dc 89b9     +LDD R27 , Y + 16 + 1
0000dd 898a     +LDD R24 , Y + 16 + 2
0000de 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0000df 940e 0544 	CALL __ADDF12
                +
0000e1 8be8     +STD Y + 16 , R30
0000e2 8bf9     +STD Y + 16 + 1 , R31
0000e3 8b6a     +STD Y + 16 + 2 , R22
0000e4 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
                 ; 0000 0090 		}
0000e5 5f1f      	SUBI R17,-1
0000e6 cfec      	RJMP _0xB
                 _0xC:
                 ; 0000 0091 		I = error_sum / QTY_OF_ERR * kI;			// Average error * kI
                +
0000e7 89a8     +LDD R26 , Y + 16
0000e8 89b9     +LDD R27 , Y + 16 + 1
0000e9 898a     +LDD R24 , Y + 16 + 2
0000ea 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0000eb e0e0     +LDI R30 , LOW ( 0x41200000 )
0000ec e0f0     +LDI R31 , HIGH ( 0x41200000 )
0000ed e260     +LDI R22 , BYTE3 ( 0x41200000 )
0000ee e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0000ef 940e 05e2 	CALL __DIVF21
0000f1 940e 0412 	CALL SUBOPT_0x1
                +
0000f3 87e8     +STD Y + 8 , R30
0000f4 87f9     +STD Y + 8 + 1 , R31
0000f5 876a     +STD Y + 8 + 2 , R22
0000f6 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 0092 		D = (error_history[QTY_OF_ERR - 1] -        // (current error - previous error) * kD
                 ; 0000 0093             error_history[QTY_OF_ERR - 1 - 1]) * kD;
                +
0000f7 a9ac     +LDD R26 , Y + 52
0000f8 a9bd     +LDD R27 , Y + 52 + 1
0000f9 a98e     +LDD R24 , Y + 52 + 2
0000fa a99f     +LDD R25 , Y + 52 + 3
                 	__GETD2S 52
                +
0000fb ade8     +LDD R30 , Y + 56
0000fc adf9     +LDD R31 , Y + 56 + 1
0000fd ad6a     +LDD R22 , Y + 56 + 2
0000fe ad7b     +LDD R23 , Y + 56 + 3
                 	__GETD1S 56
0000ff 940e 053d 	CALL __SUBF12
000101 940e 0412 	CALL SUBOPT_0x1
                +
000103 83ec     +STD Y + 4 , R30
000104 83fd     +STD Y + 4 + 1 , R31
000105 836e     +STD Y + 4 + 2 , R22
000106 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 0094 
                 ; 0000 0095 		PID_total_correction = (P + I) + D;
000107 940e 0419 	CALL SUBOPT_0x2
                +
000109 85ac     +LDD R26 , Y + 12
00010a 85bd     +LDD R27 , Y + 12 + 1
00010b 858e     +LDD R24 , Y + 12 + 2
00010c 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
00010d 940e 0544 	CALL __ADDF12
00010f 940e 041e 	CALL SUBOPT_0x3
000111 940e 0544 	CALL __ADDF12
000113 940e 066e 	CALL __PUTD1S0
                 ; 0000 0096 
                 ; 0000 0097 		left_motor_speed  = AVG_SPEED + (uint16_t)PID_total_correction;
000115 940e 0423 	CALL SUBOPT_0x4
000117 56e5      	SUBI R30,LOW(-155)
000118 4fff      	SBCI R31,HIGH(-155)
000119 019f      	MOVW R18,R30
                 ; 0000 0098 		right_motor_speed = AVG_SPEED - (uint16_t)PID_total_correction;
00011a 940e 0423 	CALL SUBOPT_0x4
00011c e9ab      	LDI  R26,LOW(155)
00011d e0b0      	LDI  R27,HIGH(155)
00011e 1bae      	SUB  R26,R30
00011f 0bbf      	SBC  R27,R31
000120 01ad      	MOVW R20,R26
                 ; 0000 0099 
                 ; 0000 009A 		// Validating a range of variables
                 ; 0000 009B 		if (left_motor_speed > 255)
                +
000121 3020     +CPI R18 , LOW ( 256 )
000122 e0e1     +LDI R30 , HIGH ( 256 )
000123 073e     +CPC R19 , R30
                 	__CPWRN 18,19,256
000124 f01c      	BRLT _0xD
                 ; 0000 009C 			left_motor_speed = 255;
                +
000125 ef2f     +LDI R18 , LOW ( 255 )
000126 e030     +LDI R19 , HIGH ( 255 )
                 	__GETWRN 18,19,255
                 ; 0000 009D 		else if (left_motor_speed < 0)
000127 c004      	RJMP _0xE
                 _0xD:
000128 2333      	TST  R19
000129 f412      	BRPL _0xF
                 ; 0000 009E 			left_motor_speed = 0;
                +
00012a e020     +LDI R18 , LOW ( 0 )
00012b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 009F 		if (right_motor_speed > 255)
                 _0xF:
                 _0xE:
                +
00012c 3040     +CPI R20 , LOW ( 256 )
00012d e0e1     +LDI R30 , HIGH ( 256 )
00012e 075e     +CPC R21 , R30
                 	__CPWRN 20,21,256
00012f f01c      	BRLT _0x10
                 ; 0000 00A0 			right_motor_speed = 255;
                +
000130 ef4f     +LDI R20 , LOW ( 255 )
000131 e050     +LDI R21 , HIGH ( 255 )
                 	__GETWRN 20,21,255
                 ; 0000 00A1 		else if (right_motor_speed < 0)
000132 c004      	RJMP _0x11
                 _0x10:
000133 2355      	TST  R21
000134 f412      	BRPL _0x12
                 ; 0000 00A2 			right_motor_speed = 0;
                +
000135 e040     +LDI R20 , LOW ( 0 )
000136 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 00A3 
                 ; 0000 00A4 		// Motors power difference compensation
                 ; 0000 00A5 		#if MOTORS_NOT_PERFECT
                 ; 0000 00A6 			if (L_MOTOR_MISMATCH >= R_MOTOR_MISMATCH) {
                 ; 0000 00A7 				OCR2A = 0;
                 ; 0000 00A8 				OCR2B = left_motor_speed;
                 ; 0000 00A9 				OCR0A = 0;
                 ; 0000 00AA 				OCR0B = right_motor_speed / L_MOTOR_MISMATCH;
                 ; 0000 00AB 			} else {
                 ; 0000 00AC 				OCR2A = 0;
                 ; 0000 00AD 				OCR2B = left_motor_speed / R_MOTOR_MISMATCH;
                 ; 0000 00AE 				OCR0A = 0;
                 ; 0000 00AF 				OCR0B = right_motor_speed;
                 ; 0000 00B0 			}
                 ; 0000 00B1 		#else
                 ; 0000 00B2 			OCR2A = 0;
                 _0x12:
                 _0x11:
000137 e0e0      	LDI  R30,LOW(0)
000138 93e0 00b3 	STS  179,R30
                 ; 0000 00B3 			OCR2B = left_motor_speed;
00013a 9320 00b4 	STS  180,R18
                 ; 0000 00B4 			OCR0A = 0;
00013c bde7      	OUT  0x27,R30
                 ; 0000 00B5 			OCR0B = right_motor_speed;
00013d bd48      	OUT  0x28,R20
                 ; 0000 00B6 		#endif /* MOTORS_NOT_PERFECT */
                 ; 0000 00B7 
                 ; 0000 00B8 		delay_ms (MAIN_CYCLE_DELAY);
00013e e0a2      	LDI  R26,LOW(2)
00013f e0b0      	LDI  R27,0
000140 940e 0477 	CALL _delay_ms
                 ; 0000 00B9 	}
000142 cf5f      	RJMP _0x4
                 ; 0000 00BA }
                 _0x13:
000143 cfff      	RJMP _0x13
                 ; .FEND
                 ;
                 ;/*************************** Functions ****************************/
                 ;
                 ;void InitSys (void) {
                 ; 0000 00BE void InitSys (void) {
                 _InitSys:
                 ; .FSTART _InitSys
                 ; 0000 00BF 	// Motors
                 ; 0000 00C0 	    // Output mode
                 ; 0000 00C1 		DDRB |= (1 << DDB3);			            // OC2A
000144 9a23      	SBI  0x4,3
                 ; 0000 00C2 		DDRD |= (1 << DDD6) |			            // OC0A
                 ; 0000 00C3 				(1 << DDD5) |			            // OC0B
                 ; 0000 00C4 				(1 << DDD3);			            // OC2B
000145 b1ea      	IN   R30,0xA
000146 66e8      	ORI  R30,LOW(0x68)
000147 b9ea      	OUT  0xA,R30
                 ; 0000 00C5 
                 ; 0000 00C6 	// SensorLine
                 ; 0000 00C7 	    // Input mode
                 ; 0000 00C8 		DDRB &= ~((1 << DDB2) | (1 << DDB1) | (1 << DDB0));
000148 b1e4      	IN   R30,0x4
000149 7fe8      	ANDI R30,LOW(0xF8)
00014a b9e4      	OUT  0x4,R30
                 ; 0000 00C9 		DDRD &= ~(1 << DDD7);
00014b 9857      	CBI  0xA,7
                 ; 0000 00CA 
                 ; 0000 00CB 	// Infrared Sensor
                 ; 0000 00CC 	    // Input mode
                 ; 0000 00CD 		#ifdef READ_SENSOR_IR
                 ; 0000 00CE 			DDRx &= ~(1 << DDxx);
                 ; 0000 00CF 		#endif
                 ; 0000 00D0 
                 ; 0000 00D1 	// Timer/Counter(s) initialization
                 ; 0000 00D2 		// Timer/Counter 0
                 ; 0000 00D3 		// Fast PWM Mode
                 ; 0000 00D4 		// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
                 ; 0000 00D5 		// TOP = 0xFF
                 ; 0000 00D6 		// Prescaler: 1:64
                 ; 0000 00D7 		TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
00014c b5e4      	IN   R30,0x24
00014d 6ae3      	ORI  R30,LOW(0xA3)
00014e bde4      	OUT  0x24,R30
                 ; 0000 00D8 		TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
00014f b5e4      	IN   R30,0x24
000150 7ae3      	ANDI R30,LOW(0xA3)
000151 bde4      	OUT  0x24,R30
                 ; 0000 00D9 		TCCR0B |= (1 << CS01) | (1 << CS00);
000152 b5e5      	IN   R30,0x25
000153 60e3      	ORI  R30,LOW(0x3)
000154 bde5      	OUT  0x25,R30
                 ; 0000 00DA 		TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
000155 b5e5      	IN   R30,0x25
000156 70e3      	ANDI R30,LOW(0x3)
000157 bde5      	OUT  0x25,R30
                 ; 0000 00DB 		TCNT0  = 0x00;
000158 e0e0      	LDI  R30,LOW(0)
000159 bde6      	OUT  0x26,R30
                 ; 0000 00DC 		TIMSK0 = 0x00;
00015a 93e0 006e 	STS  110,R30
                 ; 0000 00DD 		OCR0A  = 0x00;	OCR0B  = 0x00;
00015c bde7      	OUT  0x27,R30
00015d bde8      	OUT  0x28,R30
                 ; 0000 00DE 
                 ; 0000 00DF 		// Timer/Counter 1
                 ; 0000 00E0 		// Fast PWM 10-bit Mode
                 ; 0000 00E1 		// Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM (non-inverting mode)
                 ; 0000 00E2 		// TOP = 0x03FF
                 ; 0000 00E3 		// Prescaler: 1:64
                 ; 0000 00E4 		TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
00015e 91e0 0080 	LDS  R30,128
000160 6ae3      	ORI  R30,LOW(0xA3)
000161 93e0 0080 	STS  128,R30
                 ; 0000 00E5 		TCCR1A &= ~((1 << COM1A0) | (1 << COM1B0) | (1 << 3) | (1 << 2));
000163 91e0 0080 	LDS  R30,128
000165 7ae3      	ANDI R30,LOW(0xA3)
000166 93e0 0080 	STS  128,R30
                 ; 0000 00E6 		TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
000168 91e0 0081 	LDS  R30,129
00016a 60eb      	ORI  R30,LOW(0xB)
00016b 93e0 0081 	STS  129,R30
                 ; 0000 00E7 		TCCR1B &= ~((1 << ICNC1) | (1 << ICES1) | (1 << 5) | (1 << WGM13) | (1 << CS12));
00016d 91e0 0081 	LDS  R30,129
00016f 70eb      	ANDI R30,LOW(0xB)
000170 93e0 0081 	STS  129,R30
                 ; 0000 00E8 		TCCR1C = 0x00;
000172 e0e0      	LDI  R30,LOW(0)
000173 93e0 0082 	STS  130,R30
                 ; 0000 00E9 		TCNT1H = 0x00;	TCNT1L = 0x00;
000175 93e0 0085 	STS  133,R30
000177 93e0 0084 	STS  132,R30
                 ; 0000 00EA 		TIMSK1 = 0x00;
000179 93e0 006f 	STS  111,R30
                 ; 0000 00EB 		ICR1H  = 0x00;	ICR1L  = 0x00;
00017b 93e0 0087 	STS  135,R30
00017d 93e0 0086 	STS  134,R30
                 ; 0000 00EC 		OCR1AH = 0x00;	OCR1AL = 0x00;
00017f 93e0 0089 	STS  137,R30
000181 93e0 0088 	STS  136,R30
                 ; 0000 00ED 		OCR1BH = 0x00;	OCR1BL = 0x00;
000183 93e0 008b 	STS  139,R30
000185 93e0 008a 	STS  138,R30
                 ; 0000 00EE 
                 ; 0000 00EF 		// Timer/Counter 2
                 ; 0000 00F0 		// Fast PWM Mode
                 ; 0000 00F1 		// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
                 ; 0000 00F2 		// TOP = 0xFF
                 ; 0000 00F3 		// Prescaler: 1:64
                 ; 0000 00F4 		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
000187 91e0 00b0 	LDS  R30,176
000189 6ae3      	ORI  R30,LOW(0xA3)
00018a 93e0 00b0 	STS  176,R30
                 ; 0000 00F5 		TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
00018c 91e0 00b0 	LDS  R30,176
00018e 7ae3      	ANDI R30,LOW(0xA3)
00018f 93e0 00b0 	STS  176,R30
                 ; 0000 00F6 		TCCR2B |= (1 << CS22);
000191 91e0 00b1 	LDS  R30,177
000193 60e4      	ORI  R30,4
000194 93e0 00b1 	STS  177,R30
                 ; 0000 00F7 		TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
000196 91e0 00b1 	LDS  R30,177
000198 70e4      	ANDI R30,LOW(0x4)
000199 93e0 00b1 	STS  177,R30
                 ; 0000 00F8 		TCNT2  = 0x00;
00019b e0e0      	LDI  R30,LOW(0)
00019c 93e0 00b2 	STS  178,R30
                 ; 0000 00F9 		TIMSK2 = 0x00;
00019e 93e0 0070 	STS  112,R30
                 ; 0000 00FA 		OCR2A  = 0x00;	OCR2B  = 0x00;
0001a0 93e0 00b3 	STS  179,R30
0001a2 93e0 00b4 	STS  180,R30
                 ; 0000 00FB 
                 ; 0000 00FC 	// Crystal Oscillator division factor: 1
                 ; 0000 00FD 		#pragma optsize-
                 ; 0000 00FE 			CLKPR = 0x80;
0001a4 e8e0      	LDI  R30,LOW(128)
0001a5 93e0 0061 	STS  97,R30
                 ; 0000 00FF 			CLKPR = 0x00;
0001a7 e0e0      	LDI  R30,LOW(0)
0001a8 93e0 0061 	STS  97,R30
                 ; 0000 0100 		#ifdef _OPTIMIZE_SIZE_
                 ; 0000 0101 		#pragma optsize+
                 ; 0000 0102 		#endif
                 ; 0000 0103 
                 ; 0000 0104 	// External Interrupt(s) initialization
                 ; 0000 0105 		// Turn OFF
                 ; 0000 0106 		EICRA  = 0x00;
0001aa 93e0 0069 	STS  105,R30
                 ; 0000 0107 		EIMSK  = 0x00;
0001ac bbed      	OUT  0x1D,R30
                 ; 0000 0108 		PCICR  = 0x00;
0001ad 93e0 0068 	STS  104,R30
                 ; 0000 0109 
                 ; 0000 010A 	// Analog Comparator initialization
                 ; 0000 010B 		// Turn OFF
                 ; 0000 010C 		ACSR   = 0x80;
0001af e8e0      	LDI  R30,LOW(128)
0001b0 bfe0      	OUT  0x30,R30
                 ; 0000 010D 		ADCSRB = 0x00;
0001b1 e0e0      	LDI  R30,LOW(0)
0001b2 93e0 007b 	STS  123,R30
                 ; 0000 010E 		DIDR1  = 0x00;
0001b4 93e0 007f 	STS  127,R30
                 ; 0000 010F 
                 ; 0000 0110 	// USART initialization
                 ; 0000 0111 		// Turn OFF
                 ; 0000 0112 		UCSR0B = 0x00;
0001b6 93e0 00c1 	STS  193,R30
                 ; 0000 0113 
                 ; 0000 0114 	// ADC initialization
                 ; 0000 0115 		// Turn OFF
                 ; 0000 0116 		ADCSRA = 0x00;
0001b8 93e0 007a 	STS  122,R30
                 ; 0000 0117 
                 ; 0000 0118 	// SPI initialization
                 ; 0000 0119 		// Turn OFF
                 ; 0000 011A 		SPCR   = 0x00;
0001ba bdec      	OUT  0x2C,R30
                 ; 0000 011B 
                 ; 0000 011C 	// TWI initialization
                 ; 0000 011D 		// Turn OFF
                 ; 0000 011E 		TWCR   = 0x00;
0001bb 93e0 00bc 	STS  188,R30
                 ; 0000 011F }
0001bd 9508      	RET
                 ; .FEND
                 ;
                 ;void ReadSensorLineData (void) {
                 ; 0000 0121 void ReadSensorLineData (void) {
                 _ReadSensorLineData:
                 ; .FSTART _ReadSensorLineData
                 ; 0000 0122 	#ifdef READ_SENSOR_1
                 ; 0000 0123 		line_data[0] = READ_SENSOR_1;
0001be b1e3      	IN   R30,0x3
0001bf 72e0      	ANDI R30,LOW(0x20)
0001c0 e0a0      	LDI  R26,LOW(_line_data)
0001c1 e0b3      	LDI  R27,HIGH(_line_data)
0001c2 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0124 	#endif /* READ_SENSOR_1 */
                 ; 0000 0125 	#ifdef READ_SENSOR_2
                 ; 0000 0126 		line_data[1] = READ_SENSOR_2;
                +
0001c4 e0a1     +LDI R26 , LOW ( _line_data + ( 1 ) )
0001c5 e0b3     +LDI R27 , HIGH ( _line_data + ( 1 ) )
                 	__POINTW2MN _line_data,1
0001c6 b1e3      	IN   R30,0x3
0001c7 71e0      	ANDI R30,LOW(0x10)
0001c8 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0127 	#endif /* READ_SENSOR_2 */
                 ; 0000 0128 	#ifdef READ_SENSOR_3
                 ; 0000 0129 		line_data[2] = READ_SENSOR_3;
                +
0001ca e0a2     +LDI R26 , LOW ( _line_data + ( 2 ) )
0001cb e0b3     +LDI R27 , HIGH ( _line_data + ( 2 ) )
                 	__POINTW2MN _line_data,2
0001cc b1e3      	IN   R30,0x3
0001cd 70e4      	ANDI R30,LOW(0x4)
0001ce 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 012A 	#endif /* READ_SENSOR_3 */
                 ; 0000 012B 	#ifdef READ_SENSOR_4
                 ; 0000 012C 		line_data[3] = READ_SENSOR_4;
                +
0001d0 e0a3     +LDI R26 , LOW ( _line_data + ( 3 ) )
0001d1 e0b3     +LDI R27 , HIGH ( _line_data + ( 3 ) )
                 	__POINTW2MN _line_data,3
0001d2 b1e3      	IN   R30,0x3
0001d3 70e2      	ANDI R30,LOW(0x2)
0001d4 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 012D 	#endif /* READ_SENSOR_4 */
                 ; 0000 012E 	#ifdef READ_SENSOR_5
                 ; 0000 012F 		line_data[4] = READ_SENSOR_5;
                +
0001d6 e0a4     +LDI R26 , LOW ( _line_data + ( 4 ) )
0001d7 e0b3     +LDI R27 , HIGH ( _line_data + ( 4 ) )
                 	__POINTW2MN _line_data,4
0001d8 b1e3      	IN   R30,0x3
0001d9 70e1      	ANDI R30,LOW(0x1)
0001da 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0130 	#endif /* READ_SENSOR_5 */
                 ; 0000 0131 	#ifdef READ_SENSOR_6
                 ; 0000 0132 		line_data[5] = READ_SENSOR_6;
                +
0001dc e0a5     +LDI R26 , LOW ( _line_data + ( 5 ) )
0001dd e0b3     +LDI R27 , HIGH ( _line_data + ( 5 ) )
                 	__POINTW2MN _line_data,5
0001de b1e9      	IN   R30,0x9
0001df 78e0      	ANDI R30,LOW(0x80)
0001e0 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0133 	#endif /* READ_SENSOR_6 */
                 ; 0000 0134 	#ifdef READ_SENSOR_7
                 ; 0000 0135 		line_data[6] = READ_SENSOR_7;
                +
0001e2 e0a6     +LDI R26 , LOW ( _line_data + ( 6 ) )
0001e3 e0b3     +LDI R27 , HIGH ( _line_data + ( 6 ) )
                 	__POINTW2MN _line_data,6
0001e4 b1e6      	IN   R30,0x6
0001e5 70e1      	ANDI R30,LOW(0x1)
0001e6 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0136 	#endif /* READ_SENSOR_7 */
                 ; 0000 0137 	#ifdef READ_SENSOR_8
                 ; 0000 0138 		line_data[7] = READ_SENSOR_8;
                +
0001e8 e0a7     +LDI R26 , LOW ( _line_data + ( 7 ) )
0001e9 e0b3     +LDI R27 , HIGH ( _line_data + ( 7 ) )
                 	__POINTW2MN _line_data,7
0001ea b1e6      	IN   R30,0x6
0001eb 70e2      	ANDI R30,LOW(0x2)
0001ec 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0139 	#endif /* READ_SENSOR_8 */
                 ; 0000 013A 	#ifdef READ_SENSOR_9
                 ; 0000 013B 		line_data[8] = READ_SENSOR_9;
                +
0001ee e0a8     +LDI R26 , LOW ( _line_data + ( 8 ) )
0001ef e0b3     +LDI R27 , HIGH ( _line_data + ( 8 ) )
                 	__POINTW2MN _line_data,8
0001f0 b1e6      	IN   R30,0x6
0001f1 70e4      	ANDI R30,LOW(0x4)
0001f2 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 013C 	#endif /* READ_SENSOR_9 */
                 ; 0000 013D 	#ifdef READ_SENSOR_10
                 ; 0000 013E 		line_data[9] = READ_SENSOR_10;
                +
0001f4 e0a9     +LDI R26 , LOW ( _line_data + ( 9 ) )
0001f5 e0b3     +LDI R27 , HIGH ( _line_data + ( 9 ) )
                 	__POINTW2MN _line_data,9
0001f6 b1e6      	IN   R30,0x6
0001f7 70e8      	ANDI R30,LOW(0x8)
0001f8 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 013F 	#endif /* READ_SENSOR_10 */
                 ; 0000 0140 	#ifdef READ_SENSOR_11
                 ; 0000 0141 		line_data[10] = READ_SENSOR_11;
                +
0001fa e0aa     +LDI R26 , LOW ( _line_data + ( 10 ) )
0001fb e0b3     +LDI R27 , HIGH ( _line_data + ( 10 ) )
                 	__POINTW2MN _line_data,10
0001fc b1e6      	IN   R30,0x6
0001fd 71e0      	ANDI R30,LOW(0x10)
0001fe 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0142 	#endif /* READ_SENSOR_11 */
                 ; 0000 0143 	#ifdef READ_SENSOR_12
                 ; 0000 0144 		line_data[11] = READ_SENSOR_12;
                +
000200 e0ab     +LDI R26 , LOW ( _line_data + ( 11 ) )
000201 e0b3     +LDI R27 , HIGH ( _line_data + ( 11 ) )
                 	__POINTW2MN _line_data,11
000202 b1e6      	IN   R30,0x6
000203 72e0      	ANDI R30,LOW(0x20)
000204 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0145 	#endif /* READ_SENSOR_12 */
                 ; 0000 0146 	#ifdef READ_SENSOR_13
                 ; 0000 0147 		line_data[12] = READ_SENSOR_13;
                +
000206 e0ac     +LDI R26 , LOW ( _line_data + ( 12 ) )
000207 e0b3     +LDI R27 , HIGH ( _line_data + ( 12 ) )
                 	__POINTW2MN _line_data,12
000208 b1e9      	IN   R30,0x9
000209 71e0      	ANDI R30,LOW(0x10)
00020a 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0148 	#endif /* READ_SENSOR_13 */
                 ; 0000 0149 	#ifdef READ_SENSOR_14
                 ; 0000 014A 		line_data[13] = READ_SENSOR_14;
                +
00020c e0ad     +LDI R26 , LOW ( _line_data + ( 13 ) )
00020d e0b3     +LDI R27 , HIGH ( _line_data + ( 13 ) )
                 	__POINTW2MN _line_data,13
00020e b1e9      	IN   R30,0x9
00020f 70e4      	ANDI R30,LOW(0x4)
000210 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 014B 	#endif /* READ_SENSOR_14 */
                 ; 0000 014C 	#ifdef READ_SENSOR_15
                 ; 0000 014D 		line_data[14] = READ_SENSOR_15;
                +
000212 e0ae     +LDI R26 , LOW ( _line_data + ( 14 ) )
000213 e0b3     +LDI R27 , HIGH ( _line_data + ( 14 ) )
                 	__POINTW2MN _line_data,14
000214 b1e9      	IN   R30,0x9
000215 70e2      	ANDI R30,LOW(0x2)
000216 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 014E 	#endif /* READ_SENSOR_15 */
                 ; 0000 014F 	#ifdef READ_SENSOR_16
                 ; 0000 0150 		line_data[15] = READ_SENSOR_16;
                +
000218 e0af     +LDI R26 , LOW ( _line_data + ( 15 ) )
000219 e0b3     +LDI R27 , HIGH ( _line_data + ( 15 ) )
                 	__POINTW2MN _line_data,15
00021a b1e9      	IN   R30,0x9
00021b 70e1      	ANDI R30,LOW(0x1)
00021c 940e 0428 	CALL SUBOPT_0x5
                 ; 0000 0151 	#endif /* READ_SENSOR_16 */
                 ; 0000 0152 }
00021e 9508      	RET
                 ; .FEND
                 ;
                 ;float CurrentRobotError (void) {
                 ; 0000 0154 float CurrentRobotError (void) {
                 _CurrentRobotError:
                 ; .FSTART _CurrentRobotError
                 ; 0000 0155 	register uint8_t i = 0;
                 ; 0000 0156 	register float current_error = 0.0;
                 ; 0000 0157 
                 ; 0000 0158 	ReadSensorLineData ();
00021f 9724      	SBIW R28,4
000220 e0e0      	LDI  R30,LOW(0)
000221 83e8      	ST   Y,R30
000222 83e9      	STD  Y+1,R30
000223 83ea      	STD  Y+2,R30
000224 83eb      	STD  Y+3,R30
000225 931a      	ST   -Y,R17
                 ;	i -> R17
                 ;	current_error -> Y+1
000226 e010      	LDI  R17,0
000227 df96      	RCALL _ReadSensorLineData
                 ; 0000 0159 
                 ; 0000 015A 	for (i = 0; i < QTY_OF_SENSORS + 1; i++) {
000228 e010      	LDI  R17,LOW(0)
                 _0x15:
000229 3111      	CPI  R17,17
00022a f538      	BRSH _0x16
                 ; 0000 015B         // If the data on the [i] sensor is zero,
                 ; 0000 015C         // then the sensor is located above the black line
                 ; 0000 015D         if (i == 0) {
00022b 3010      	CPI  R17,0
00022c f119      	BREQ _0x14
                 ; 0000 015E             // Skip for the correct counting errors
                 ; 0000 015F             continue;
                 ; 0000 0160         }
                 ; 0000 0161 	    if (line_data[i] == 0) {
00022d 2fe1      	MOV  R30,R17
00022e e0f0      	LDI  R31,0
00022f 50e0      	SUBI R30,LOW(-_line_data)
000230 4ffd      	SBCI R31,HIGH(-_line_data)
000231 81e0      	LD   R30,Z
000232 30e0      	CPI  R30,0
000233 f4e1      	BRNE _0x18
                 ; 0000 0162             // Odd degree to preserve the sign '-'
                 ; 0000 0163             current_error += pow (QTY_OF_SENSORS / 2 - i, 3);
000234 2fe1      	MOV  R30,R17
000235 e0f0      	LDI  R31,0
000236 e0a8      	LDI  R26,LOW(8)
000237 e0b0      	LDI  R27,HIGH(8)
000238 940e 0683 	CALL __SWAPW12
00023a 1bea      	SUB  R30,R26
00023b 0bfb      	SBC  R31,R27
00023c 940e 042e 	CALL SUBOPT_0x6
00023e 940e 0673 	CALL __PUTPARD1
                +
000240 e0a0     +LDI R26 , LOW ( 0x40400000 )
000241 e0b0     +LDI R27 , HIGH ( 0x40400000 )
000242 e480     +LDI R24 , BYTE3 ( 0x40400000 )
000243 e490     +LDI R25 , BYTE4 ( 0x40400000 )
                 	__GETD2N 0x40400000
000244 940e 03b9 	CALL _pow
                +
000246 81a9     +LDD R26 , Y + 1
000247 81ba     +LDD R27 , Y + 1 + 1
000248 818b     +LDD R24 , Y + 1 + 2
000249 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
00024a 940e 0544 	CALL __ADDF12
                +
00024c 83e9     +STD Y + 1 , R30
00024d 83fa     +STD Y + 1 + 1 , R31
00024e 836b     +STD Y + 1 + 2 , R22
00024f 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0164         }
                 ; 0000 0165 	}
                 _0x18:
                 _0x14:
000250 5f1f      	SUBI R17,-1
000251 cfd7      	RJMP _0x15
                 _0x16:
                 ; 0000 0166 
                 ; 0000 0167 	return current_error;
                +
000252 81e9     +LDD R30 , Y + 1
000253 81fa     +LDD R31 , Y + 1 + 1
000254 816b     +LDD R22 , Y + 1 + 2
000255 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000256 8118      	LDD  R17,Y+0
000257 9625      	ADIW R28,5
000258 9508      	RET
                 ; 0000 0168 }
                 ; .FEND
                 ;
                 ;
                 ;//  Literature:
                 ;//      http://we.easyelectronics.ru/Theory/pid-regulyatory--dlya-chaynikov-praktikov.html
                 ;//      https://wiki.roboforum.ru/index.php?title=%d0%9f%d0%b5%d1%80%d0%b5%d0%b2%d0%be%d0%b4_%d1%81%d1%82%d0%b0%d1%82%d1 ...
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000259 940e 0678 	CALL __PUTPARD2
00025b 817b         ldd  r23,y+3
00025c 816a         ldd  r22,y+2
00025d 81f9         ldd  r31,y+1
00025e 81e8         ld   r30,y
00025f fb77         bst  r23,7
000260 0f77         lsl  r23
000261 fd67         sbrc r22,7
000262 6071         sbr  r23,1
000263 2f97         mov  r25,r23
000264 579e         subi r25,0x7e
000265 f081         breq __ftrunc0
000266 f078         brcs __ftrunc0
000267 3198         cpi  r25,24
000268 f490         brsh __ftrunc1
000269 27aa         clr  r26
00026a 27bb         clr  r27
00026b 2788         clr  r24
                 __ftrunc2:
00026c 9408         sec
00026d 9587         ror  r24
00026e 95b7         ror  r27
00026f 95a7         ror  r26
000270 959a         dec  r25
000271 f7d1         brne __ftrunc2
000272 23ea         and  r30,r26
000273 23fb         and  r31,r27
000274 2368         and  r22,r24
000275 c005         rjmp __ftrunc1
                 __ftrunc0:
000276 94e8         clt
000277 2777         clr  r23
000278 27ee         clr  r30
000279 27ff         clr  r31
00027a 2766         clr  r22
                 __ftrunc1:
00027b 776f         cbr  r22,0x80
00027c 9576         lsr  r23
00027d f408         brcc __ftrunc3
00027e 6860         sbr  r22,0x80
                 __ftrunc3:
00027f f977         bld  r23,7
000280 91a9         ld   r26,y+
000281 91b9         ld   r27,y+
000282 9189         ld   r24,y+
000283 9199         ld   r25,y+
000284 17ea         cp   r30,r26
000285 07fb         cpc  r31,r27
000286 0768         cpc  r22,r24
000287 0779         cpc  r23,r25
000288 fb97         bst  r25,7
000289 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00028a 940e 0678 	CALL __PUTPARD2
00028c 940e 0669 	CALL __GETD2S0
00028e 940e 0259 	CALL _ftrunc
000290 940e 066e 	CALL __PUTD1S0
000292 f419          brne __floor1
                 __floor0:
000293 940e 0433 	CALL SUBOPT_0x7
000295 c005      	RJMP _0x2080004
                 __floor1:
000296 f7e6          brtc __floor0
000297 940e 0433 	CALL SUBOPT_0x7
000299 940e 0436 	CALL SUBOPT_0x8
                 _0x2080004:
00029b 9624      	ADIW R28,4
00029c 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
00029d 940e 0678 	CALL __PUTPARD2
00029f 9724      	SBIW R28,4
0002a0 931a      	ST   -Y,R17
0002a1 930a      	ST   -Y,R16
0002a2 940e 043d 	CALL SUBOPT_0x9
0002a4 940e 068e 	CALL __CPD02
0002a6 f02c      	BRLT _0x200000C
                +
0002a7 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0002a8 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0002a9 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0002aa ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0002ab c071      	RJMP _0x2080003
                 _0x200000C:
0002ac 940e 0442 	CALL SUBOPT_0xA
0002ae 940e 0673 	CALL __PUTPARD1
0002b0 b7ad      	IN   R26,SPL
0002b1 b7be      	IN   R27,SPH
0002b2 9711      	SBIW R26,1
0002b3 931f      	PUSH R17
0002b4 930f      	PUSH R16
0002b5 940e 0481 	CALL _frexp
0002b7 910f      	POP  R16
0002b8 911f      	POP  R17
0002b9 940e 0447 	CALL SUBOPT_0xB
0002bb 940e 043d 	CALL SUBOPT_0x9
                +
0002bd efe3     +LDI R30 , LOW ( 0x3F3504F3 )
0002be e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
0002bf e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
0002c0 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
0002c1 940e 0627 	CALL __CMPF12
0002c3 f440      	BRSH _0x200000D
0002c4 940e 044c 	CALL SUBOPT_0xC
0002c6 940e 0544 	CALL __ADDF12
0002c8 940e 0447 	CALL SUBOPT_0xB
                +
0002ca 5001     +SUBI R16 , LOW ( 1 )
0002cb 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x200000D:
0002cc 940e 0442 	CALL SUBOPT_0xA
0002ce 940e 0436 	CALL SUBOPT_0x8
0002d0 937f      	PUSH R23
0002d1 936f      	PUSH R22
0002d2 93ff      	PUSH R31
0002d3 93ef      	PUSH R30
0002d4 940e 0442 	CALL SUBOPT_0xA
                +
0002d6 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0002d7 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0002d8 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0002d9 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0002da 940e 0544 	CALL __ADDF12
0002dc 91af      	POP  R26
0002dd 91bf      	POP  R27
0002de 918f      	POP  R24
0002df 919f      	POP  R25
0002e0 940e 05e2 	CALL __DIVF21
0002e2 940e 0447 	CALL SUBOPT_0xB
0002e4 940e 044c 	CALL SUBOPT_0xC
0002e6 940e 044e 	CALL SUBOPT_0xD
                +
0002e8 e2a6     +LDI R26 , LOW ( 0x3F654226 )
0002e9 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0002ea e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0002eb e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0002ec 940e 0455 	CALL SUBOPT_0xE
                +
0002ee e4ee     +LDI R30 , LOW ( 0x4054114E )
0002ef e1f1     +LDI R31 , HIGH ( 0x4054114E )
0002f0 e564     +LDI R22 , BYTE3 ( 0x4054114E )
0002f1 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0002f2 940e 045a 	CALL SUBOPT_0xF
0002f4 940e 043d 	CALL SUBOPT_0x9
0002f6 940e 0594 	CALL __MULF12
0002f8 937f      	PUSH R23
0002f9 936f      	PUSH R22
0002fa 93ff      	PUSH R31
0002fb 93ef      	PUSH R30
0002fc 940e 045f 	CALL SUBOPT_0x10
                +
0002fe e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0002ff e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000300 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000301 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000302 940e 053d 	CALL __SUBF12
000304 91af      	POP  R26
000305 91bf      	POP  R27
000306 918f      	POP  R24
000307 919f      	POP  R25
000308 940e 05e2 	CALL __DIVF21
00030a 937f      	PUSH R23
00030b 936f      	PUSH R22
00030c 93ff      	PUSH R31
00030d 93ef      	PUSH R30
00030e 01f8      	MOVW R30,R16
00030f 940e 042e 	CALL SUBOPT_0x6
                +
000311 e1a8     +LDI R26 , LOW ( 0x3F317218 )
000312 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000313 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000314 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000315 940e 0594 	CALL __MULF12
000317 91af      	POP  R26
000318 91bf      	POP  R27
000319 918f      	POP  R24
00031a 919f      	POP  R25
00031b 940e 0544 	CALL __ADDF12
                 _0x2080003:
00031d 8119      	LDD  R17,Y+1
00031e 8108      	LDD  R16,Y+0
00031f 962a      	ADIW R28,10
000320 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
000321 940e 0678 	CALL __PUTPARD2
000323 9728      	SBIW R28,8
000324 931a      	ST   -Y,R17
000325 930a      	ST   -Y,R16
000326 940e 0464 	CALL SUBOPT_0x11
                +
000328 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
000329 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
00032a ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
00032b ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
00032c 940e 0627 	CALL __CMPF12
00032e f418      	BRSH _0x200000F
00032f 940e 0469 	CALL SUBOPT_0x12
000331 c083      	RJMP _0x2080002
                 _0x200000F:
                +
000332 85ea     +LDD R30 , Y + 10
000333 85fb     +LDD R31 , Y + 10 + 1
000334 856c     +LDD R22 , Y + 10 + 2
000335 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000336 940e 068a 	CALL __CPD10
000338 f429      	BRNE _0x2000010
                +
000339 e0e0     +LDI R30 , LOW ( 0x3F800000 )
00033a e0f0     +LDI R31 , HIGH ( 0x3F800000 )
00033b e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00033c e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00033d c077      	RJMP _0x2080002
                 _0x2000010:
00033e 940e 0464 	CALL SUBOPT_0x11
                +
000340 e1e8     +LDI R30 , LOW ( 0x42B17218 )
000341 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000342 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000343 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000344 940e 0627 	CALL __CMPF12
000346 f009      	BREQ PC+2
000347 f408      	BRCC PC+2
000348 c005      	RJMP _0x2000011
                +
000349 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
00034a efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00034b e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00034c e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00034d c067      	RJMP _0x2080002
                 _0x2000011:
00034e 940e 0464 	CALL SUBOPT_0x11
                +
000350 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000351 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000352 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000353 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000354 940e 0594 	CALL __MULF12
                +
000356 87ea     +STD Y + 10 , R30
000357 87fb     +STD Y + 10 + 1 , R31
000358 876c     +STD Y + 10 + 2 , R22
000359 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00035a 940e 0464 	CALL SUBOPT_0x11
00035c df2d      	RCALL _floor
00035d 940e 04d3 	CALL __CFD1
00035f 018f      	MOVW R16,R30
000360 940e 0464 	CALL SUBOPT_0x11
000362 940e 042e 	CALL SUBOPT_0x6
000364 940e 045a 	CALL SUBOPT_0xF
000366 01df      	MOVW R26,R30
000367 01cb      	MOVW R24,R22
                +
000368 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000369 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00036a e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00036b e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
00036c 940e 045a 	CALL SUBOPT_0xF
00036e 940e 0447 	CALL SUBOPT_0xB
000370 940e 044c 	CALL SUBOPT_0xC
000372 940e 044e 	CALL SUBOPT_0xD
                +
000374 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000375 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000376 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000377 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000378 940e 0594 	CALL __MULF12
                +
00037a eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
00037b eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
00037c ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
00037d e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
00037e 940e 0544 	CALL __ADDF12
000380 940e 043d 	CALL SUBOPT_0x9
000382 940e 0594 	CALL __MULF12
000384 940e 0447 	CALL SUBOPT_0xB
000386 940e 045f 	CALL SUBOPT_0x10
                +
000388 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
000389 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
00038a ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
00038b e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
00038c 940e 0544 	CALL __ADDF12
                +
00038e 83ea     +STD Y + 2 , R30
00038f 83fb     +STD Y + 2 + 1 , R31
000390 836c     +STD Y + 2 + 2 , R22
000391 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000392 940e 0442 	CALL SUBOPT_0xA
                +
000394 81aa     +LDD R26 , Y + 2
000395 81bb     +LDD R27 , Y + 2 + 1
000396 818c     +LDD R24 , Y + 2 + 2
000397 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000398 940e 0544 	CALL __ADDF12
                +
00039a efa3     +LDI R26 , LOW ( 0x3FB504F3 )
00039b e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
00039c eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
00039d e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
00039e 940e 0594 	CALL __MULF12
0003a0 937f      	PUSH R23
0003a1 936f      	PUSH R22
0003a2 93ff      	PUSH R31
0003a3 93ef      	PUSH R30
0003a4 940e 043d 	CALL SUBOPT_0x9
0003a6 940e 045f 	CALL SUBOPT_0x10
0003a8 940e 053d 	CALL __SUBF12
0003aa 91af      	POP  R26
0003ab 91bf      	POP  R27
0003ac 918f      	POP  R24
0003ad 919f      	POP  R25
0003ae 940e 05e2 	CALL __DIVF21
0003b0 940e 0673 	CALL __PUTPARD1
0003b2 01d8      	MOVW R26,R16
0003b3 940e 0492 	CALL _ldexp
                 _0x2080002:
0003b5 8119      	LDD  R17,Y+1
0003b6 8108      	LDD  R16,Y+0
0003b7 962e      	ADIW R28,14
0003b8 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
0003b9 940e 0678 	CALL __PUTPARD2
0003bb 9724      	SBIW R28,4
0003bc 940e 0419 	CALL SUBOPT_0x2
0003be 940e 068a 	CALL __CPD10
0003c0 f419      	BRNE _0x2000012
0003c1 940e 0469 	CALL SUBOPT_0x12
0003c3 c045      	RJMP _0x2080001
                 _0x2000012:
                +
0003c4 85a8     +LDD R26 , Y + 8
0003c5 85b9     +LDD R27 , Y + 8 + 1
0003c6 858a     +LDD R24 , Y + 8 + 2
0003c7 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0003c8 940e 068e 	CALL __CPD02
0003ca f494      	BRGE _0x2000013
0003cb 940e 046e 	CALL SUBOPT_0x13
0003cd 940e 068a 	CALL __CPD10
0003cf f429      	BRNE _0x2000014
                +
0003d0 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0003d1 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0003d2 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0003d3 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0003d4 c034      	RJMP _0x2080001
                 _0x2000014:
                +
0003d5 85a8     +LDD R26 , Y + 8
0003d6 85b9     +LDD R27 , Y + 8 + 1
0003d7 858a     +LDD R24 , Y + 8 + 2
0003d8 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0003d9 940e 0473 	CALL SUBOPT_0x14
0003db df45      	RCALL _exp
0003dc c02c      	RJMP _0x2080001
                 _0x2000013:
0003dd 940e 046e 	CALL SUBOPT_0x13
0003df 01de      	MOVW R26,R28
0003e0 940e 04d3 	CALL __CFD1
0003e2 940e 065f 	CALL __PUTDP1
0003e4 940e 0433 	CALL SUBOPT_0x7
0003e6 940e 050a 	CALL __CDF1
0003e8 01df      	MOVW R26,R30
0003e9 01cb      	MOVW R24,R22
0003ea 940e 046e 	CALL SUBOPT_0x13
0003ec 940e 0694 	CALL __CPD12
0003ee f019      	BREQ _0x2000015
0003ef 940e 0469 	CALL SUBOPT_0x12
0003f1 c017      	RJMP _0x2080001
                 _0x2000015:
0003f2 940e 0419 	CALL SUBOPT_0x2
0003f4 940e 049e 	CALL __ANEGF1
0003f6 01df      	MOVW R26,R30
0003f7 01cb      	MOVW R24,R22
0003f8 940e 0473 	CALL SUBOPT_0x14
0003fa df26      	RCALL _exp
                +
0003fb 87e8     +STD Y + 8 , R30
0003fc 87f9     +STD Y + 8 + 1 , R31
0003fd 876a     +STD Y + 8 + 2 , R22
0003fe 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0003ff 81e8      	LD   R30,Y
000400 70e1      	ANDI R30,LOW(0x1)
000401 f419      	BRNE _0x2000016
000402 940e 0419 	CALL SUBOPT_0x2
000404 c004      	RJMP _0x2080001
                 _0x2000016:
000405 940e 0419 	CALL SUBOPT_0x2
000407 940e 049e 	CALL __ANEGF1
                 _0x2080001:
000409 962c      	ADIW R28,12
00040a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _line_data:
000300           	.BYTE 0x10
                 __seed_G101:
000310           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00040b 2fe1      	MOV  R30,R17
00040c e0f0      	LDI  R31,0
00040d 01de      	MOVW R26,R28
00040e 9654      	ADIW R26,20
00040f 940e 064f 	CALL __LSLW2
000411 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
                +
000412 e0a0     +LDI R26 , LOW ( 0x0 )
000413 e0b0     +LDI R27 , HIGH ( 0x0 )
000414 e080     +LDI R24 , BYTE3 ( 0x0 )
000415 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000416 940e 0594 	CALL __MULF12
000418 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
                +
000419 85e8     +LDD R30 , Y + 8
00041a 85f9     +LDD R31 , Y + 8 + 1
00041b 856a     +LDD R22 , Y + 8 + 2
00041c 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00041d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
00041e 81ac     +LDD R26 , Y + 4
00041f 81bd     +LDD R27 , Y + 4 + 1
000420 818e     +LDD R24 , Y + 4 + 2
000421 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000422 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000423 940e 0664 	CALL __GETD1S0
000425 940e 04d1 	CALL __CFD1U
000427 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x5:
000428 23ee      	TST  R30
000429 e0e1      	LDI  R30,1
00042a f409      	BRBC 0x1,PC+2
00042b e0e0      	LDI  R30,0
00042c 93ec      	ST   X,R30
00042d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00042e 940e 0654 	CALL __CWD1
000430 940e 050a 	CALL __CDF1
000432 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000433 940e 0664 	CALL __GETD1S0
000435 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
000436 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000437 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000438 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000439 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00043a 940e 053d 	CALL __SUBF12
00043c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9:
                +
00043d 81ae     +LDD R26 , Y + 6
00043e 81bf     +LDD R27 , Y + 6 + 1
00043f 8588     +LDD R24 , Y + 6 + 2
000440 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000441 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
                +
000442 81ee     +LDD R30 , Y + 6
000443 81ff     +LDD R31 , Y + 6 + 1
000444 8568     +LDD R22 , Y + 6 + 2
000445 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000446 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
                +
000447 83ee     +STD Y + 6 , R30
000448 83ff     +STD Y + 6 + 1 , R31
000449 8768     +STD Y + 6 + 2 , R22
00044a 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
00044b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
00044c dff5      	RCALL SUBOPT_0xA
00044d cfef      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
00044e 940e 0594 	CALL __MULF12
                +
000450 83ea     +STD Y + 2 , R30
000451 83fb     +STD Y + 2 + 1 , R31
000452 836c     +STD Y + 2 + 2 , R22
000453 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000454 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000455 940e 0594 	CALL __MULF12
000457 01df      	MOVW R26,R30
000458 01cb      	MOVW R24,R22
000459 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00045a 940e 067d 	CALL __SWAPD12
00045c 940e 053d 	CALL __SUBF12
00045e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
                +
00045f 81ea     +LDD R30 , Y + 2
000460 81fb     +LDD R31 , Y + 2 + 1
000461 816c     +LDD R22 , Y + 2 + 2
000462 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000463 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
                +
000464 85aa     +LDD R26 , Y + 10
000465 85bb     +LDD R27 , Y + 10 + 1
000466 858c     +LDD R24 , Y + 10 + 2
000467 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000468 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
                +
000469 e0e0     +LDI R30 , LOW ( 0x0 )
00046a e0f0     +LDI R31 , HIGH ( 0x0 )
00046b e060     +LDI R22 , BYTE3 ( 0x0 )
00046c e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00046d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
                +
00046e 81ec     +LDD R30 , Y + 4
00046f 81fd     +LDD R31 , Y + 4 + 1
000470 816e     +LDD R22 , Y + 4 + 2
000471 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000472 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000473 940e 029d 	CALL _log
000475 dfa8      	RCALL SUBOPT_0x3
000476 cfde      	RJMP SUBOPT_0xE
                 
                 
                 	.CSEG
                 _delay_ms:
000477 9610      	adiw r26,0
000478 f039      	breq __delay_ms1
                 __delay_ms0:
000479 95a8      	wdr
                +
00047a e888     +LDI R24 , LOW ( 0x1388 )
00047b e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
00047c 9701     +SBIW R24 , 1
00047d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
00047e 9711      	sbiw r26,1
00047f f7c9      	brne __delay_ms0
                 __delay_ms1:
000480 9508      	ret
                 
                 _frexp:
000481 91e9      	LD   R30,Y+
000482 91f9      	LD   R31,Y+
000483 9169      	LD   R22,Y+
000484 9179      	LD   R23,Y+
000485 fb77      	BST  R23,7
000486 0f66      	LSL  R22
000487 1f77      	ROL  R23
000488 2788      	CLR  R24
000489 577e      	SUBI R23,0x7E
00048a 0b88      	SBC  R24,R24
00048b 937d      	ST   X+,R23
00048c 938c      	ST   X,R24
00048d e77e      	LDI  R23,0x7E
00048e 9576      	LSR  R23
00048f 9567      	ROR  R22
000490 f06e      	BRTS __ANEGF1
000491 9508      	RET
                 
                 _ldexp:
000492 91e9      	LD   R30,Y+
000493 91f9      	LD   R31,Y+
000494 9169      	LD   R22,Y+
000495 9179      	LD   R23,Y+
000496 fb77      	BST  R23,7
000497 0f66      	LSL  R22
000498 1f77      	ROL  R23
000499 0f7a      	ADD  R23,R26
00049a 9576      	LSR  R23
00049b 9567      	ROR  R22
00049c f00e      	BRTS __ANEGF1
00049d 9508      	RET
                 
                 __ANEGF1:
00049e 9730      	SBIW R30,0
00049f 4060      	SBCI R22,0
0004a0 4070      	SBCI R23,0
0004a1 f009      	BREQ __ANEGF10
0004a2 5870      	SUBI R23,0x80
                 __ANEGF10:
0004a3 9508      	RET
                 
                 __ROUND_REPACK:
0004a4 2355      	TST  R21
0004a5 f442      	BRPL __REPACK
0004a6 3850      	CPI  R21,0x80
0004a7 f411      	BRNE __ROUND_REPACK0
0004a8 ffe0      	SBRS R30,0
0004a9 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0004aa 9631      	ADIW R30,1
0004ab 1f69      	ADC  R22,R25
0004ac 1f79      	ADC  R23,R25
0004ad f06b      	BRVS __REPACK1
                 
                 __REPACK:
0004ae e850      	LDI  R21,0x80
0004af 2757      	EOR  R21,R23
0004b0 f411      	BRNE __REPACK0
0004b1 935f      	PUSH R21
0004b2 c0cf      	RJMP __ZERORES
                 __REPACK0:
0004b3 3f5f      	CPI  R21,0xFF
0004b4 f031      	BREQ __REPACK1
0004b5 0f66      	LSL  R22
0004b6 0c00      	LSL  R0
0004b7 9557      	ROR  R21
0004b8 9567      	ROR  R22
0004b9 2f75      	MOV  R23,R21
0004ba 9508      	RET
                 __REPACK1:
0004bb 935f      	PUSH R21
0004bc 2000      	TST  R0
0004bd f00a      	BRMI __REPACK2
0004be c0cf      	RJMP __MAXRES
                 __REPACK2:
0004bf c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0004c0 e850      	LDI  R21,0x80
0004c1 2e19      	MOV  R1,R25
0004c2 2215      	AND  R1,R21
0004c3 0f88      	LSL  R24
0004c4 1f99      	ROL  R25
0004c5 2795      	EOR  R25,R21
0004c6 0f55      	LSL  R21
0004c7 9587      	ROR  R24
                 
                 __UNPACK1:
0004c8 e850      	LDI  R21,0x80
0004c9 2e07      	MOV  R0,R23
0004ca 2205      	AND  R0,R21
0004cb 0f66      	LSL  R22
0004cc 1f77      	ROL  R23
0004cd 2775      	EOR  R23,R21
0004ce 0f55      	LSL  R21
0004cf 9567      	ROR  R22
0004d0 9508      	RET
                 
                 __CFD1U:
0004d1 9468      	SET
0004d2 c001      	RJMP __CFD1U0
                 __CFD1:
0004d3 94e8      	CLT
                 __CFD1U0:
0004d4 935f      	PUSH R21
0004d5 dff2      	RCALL __UNPACK1
0004d6 3870      	CPI  R23,0x80
0004d7 f018      	BRLO __CFD10
0004d8 3f7f      	CPI  R23,0xFF
0004d9 f408      	BRCC __CFD10
0004da c0a7      	RJMP __ZERORES
                 __CFD10:
0004db e156      	LDI  R21,22
0004dc 1b57      	SUB  R21,R23
0004dd f4aa      	BRPL __CFD11
0004de 9551      	NEG  R21
0004df 3058      	CPI  R21,8
0004e0 f40e      	BRTC __CFD19
0004e1 3059      	CPI  R21,9
                 __CFD19:
0004e2 f030      	BRLO __CFD17
0004e3 efef      	SER  R30
0004e4 efff      	SER  R31
0004e5 ef6f      	SER  R22
0004e6 e77f      	LDI  R23,0x7F
0004e7 f977      	BLD  R23,7
0004e8 c01a      	RJMP __CFD15
                 __CFD17:
0004e9 2777      	CLR  R23
0004ea 2355      	TST  R21
0004eb f0b9      	BREQ __CFD15
                 __CFD18:
0004ec 0fee      	LSL  R30
0004ed 1fff      	ROL  R31
0004ee 1f66      	ROL  R22
0004ef 1f77      	ROL  R23
0004f0 955a      	DEC  R21
0004f1 f7d1      	BRNE __CFD18
0004f2 c010      	RJMP __CFD15
                 __CFD11:
0004f3 2777      	CLR  R23
                 __CFD12:
0004f4 3058      	CPI  R21,8
0004f5 f028      	BRLO __CFD13
0004f6 2fef      	MOV  R30,R31
0004f7 2ff6      	MOV  R31,R22
0004f8 2f67      	MOV  R22,R23
0004f9 5058      	SUBI R21,8
0004fa cff9      	RJMP __CFD12
                 __CFD13:
0004fb 2355      	TST  R21
0004fc f031      	BREQ __CFD15
                 __CFD14:
0004fd 9576      	LSR  R23
0004fe 9567      	ROR  R22
0004ff 95f7      	ROR  R31
000500 95e7      	ROR  R30
000501 955a      	DEC  R21
000502 f7d1      	BRNE __CFD14
                 __CFD15:
000503 2000      	TST  R0
000504 f40a      	BRPL __CFD16
000505 d141      	RCALL __ANEGD1
                 __CFD16:
000506 915f      	POP  R21
000507 9508      	RET
                 
                 __CDF1U:
000508 9468      	SET
000509 c001      	RJMP __CDF1U0
                 __CDF1:
00050a 94e8      	CLT
                 __CDF1U0:
00050b 9730      	SBIW R30,0
00050c 4060      	SBCI R22,0
00050d 4070      	SBCI R23,0
00050e f0b1      	BREQ __CDF10
00050f 2400      	CLR  R0
000510 f026      	BRTS __CDF11
000511 2377      	TST  R23
000512 f412      	BRPL __CDF11
000513 9400      	COM  R0
000514 d132      	RCALL __ANEGD1
                 __CDF11:
000515 2e17      	MOV  R1,R23
000516 e17e      	LDI  R23,30
000517 2011      	TST  R1
                 __CDF12:
000518 f032      	BRMI __CDF13
000519 957a      	DEC  R23
00051a 0fee      	LSL  R30
00051b 1fff      	ROL  R31
00051c 1f66      	ROL  R22
00051d 1c11      	ROL  R1
00051e cff9      	RJMP __CDF12
                 __CDF13:
00051f 2fef      	MOV  R30,R31
000520 2ff6      	MOV  R31,R22
000521 2d61      	MOV  R22,R1
000522 935f      	PUSH R21
000523 df8a      	RCALL __REPACK
000524 915f      	POP  R21
                 __CDF10:
000525 9508      	RET
                 
                 __SWAPACC:
000526 934f      	PUSH R20
000527 01af      	MOVW R20,R30
000528 01fd      	MOVW R30,R26
000529 01da      	MOVW R26,R20
00052a 01ab      	MOVW R20,R22
00052b 01bc      	MOVW R22,R24
00052c 01ca      	MOVW R24,R20
00052d 2d40      	MOV  R20,R0
00052e 2c01      	MOV  R0,R1
00052f 2e14      	MOV  R1,R20
000530 914f      	POP  R20
000531 9508      	RET
                 
                 __UADD12:
000532 0fea      	ADD  R30,R26
000533 1ffb      	ADC  R31,R27
000534 1f68      	ADC  R22,R24
000535 9508      	RET
                 
                 __NEGMAN1:
000536 95e0      	COM  R30
000537 95f0      	COM  R31
000538 9560      	COM  R22
000539 5fef      	SUBI R30,-1
00053a 4fff      	SBCI R31,-1
00053b 4f6f      	SBCI R22,-1
00053c 9508      	RET
                 
                 __SUBF12:
00053d 935f      	PUSH R21
00053e df81      	RCALL __UNPACK
00053f 3890      	CPI  R25,0x80
000540 f171      	BREQ __ADDF129
000541 e850      	LDI  R21,0x80
000542 2615      	EOR  R1,R21
                 
000543 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000544 935f      	PUSH R21
000545 df7a      	RCALL __UNPACK
000546 3890      	CPI  R25,0x80
000547 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000548 3870      	CPI  R23,0x80
000549 f121      	BREQ __ADDF128
                 __ADDF121:
00054a 2f57      	MOV  R21,R23
00054b 1b59      	SUB  R21,R25
00054c f12b      	BRVS __ADDF1211
00054d f412      	BRPL __ADDF122
00054e dfd7      	RCALL __SWAPACC
00054f cffa      	RJMP __ADDF121
                 __ADDF122:
000550 3158      	CPI  R21,24
000551 f018      	BRLO __ADDF123
000552 27aa      	CLR  R26
000553 27bb      	CLR  R27
000554 2788      	CLR  R24
                 __ADDF123:
000555 3058      	CPI  R21,8
000556 f028      	BRLO __ADDF124
000557 2fab      	MOV  R26,R27
000558 2fb8      	MOV  R27,R24
000559 2788      	CLR  R24
00055a 5058      	SUBI R21,8
00055b cff9      	RJMP __ADDF123
                 __ADDF124:
00055c 2355      	TST  R21
00055d f029      	BREQ __ADDF126
                 __ADDF125:
00055e 9586      	LSR  R24
00055f 95b7      	ROR  R27
000560 95a7      	ROR  R26
000561 955a      	DEC  R21
000562 f7d9      	BRNE __ADDF125
                 __ADDF126:
000563 2d50      	MOV  R21,R0
000564 2551      	EOR  R21,R1
000565 f072      	BRMI __ADDF127
000566 dfcb      	RCALL __UADD12
000567 f438      	BRCC __ADDF129
000568 9567      	ROR  R22
000569 95f7      	ROR  R31
00056a 95e7      	ROR  R30
00056b 9573      	INC  R23
00056c f413      	BRVC __ADDF129
00056d c020      	RJMP __MAXRES
                 __ADDF128:
00056e dfb7      	RCALL __SWAPACC
                 __ADDF129:
00056f df3e      	RCALL __REPACK
000570 915f      	POP  R21
000571 9508      	RET
                 __ADDF1211:
000572 f7d8      	BRCC __ADDF128
000573 cffb      	RJMP __ADDF129
                 __ADDF127:
000574 1bea      	SUB  R30,R26
000575 0bfb      	SBC  R31,R27
000576 0b68      	SBC  R22,R24
000577 f051      	BREQ __ZERORES
000578 f410      	BRCC __ADDF1210
000579 9400      	COM  R0
00057a dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00057b 2366      	TST  R22
00057c f392      	BRMI __ADDF129
00057d 0fee      	LSL  R30
00057e 1fff      	ROL  R31
00057f 1f66      	ROL  R22
000580 957a      	DEC  R23
000581 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000582 27ee      	CLR  R30
000583 27ff      	CLR  R31
000584 2766      	CLR  R22
000585 2777      	CLR  R23
000586 915f      	POP  R21
000587 9508      	RET
                 
                 __MINRES:
000588 efef      	SER  R30
000589 efff      	SER  R31
00058a e76f      	LDI  R22,0x7F
00058b ef7f      	SER  R23
00058c 915f      	POP  R21
00058d 9508      	RET
                 
                 __MAXRES:
00058e efef      	SER  R30
00058f efff      	SER  R31
000590 e76f      	LDI  R22,0x7F
000591 e77f      	LDI  R23,0x7F
000592 915f      	POP  R21
000593 9508      	RET
                 
                 __MULF12:
000594 935f      	PUSH R21
000595 df2a      	RCALL __UNPACK
000596 3870      	CPI  R23,0x80
000597 f351      	BREQ __ZERORES
000598 3890      	CPI  R25,0x80
000599 f341      	BREQ __ZERORES
00059a 2401      	EOR  R0,R1
00059b 9408      	SEC
00059c 1f79      	ADC  R23,R25
00059d f423      	BRVC __MULF124
00059e f31c      	BRLT __ZERORES
                 __MULF125:
00059f 2000      	TST  R0
0005a0 f33a      	BRMI __MINRES
0005a1 cfec      	RJMP __MAXRES
                 __MULF124:
0005a2 920f      	PUSH R0
0005a3 931f      	PUSH R17
0005a4 932f      	PUSH R18
0005a5 933f      	PUSH R19
0005a6 934f      	PUSH R20
0005a7 2711      	CLR  R17
0005a8 2722      	CLR  R18
0005a9 2799      	CLR  R25
0005aa 9f68      	MUL  R22,R24
0005ab 01a0      	MOVW R20,R0
0005ac 9f8f      	MUL  R24,R31
0005ad 2d30      	MOV  R19,R0
0005ae 0d41      	ADD  R20,R1
0005af 1f59      	ADC  R21,R25
0005b0 9f6b      	MUL  R22,R27
0005b1 0d30      	ADD  R19,R0
0005b2 1d41      	ADC  R20,R1
0005b3 1f59      	ADC  R21,R25
0005b4 9f8e      	MUL  R24,R30
0005b5 d027      	RCALL __MULF126
0005b6 9fbf      	MUL  R27,R31
0005b7 d025      	RCALL __MULF126
0005b8 9f6a      	MUL  R22,R26
0005b9 d023      	RCALL __MULF126
0005ba 9fbe      	MUL  R27,R30
0005bb d01d      	RCALL __MULF127
0005bc 9faf      	MUL  R26,R31
0005bd d01b      	RCALL __MULF127
0005be 9fae      	MUL  R26,R30
0005bf 0d11      	ADD  R17,R1
0005c0 1f29      	ADC  R18,R25
0005c1 1f39      	ADC  R19,R25
0005c2 1f49      	ADC  R20,R25
0005c3 1f59      	ADC  R21,R25
0005c4 2fe3      	MOV  R30,R19
0005c5 2ff4      	MOV  R31,R20
0005c6 2f65      	MOV  R22,R21
0005c7 2f52      	MOV  R21,R18
0005c8 914f      	POP  R20
0005c9 913f      	POP  R19
0005ca 912f      	POP  R18
0005cb 911f      	POP  R17
0005cc 900f      	POP  R0
0005cd 2366      	TST  R22
0005ce f02a      	BRMI __MULF122
0005cf 0f55      	LSL  R21
0005d0 1fee      	ROL  R30
0005d1 1fff      	ROL  R31
0005d2 1f66      	ROL  R22
0005d3 c002      	RJMP __MULF123
                 __MULF122:
0005d4 9573      	INC  R23
0005d5 f24b      	BRVS __MULF125
                 __MULF123:
0005d6 decd      	RCALL __ROUND_REPACK
0005d7 915f      	POP  R21
0005d8 9508      	RET
                 
                 __MULF127:
0005d9 0d10      	ADD  R17,R0
0005da 1d21      	ADC  R18,R1
0005db 1f39      	ADC  R19,R25
0005dc c002      	RJMP __MULF128
                 __MULF126:
0005dd 0d20      	ADD  R18,R0
0005de 1d31      	ADC  R19,R1
                 __MULF128:
0005df 1f49      	ADC  R20,R25
0005e0 1f59      	ADC  R21,R25
0005e1 9508      	RET
                 
                 __DIVF21:
0005e2 935f      	PUSH R21
0005e3 dedc      	RCALL __UNPACK
0005e4 3870      	CPI  R23,0x80
0005e5 f421      	BRNE __DIVF210
0005e6 2011      	TST  R1
                 __DIVF211:
0005e7 f40a      	BRPL __DIVF219
0005e8 cf9f      	RJMP __MINRES
                 __DIVF219:
0005e9 cfa4      	RJMP __MAXRES
                 __DIVF210:
0005ea 3890      	CPI  R25,0x80
0005eb f409      	BRNE __DIVF218
                 __DIVF217:
0005ec cf95      	RJMP __ZERORES
                 __DIVF218:
0005ed 2401      	EOR  R0,R1
0005ee 9408      	SEC
0005ef 0b97      	SBC  R25,R23
0005f0 f41b      	BRVC __DIVF216
0005f1 f3d4      	BRLT __DIVF217
0005f2 2000      	TST  R0
0005f3 cff3      	RJMP __DIVF211
                 __DIVF216:
0005f4 2f79      	MOV  R23,R25
0005f5 931f      	PUSH R17
0005f6 932f      	PUSH R18
0005f7 933f      	PUSH R19
0005f8 934f      	PUSH R20
0005f9 2411      	CLR  R1
0005fa 2711      	CLR  R17
0005fb 2722      	CLR  R18
0005fc 2733      	CLR  R19
0005fd 2744      	CLR  R20
0005fe 2755      	CLR  R21
0005ff e290      	LDI  R25,32
                 __DIVF212:
000600 17ae      	CP   R26,R30
000601 07bf      	CPC  R27,R31
000602 0786      	CPC  R24,R22
000603 0741      	CPC  R20,R17
000604 f030      	BRLO __DIVF213
000605 1bae      	SUB  R26,R30
000606 0bbf      	SBC  R27,R31
000607 0b86      	SBC  R24,R22
000608 0b41      	SBC  R20,R17
000609 9408      	SEC
00060a c001      	RJMP __DIVF214
                 __DIVF213:
00060b 9488      	CLC
                 __DIVF214:
00060c 1f55      	ROL  R21
00060d 1f22      	ROL  R18
00060e 1f33      	ROL  R19
00060f 1c11      	ROL  R1
000610 1faa      	ROL  R26
000611 1fbb      	ROL  R27
000612 1f88      	ROL  R24
000613 1f44      	ROL  R20
000614 959a      	DEC  R25
000615 f751      	BRNE __DIVF212
000616 01f9      	MOVW R30,R18
000617 2d61      	MOV  R22,R1
000618 914f      	POP  R20
000619 913f      	POP  R19
00061a 912f      	POP  R18
00061b 911f      	POP  R17
00061c 2366      	TST  R22
00061d f032      	BRMI __DIVF215
00061e 0f55      	LSL  R21
00061f 1fee      	ROL  R30
000620 1fff      	ROL  R31
000621 1f66      	ROL  R22
000622 957a      	DEC  R23
000623 f243      	BRVS __DIVF217
                 __DIVF215:
000624 de7f      	RCALL __ROUND_REPACK
000625 915f      	POP  R21
000626 9508      	RET
                 
                 __CMPF12:
000627 2399      	TST  R25
000628 f09a      	BRMI __CMPF120
000629 2377      	TST  R23
00062a f042      	BRMI __CMPF121
00062b 1797      	CP   R25,R23
00062c f048      	BRLO __CMPF122
00062d f429      	BRNE __CMPF121
00062e 17ae      	CP   R26,R30
00062f 07bf      	CPC  R27,R31
000630 0786      	CPC  R24,R22
000631 f020      	BRLO __CMPF122
000632 f031      	BREQ __CMPF123
                 __CMPF121:
000633 9498      	CLZ
000634 9488      	CLC
000635 9508      	RET
                 __CMPF122:
000636 9498      	CLZ
000637 9408      	SEC
000638 9508      	RET
                 __CMPF123:
000639 9418      	SEZ
00063a 9488      	CLC
00063b 9508      	RET
                 __CMPF120:
00063c 2377      	TST  R23
00063d f7c2      	BRPL __CMPF122
00063e 1797      	CP   R25,R23
00063f f398      	BRLO __CMPF121
000640 f7a9      	BRNE __CMPF122
000641 17ea      	CP   R30,R26
000642 07fb      	CPC  R31,R27
000643 0768      	CPC  R22,R24
000644 f388      	BRLO __CMPF122
000645 f399      	BREQ __CMPF123
000646 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
000647 95f0      	COM  R31
000648 9560      	COM  R22
000649 9570      	COM  R23
00064a 95e1      	NEG  R30
00064b 4fff      	SBCI R31,-1
00064c 4f6f      	SBCI R22,-1
00064d 4f7f      	SBCI R23,-1
00064e 9508      	RET
                 
                 __LSLW2:
00064f 0fee      	LSL  R30
000650 1fff      	ROL  R31
000651 0fee      	LSL  R30
000652 1fff      	ROL  R31
000653 9508      	RET
                 
                 __CWD1:
000654 2f6f      	MOV  R22,R31
000655 0f66      	ADD  R22,R22
000656 0b66      	SBC  R22,R22
000657 2f76      	MOV  R23,R22
000658 9508      	RET
                 
                 __GETD1P:
000659 91ed      	LD   R30,X+
00065a 91fd      	LD   R31,X+
00065b 916d      	LD   R22,X+
00065c 917c      	LD   R23,X
00065d 9713      	SBIW R26,3
00065e 9508      	RET
                 
                 __PUTDP1:
00065f 93ed      	ST   X+,R30
000660 93fd      	ST   X+,R31
000661 936d      	ST   X+,R22
000662 937c      	ST   X,R23
000663 9508      	RET
                 
                 __GETD1S0:
000664 81e8      	LD   R30,Y
000665 81f9      	LDD  R31,Y+1
000666 816a      	LDD  R22,Y+2
000667 817b      	LDD  R23,Y+3
000668 9508      	RET
                 
                 __GETD2S0:
000669 81a8      	LD   R26,Y
00066a 81b9      	LDD  R27,Y+1
00066b 818a      	LDD  R24,Y+2
00066c 819b      	LDD  R25,Y+3
00066d 9508      	RET
                 
                 __PUTD1S0:
00066e 83e8      	ST   Y,R30
00066f 83f9      	STD  Y+1,R31
000670 836a      	STD  Y+2,R22
000671 837b      	STD  Y+3,R23
000672 9508      	RET
                 
                 __PUTPARD1:
000673 937a      	ST   -Y,R23
000674 936a      	ST   -Y,R22
000675 93fa      	ST   -Y,R31
000676 93ea      	ST   -Y,R30
000677 9508      	RET
                 
                 __PUTPARD2:
000678 939a      	ST   -Y,R25
000679 938a      	ST   -Y,R24
00067a 93ba      	ST   -Y,R27
00067b 93aa      	ST   -Y,R26
00067c 9508      	RET
                 
                 __SWAPD12:
00067d 2e18      	MOV  R1,R24
00067e 2f86      	MOV  R24,R22
00067f 2d61      	MOV  R22,R1
000680 2e19      	MOV  R1,R25
000681 2f97      	MOV  R25,R23
000682 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000683 2e1b      	MOV  R1,R27
000684 2fbf      	MOV  R27,R31
000685 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000686 2e1a      	MOV  R1,R26
000687 2fae      	MOV  R26,R30
000688 2de1      	MOV  R30,R1
000689 9508      	RET
                 
                 __CPD10:
00068a 9730      	SBIW R30,0
00068b 4060      	SBCI R22,0
00068c 4070      	SBCI R23,0
00068d 9508      	RET
                 
                 __CPD02:
00068e 2400      	CLR  R0
00068f 160a      	CP   R0,R26
000690 060b      	CPC  R0,R27
000691 0608      	CPC  R0,R24
000692 0609      	CPC  R0,R25
000693 9508      	RET
                 
                 __CPD12:
000694 17ea      	CP   R30,R26
000695 07fb      	CPC  R31,R27
000696 0768      	CPC  R22,R24
000697 0779      	CPC  R23,R25
000698 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000699 0fac      	ADD  R26,R28
00069a 1fbd      	ADC  R27,R29
                 __INITLOC0:
00069b 9005      	LPM  R0,Z+
00069c 920d      	ST   X+,R0
00069d 958a      	DEC  R24
00069e f7e1      	BRNE __INITLOC0
00069f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  35 r1 :  30 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  10 r17:  35 r18:  18 r19:  17 r20:  28 r21:  68 r22: 111 r23: 109 
r24:  75 r25:  71 r26: 103 r27:  82 r28:  15 r29:   2 r30: 258 r31:  98 
x  :  15 y  : 175 z  :   9 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  12 
adiw  :  10 and   :   5 andi  :  24 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   1 brbs  :   0 brcc  :   6 brcs  :   1 break :   0 breq  :  20 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   5 brmi  :   9 brne  :  23 brpl  :   9 brsh  :   6 brtc  :   2 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 149 
cbi   :   1 cbr   :   2 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  31 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :   8 cpc   :  18 cpi   :  24 cpse  :   0 dec   :  10 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  25 inc   :   2 jmp   :  27 ld    :  21 ldd   :  90 ldi   : 203 
lds   :   8 lpm   :   8 lsl   :  16 lsr   :   5 mov   :  43 movw  :  29 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  21 pop   :  36 push  :  36 rcall :  28 ret   :  63 
reti  :   0 rjmp  :  47 rol   :  28 ror   :  17 sbc   :  10 sbci  :  14 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :  15 sbr   :   2 sbrc  :   1 
sbrs  :   1 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  26 std   :  54 sts   :  36 sub   :   6 subi  :  12 swap  :   0 
tst   :  20 wdr   :   2 
Instructions used: 77 out of 116 (66.4%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d40   3312     80   3392   32768  10.4%
[.dseg] 0x000100 0x000314      0     20     20    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
