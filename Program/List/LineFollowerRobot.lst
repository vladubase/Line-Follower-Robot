
AVRASM ver. 2.1.30  D:\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm Wed Jul 08 22:20:17 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 20,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x3:
000034 0000
000035 0000
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000038 0000
000039 0000
00003a 0000
00003b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003c 0000
00003d 0000
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000040 0000
000041 0000
000042 0000
000043 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000044 0000
000045 0000
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000048 0000
000049 0000
00004a 0000
00004b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004c 0000
00004d 0000
00004e 0000
00004f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x2020060:
D:\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm(1136): warning: .cseg .db misalignment - padding zero byte
000052 0001      	.DB  0x1
                 _0x2020000:
000053 4e2d
000054 4e41
000055 4900
000056 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Documents\!Projects\LineFollowerRobot\Program\List\LineFollowerRobot.asm(1139): warning: .cseg .db misalignment - padding zero byte
000057 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000058 0001      	.DW  0x01
000059 0304      	.DW  __seed_G101
00005a 00a4      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00005b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005c 94f8      	CLI
00005d 27ee      	CLR  R30
00005e bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005f e0f1      	LDI  R31,1
000060 bff5      	OUT  MCUCR,R31
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000062 e1f8      	LDI  R31,0x18
000063 95a8      	WDR
000064 b7a4      	IN   R26,MCUSR
000065 7fa7      	CBR  R26,8
000066 bfa4      	OUT  MCUSR,R26
000067 93f0 0060 	STS  WDTCSR,R31
000069 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
00006b e08d      	LDI  R24,(14-2)+1
00006c e0a2      	LDI  R26,2
00006d 27bb      	CLR  R27
                 __CLEAR_REG:
00006e 93ed      	ST   X+,R30
00006f 958a      	DEC  R24
000070 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000071 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000072 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000073 e0a0      	LDI  R26,LOW(__SRAM_START)
000074 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000075 93ed      	ST   X+,R30
000076 9701      	SBIW R24,1
000077 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000078 ebe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000079 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007a 9185      	LPM  R24,Z+
00007b 9195      	LPM  R25,Z+
00007c 9700      	SBIW R24,0
00007d f061      	BREQ __GLOBAL_INI_END
00007e 91a5      	LPM  R26,Z+
00007f 91b5      	LPM  R27,Z+
000080 9005      	LPM  R0,Z+
000081 9015      	LPM  R1,Z+
000082 01bf      	MOVW R22,R30
000083 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000084 9005      	LPM  R0,Z+
000085 920d      	ST   X+,R0
000086 9701      	SBIW R24,1
000087 f7e1      	BRNE __GLOBAL_INI_LOOP
000088 01fb      	MOVW R30,R22
000089 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00008a e0e0      	LDI  R30,__GPIOR0_INIT
00008b bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008d bfed      	OUT  SPL,R30
00008e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000090 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000091 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000092 940c 0094 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*
                 ;*	Line Follower Robot
                 ;*	LineFollowerRobot.c
                 ;*
                 ;*	by Uladzislau 'vladubase' Dubatouka <vladubase@gmail.com>.
                 ;*	Created on 2020.05.12.
                 ;*
                 ;*   4.25 ms for main cycle (not counting MAIN_CYCLE_DELAY) with 4 sensors
                 ;*   6 ms for main cycle (not counting MAIN_CYCLE_DELAY) with 15 sensors
                 ;*
                 ;*/
                 ;
                 ;/**************************** Includes ****************************/
                 ;
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <mega328p_bits.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <stdbool.h>
                 ;#include <stdint.h>
                 ;
                 ;/***************************** Defines ****************************/
                 ;
                 ;#define		F_CPU					20000000UL		// Quartz resonator clock frequency
                 ;
                 ;#define		QTY_OF_SENSORS			4				// Quantity of sensors
                 ;#define		AVG_SPEED				155				// Average speed of robot
                 ;
                 ;#define		MOTORS_NOT_PERFECT		false			// Do the motors have different real parameters (e.g. Speed, Torque, etc.)?
                 ;#if MOTORS_NOT_PERFECT
                 ;	#define	L_MOTOR_MISMATCH		1.05F			// Coefficient of motor power difference
                 ;	#define	R_MOTOR_MISMATCH		1.0F			// There is nothing perfect ;)
                 ;#endif /* MOTORS_NOT_PERFECT */
                 ;
                 ;// PID
                 ;// Setup: P -> PD -> PID
                 ;#define		kP						5.0F			// Proportional	feedback coefficient
                 ;#define		kI						0.0F			// Integral 	feedback coefficient
                 ;#define		kD						0.0F			// Differential	feedback coefficient
                 ;#define		QTY_OF_ERR				10				// Quantity of errors in memory during last (QTY_OF_ERR * MAIN_CYCLE_DELAY) ms
                 ;#define		MAIN_CYCLE_DELAY		2				// The main cycle delay (in ms) for correct work of D-regulation
                 ;
                 ;// Sensor order in the right --> direction
                 ;
                 ;#if QTY_OF_SENSORS >= 1
                 ;    #define	READ_SENSOR_1			PINB & (1 << DDB2)
                 ;#endif /* QTY_OF_SENSORS >= 1 */
                 ;#if QTY_OF_SENSORS >= 2
                 ;    #define	READ_SENSOR_2			PINB & (1 << DDB1)
                 ;#endif /* QTY_OF_SENSORS >= 2 */
                 ;#if QTY_OF_SENSORS >= 3
                 ;    #define	READ_SENSOR_3			PINB & (1 << DDB0)
                 ;#endif /* QTY_OF_SENSORS >= 3 */
                 ;#if QTY_OF_SENSORS >= 4
                 ;    #define	READ_SENSOR_4			PIND & (1 << DDD7)
                 ;#endif /* QTY_OF_SENSORS >= 4 */
                 ;#if QTY_OF_SENSORS >= 5
                 ;    #define	READ_SENSOR_5			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 5 */
                 ;#if QTY_OF_SENSORS >= 6
                 ;    #define	READ_SENSOR_6			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 6 */
                 ;#if QTY_OF_SENSORS >= 7
                 ;    #define	READ_SENSOR_7			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 7 */
                 ;#if QTY_OF_SENSORS >= 8
                 ;    #define	READ_SENSOR_8			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 8 */
                 ;#if QTY_OF_SENSORS >= 9
                 ;    #define	READ_SENSOR_9			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 9 */
                 ;#if QTY_OF_SENSORS >= 10
                 ;    #define	READ_SENSOR_10			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 10 */
                 ;#if QTY_OF_SENSORS >= 11
                 ;    #define	READ_SENSOR_11			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 11 */
                 ;#if QTY_OF_SENSORS >= 12
                 ;    #define	READ_SENSOR_12			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 12 */
                 ;#if QTY_OF_SENSORS >= 13
                 ;    #define	READ_SENSOR_13			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 13 */
                 ;#if QTY_OF_SENSORS >= 14
                 ;    #define	READ_SENSOR_14			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 14 */
                 ;#if QTY_OF_SENSORS >= 15
                 ;    #define	READ_SENSOR_15			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 15 */
                 ;#if QTY_OF_SENSORS >= 16
                 ;    #define	READ_SENSOR_16			PINx & (1 << DDxx)
                 ;#endif /* QTY_OF_SENSORS >= 16 */
                 ;
                 ;//#define		READ_IR_SENSOR          PINx & (1 << DDxx)
                 ;
                 ;/************************* Global Variables ***********************/
                 ;
                 ;bool line_data[QTY_OF_SENSORS] = {0};				// Store current values from sensor line
                 ;
                 ;/*********************** Function  prototypes *********************/
                 ;
                 ;void InitSys (void);
                 ;void ReadSensorLineData (void);
                 ;float CurrentRobotError (void);
                 ;
                 ;/****************************** Main ******************************/
                 ;
                 ;void main (void) {
                 ; 0000 006C void main (void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 006D 	register float error_history[QTY_OF_ERR] = {0};	// Storing the values of recent errors
                 ; 0000 006E 	register float error_sum = 0.0;					// Sum of errors in history
                 ; 0000 006F 	register uint8_t i = 0;
                 ; 0000 0070 	register float P = 0.0;
                 ; 0000 0071 	register float I = 0.0;
                 ; 0000 0072 	register float D = 0.0;
                 ; 0000 0073 	register float PID_total_correction = 0.0;
                 ; 0000 0074 	register int16_t left_motor_speed = 0;
                 ; 0000 0075 	register int16_t right_motor_speed = 0;
                 ; 0000 0076 
                 ; 0000 0077 	InitSys ();
000094 97ec      	SBIW R28,60
000095 e38c      	LDI  R24,60
000096 e0a0      	LDI  R26,LOW(0)
000097 e0b0      	LDI  R27,HIGH(0)
000098 e6e8      	LDI  R30,LOW(_0x3*2)
000099 e0f0      	LDI  R31,HIGH(_0x3*2)
00009a 940e 063e 	CALL __INITLOCB
                 ;	error_history -> Y+20
                 ;	error_sum -> Y+16
                 ;	i -> R17
                 ;	P -> Y+12
                 ;	I -> Y+8
                 ;	D -> Y+4
                 ;	PID_total_correction -> Y+0
                 ;	left_motor_speed -> R18,R19
                 ;	right_motor_speed -> R20,R21
00009c e010      	LDI  R17,0
                +
00009d e020     +LDI R18 , LOW ( 0 )
00009e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00009f e040     +LDI R20 , LOW ( 0 )
0000a0 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0000a1 d0a2      	RCALL _InitSys
                 ; 0000 0078 
                 ; 0000 0079 	// Waiting for a signal on IR sensor
                 ; 0000 007A 	#ifdef READ_IR_SENSOR
                 ; 0000 007B 		while (READ_IR_SENSOR) {
                 ; 0000 007C 			LED_1_ON;
                 ; 0000 007D 			delay_ms (25);
                 ; 0000 007E 			LED_1_OFF;
                 ; 0000 007F 			delay_ms (25);
                 ; 0000 0080 		}
                 ; 0000 0081 	#endif /* SensorIR */
                 ; 0000 0082 
                 ; 0000 0083 	//delay_ms (5000);								// This delay is required by the competition rules
                 ; 0000 0084 
                 ; 0000 0085 	while (true) {
                 _0x4:
                 ; 0000 0086 		error_sum = 0.0;
0000a2 e0e0      	LDI  R30,LOW(0)
                +
0000a3 8be8     +STD Y + 16 , R30
0000a4 8be9     +STD Y + 16 + 1 , R30
0000a5 8bea     +STD Y + 16 + 2 , R30
0000a6 8beb     +STD Y + 16 + 3 , R30
                 	__CLRD1S 16
                 ; 0000 0087 
                 ; 0000 0088 		for (i = 0; i < QTY_OF_ERR - 1; i++) {	    // Shift error values
0000a7 e010      	LDI  R17,LOW(0)
                 _0x8:
0000a8 3019      	CPI  R17,9
0000a9 f4a8      	BRSH _0x9
                 ; 0000 0089 			error_history[i] = error_history[i + 1];
0000aa 940e 03b0 	CALL SUBOPT_0x0
0000ac 0fea      	ADD  R30,R26
0000ad 1ffb      	ADC  R31,R27
0000ae 010f      	MOVW R0,R30
0000af 2fe1      	MOV  R30,R17
0000b0 e0f0      	LDI  R31,0
0000b1 9631      	ADIW R30,1
0000b2 01de      	MOVW R26,R28
0000b3 9654      	ADIW R26,20
0000b4 940e 05f4 	CALL __LSLW2
0000b6 0fae      	ADD  R26,R30
0000b7 1fbf      	ADC  R27,R31
0000b8 940e 05fe 	CALL __GETD1P
0000ba 01d0      	MOVW R26,R0
0000bb 940e 0604 	CALL __PUTDP1
                 ; 0000 008A 		}
0000bd 5f1f      	SUBI R17,-1
0000be cfe9      	RJMP _0x8
                 _0x9:
                 ; 0000 008B 		error_history[QTY_OF_ERR - 1] = CurrentRobotError ();
0000bf d104      	RCALL _CurrentRobotError
                +
0000c0 afe8     +STD Y + 56 , R30
0000c1 aff9     +STD Y + 56 + 1 , R31
0000c2 af6a     +STD Y + 56 + 2 , R22
0000c3 af7b     +STD Y + 56 + 3 , R23
                 	__PUTD1S 56
                 ; 0000 008C 
                 ; 0000 008D 		P = error_history[QTY_OF_ERR - 1] * kP;		// Current error * kP
                +
0000c4 ada8     +LDD R26 , Y + 56
0000c5 adb9     +LDD R27 , Y + 56 + 1
0000c6 ad8a     +LDD R24 , Y + 56 + 2
0000c7 ad9b     +LDD R25 , Y + 56 + 3
                 	__GETD2S 56
                +
0000c8 e0e0     +LDI R30 , LOW ( 0x40A00000 )
0000c9 e0f0     +LDI R31 , HIGH ( 0x40A00000 )
0000ca ea60     +LDI R22 , BYTE3 ( 0x40A00000 )
0000cb e470     +LDI R23 , BYTE4 ( 0x40A00000 )
                 	__GETD1N 0x40A00000
0000cc 940e 0539 	CALL __MULF12
                +
0000ce 87ec     +STD Y + 12 , R30
0000cf 87fd     +STD Y + 12 + 1 , R31
0000d0 876e     +STD Y + 12 + 2 , R22
0000d1 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ; 0000 008E 		for (i = 0; i < QTY_OF_ERR; i++) {
0000d2 e010      	LDI  R17,LOW(0)
                 _0xB:
0000d3 301a      	CPI  R17,10
0000d4 f490      	BRSH _0xC
                 ; 0000 008F 			error_sum += error_history[i];
0000d5 940e 03b0 	CALL SUBOPT_0x0
0000d7 0fae      	ADD  R26,R30
0000d8 1fbf      	ADC  R27,R31
0000d9 940e 05fe 	CALL __GETD1P
                +
0000db 89a8     +LDD R26 , Y + 16
0000dc 89b9     +LDD R27 , Y + 16 + 1
0000dd 898a     +LDD R24 , Y + 16 + 2
0000de 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0000df 940e 04e9 	CALL __ADDF12
                +
0000e1 8be8     +STD Y + 16 , R30
0000e2 8bf9     +STD Y + 16 + 1 , R31
0000e3 8b6a     +STD Y + 16 + 2 , R22
0000e4 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
                 ; 0000 0090 		}
0000e5 5f1f      	SUBI R17,-1
0000e6 cfec      	RJMP _0xB
                 _0xC:
                 ; 0000 0091 		I = error_sum / QTY_OF_ERR * kI;			// Average error * kI
                +
0000e7 89a8     +LDD R26 , Y + 16
0000e8 89b9     +LDD R27 , Y + 16 + 1
0000e9 898a     +LDD R24 , Y + 16 + 2
0000ea 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0000eb e0e0     +LDI R30 , LOW ( 0x41200000 )
0000ec e0f0     +LDI R31 , HIGH ( 0x41200000 )
0000ed e260     +LDI R22 , BYTE3 ( 0x41200000 )
0000ee e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0000ef 940e 0587 	CALL __DIVF21
0000f1 940e 03b7 	CALL SUBOPT_0x1
                +
0000f3 87e8     +STD Y + 8 , R30
0000f4 87f9     +STD Y + 8 + 1 , R31
0000f5 876a     +STD Y + 8 + 2 , R22
0000f6 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 0092 		D = (error_history[QTY_OF_ERR - 1] -        // (current error - previous error) * kD
                 ; 0000 0093             error_history[QTY_OF_ERR - 1 - 1]) * kD;
                +
0000f7 a9ac     +LDD R26 , Y + 52
0000f8 a9bd     +LDD R27 , Y + 52 + 1
0000f9 a98e     +LDD R24 , Y + 52 + 2
0000fa a99f     +LDD R25 , Y + 52 + 3
                 	__GETD2S 52
                +
0000fb ade8     +LDD R30 , Y + 56
0000fc adf9     +LDD R31 , Y + 56 + 1
0000fd ad6a     +LDD R22 , Y + 56 + 2
0000fe ad7b     +LDD R23 , Y + 56 + 3
                 	__GETD1S 56
0000ff 940e 04e2 	CALL __SUBF12
000101 940e 03b7 	CALL SUBOPT_0x1
                +
000103 83ec     +STD Y + 4 , R30
000104 83fd     +STD Y + 4 + 1 , R31
000105 836e     +STD Y + 4 + 2 , R22
000106 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 0094 
                 ; 0000 0095 		PID_total_correction = (P + I) + D;
000107 940e 03be 	CALL SUBOPT_0x2
                +
000109 85ac     +LDD R26 , Y + 12
00010a 85bd     +LDD R27 , Y + 12 + 1
00010b 858e     +LDD R24 , Y + 12 + 2
00010c 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
00010d 940e 04e9 	CALL __ADDF12
00010f 940e 03c3 	CALL SUBOPT_0x3
000111 940e 04e9 	CALL __ADDF12
000113 940e 0613 	CALL __PUTD1S0
                 ; 0000 0096 
                 ; 0000 0097 		left_motor_speed  = AVG_SPEED + (uint16_t)PID_total_correction;
000115 940e 03c8 	CALL SUBOPT_0x4
000117 56e5      	SUBI R30,LOW(-155)
000118 4fff      	SBCI R31,HIGH(-155)
000119 019f      	MOVW R18,R30
                 ; 0000 0098 		right_motor_speed = AVG_SPEED - (uint16_t)PID_total_correction;
00011a 940e 03c8 	CALL SUBOPT_0x4
00011c e9ab      	LDI  R26,LOW(155)
00011d e0b0      	LDI  R27,HIGH(155)
00011e 1bae      	SUB  R26,R30
00011f 0bbf      	SBC  R27,R31
000120 01ad      	MOVW R20,R26
                 ; 0000 0099 
                 ; 0000 009A 		// Validating a range of variables
                 ; 0000 009B 		if (left_motor_speed > 255)
                +
000121 3020     +CPI R18 , LOW ( 256 )
000122 e0e1     +LDI R30 , HIGH ( 256 )
000123 073e     +CPC R19 , R30
                 	__CPWRN 18,19,256
000124 f01c      	BRLT _0xD
                 ; 0000 009C 			left_motor_speed = 255;
                +
000125 ef2f     +LDI R18 , LOW ( 255 )
000126 e030     +LDI R19 , HIGH ( 255 )
                 	__GETWRN 18,19,255
                 ; 0000 009D 		else if (left_motor_speed < 0)
000127 c004      	RJMP _0xE
                 _0xD:
000128 2333      	TST  R19
000129 f412      	BRPL _0xF
                 ; 0000 009E 			left_motor_speed = 0;
                +
00012a e020     +LDI R18 , LOW ( 0 )
00012b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 009F 		if (right_motor_speed > 255)
                 _0xF:
                 _0xE:
                +
00012c 3040     +CPI R20 , LOW ( 256 )
00012d e0e1     +LDI R30 , HIGH ( 256 )
00012e 075e     +CPC R21 , R30
                 	__CPWRN 20,21,256
00012f f01c      	BRLT _0x10
                 ; 0000 00A0 			right_motor_speed = 255;
                +
000130 ef4f     +LDI R20 , LOW ( 255 )
000131 e050     +LDI R21 , HIGH ( 255 )
                 	__GETWRN 20,21,255
                 ; 0000 00A1 		else if (right_motor_speed < 0)
000132 c004      	RJMP _0x11
                 _0x10:
000133 2355      	TST  R21
000134 f412      	BRPL _0x12
                 ; 0000 00A2 			right_motor_speed = 0;
                +
000135 e040     +LDI R20 , LOW ( 0 )
000136 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 00A3 
                 ; 0000 00A4 		// Motors power difference compensation
                 ; 0000 00A5 		#if MOTORS_NOT_PERFECT
                 ; 0000 00A6 			if (L_MOTOR_MISMATCH >= R_MOTOR_MISMATCH) {
                 ; 0000 00A7 				OCR2A = 0;
                 ; 0000 00A8 				OCR2B = left_motor_speed;
                 ; 0000 00A9 				OCR0A = 0;
                 ; 0000 00AA 				OCR0B = right_motor_speed / L_MOTOR_MISMATCH;
                 ; 0000 00AB 			} else {
                 ; 0000 00AC 				OCR2A = 0;
                 ; 0000 00AD 				OCR2B = left_motor_speed / R_MOTOR_MISMATCH;
                 ; 0000 00AE 				OCR0A = 0;
                 ; 0000 00AF 				OCR0B = right_motor_speed;
                 ; 0000 00B0 			}
                 ; 0000 00B1 		#else
                 ; 0000 00B2 			OCR2A = 0;
                 _0x12:
                 _0x11:
000137 e0e0      	LDI  R30,LOW(0)
000138 93e0 00b3 	STS  179,R30
                 ; 0000 00B3 			OCR2B = left_motor_speed;
00013a 9320 00b4 	STS  180,R18
                 ; 0000 00B4 			OCR0A = 0;
00013c bde7      	OUT  0x27,R30
                 ; 0000 00B5 			OCR0B = right_motor_speed;
00013d bd48      	OUT  0x28,R20
                 ; 0000 00B6 		#endif /* MOTORS_NOT_PERFECT */
                 ; 0000 00B7 
                 ; 0000 00B8 		delay_ms (MAIN_CYCLE_DELAY);
00013e e0a2      	LDI  R26,LOW(2)
00013f e0b0      	LDI  R27,0
000140 940e 041c 	CALL _delay_ms
                 ; 0000 00B9 	}
000142 cf5f      	RJMP _0x4
                 ; 0000 00BA }
                 _0x13:
000143 cfff      	RJMP _0x13
                 ; .FEND
                 ;
                 ;/*************************** Functions ****************************/
                 ;
                 ;void InitSys (void) {
                 ; 0000 00BE void InitSys (void) {
                 _InitSys:
                 ; .FSTART _InitSys
                 ; 0000 00BF 	// Motors
                 ; 0000 00C0 	    // Output mode
                 ; 0000 00C1 		DDRB |= (1 << DDB3);			            // OC2A
000144 9a23      	SBI  0x4,3
                 ; 0000 00C2 		DDRD |= (1 << DDD6) |			            // OC0A
                 ; 0000 00C3 				(1 << DDD5) |			            // OC0B
                 ; 0000 00C4 				(1 << DDD3);			            // OC2B
000145 b1ea      	IN   R30,0xA
000146 66e8      	ORI  R30,LOW(0x68)
000147 b9ea      	OUT  0xA,R30
                 ; 0000 00C5 
                 ; 0000 00C6 	// SensorLine
                 ; 0000 00C7 	    // Input mode
                 ; 0000 00C8 		DDRB &= ~((1 << DDB2) | (1 << DDB1) | (1 << DDB0));
000148 b1e4      	IN   R30,0x4
000149 7fe8      	ANDI R30,LOW(0xF8)
00014a b9e4      	OUT  0x4,R30
                 ; 0000 00C9 		DDRD &= ~(1 << DDD7);
00014b 9857      	CBI  0xA,7
                 ; 0000 00CA 
                 ; 0000 00CB 	// Infrared Sensor
                 ; 0000 00CC 	    // Input mode
                 ; 0000 00CD 		#ifdef READ_SENSOR_IR
                 ; 0000 00CE 			DDRx &= ~(1 << DDxx);
                 ; 0000 00CF 		#endif
                 ; 0000 00D0 
                 ; 0000 00D1 	// Timer/Counter(s) initialization
                 ; 0000 00D2 		// Timer/Counter 0
                 ; 0000 00D3 		// Fast PWM Mode
                 ; 0000 00D4 		// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
                 ; 0000 00D5 		// TOP = 0xFF
                 ; 0000 00D6 		// Prescaler: 1:64
                 ; 0000 00D7 		TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
00014c b5e4      	IN   R30,0x24
00014d 6ae3      	ORI  R30,LOW(0xA3)
00014e bde4      	OUT  0x24,R30
                 ; 0000 00D8 		TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
00014f b5e4      	IN   R30,0x24
000150 7ae3      	ANDI R30,LOW(0xA3)
000151 bde4      	OUT  0x24,R30
                 ; 0000 00D9 		TCCR0B |= (1 << CS01) | (1 << CS00);
000152 b5e5      	IN   R30,0x25
000153 60e3      	ORI  R30,LOW(0x3)
000154 bde5      	OUT  0x25,R30
                 ; 0000 00DA 		TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
000155 b5e5      	IN   R30,0x25
000156 70e3      	ANDI R30,LOW(0x3)
000157 bde5      	OUT  0x25,R30
                 ; 0000 00DB 		TCNT0  = 0x00;
000158 e0e0      	LDI  R30,LOW(0)
000159 bde6      	OUT  0x26,R30
                 ; 0000 00DC 		TIMSK0 = 0x00;
00015a 93e0 006e 	STS  110,R30
                 ; 0000 00DD 		OCR0A  = 0x00;	OCR0B  = 0x00;
00015c bde7      	OUT  0x27,R30
00015d bde8      	OUT  0x28,R30
                 ; 0000 00DE 
                 ; 0000 00DF 		// Timer/Counter 1
                 ; 0000 00E0 		// Fast PWM 10-bit Mode
                 ; 0000 00E1 		// Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM (non-inverting mode)
                 ; 0000 00E2 		// TOP = 0x03FF
                 ; 0000 00E3 		// Prescaler: 1:64
                 ; 0000 00E4 		TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
00015e 91e0 0080 	LDS  R30,128
000160 6ae3      	ORI  R30,LOW(0xA3)
000161 93e0 0080 	STS  128,R30
                 ; 0000 00E5 		TCCR1A &= ~((1 << COM1A0) | (1 << COM1B0) | (1 << 3) | (1 << 2));
000163 91e0 0080 	LDS  R30,128
000165 7ae3      	ANDI R30,LOW(0xA3)
000166 93e0 0080 	STS  128,R30
                 ; 0000 00E6 		TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
000168 91e0 0081 	LDS  R30,129
00016a 60eb      	ORI  R30,LOW(0xB)
00016b 93e0 0081 	STS  129,R30
                 ; 0000 00E7 		TCCR1B &= ~((1 << ICNC1) | (1 << ICES1) | (1 << 5) | (1 << WGM13) | (1 << CS12));
00016d 91e0 0081 	LDS  R30,129
00016f 70eb      	ANDI R30,LOW(0xB)
000170 93e0 0081 	STS  129,R30
                 ; 0000 00E8 		TCCR1C = 0x00;
000172 e0e0      	LDI  R30,LOW(0)
000173 93e0 0082 	STS  130,R30
                 ; 0000 00E9 		TCNT1H = 0x00;	TCNT1L = 0x00;
000175 93e0 0085 	STS  133,R30
000177 93e0 0084 	STS  132,R30
                 ; 0000 00EA 		TIMSK1 = 0x00;
000179 93e0 006f 	STS  111,R30
                 ; 0000 00EB 		ICR1H  = 0x00;	ICR1L  = 0x00;
00017b 93e0 0087 	STS  135,R30
00017d 93e0 0086 	STS  134,R30
                 ; 0000 00EC 		OCR1AH = 0x00;	OCR1AL = 0x00;
00017f 93e0 0089 	STS  137,R30
000181 93e0 0088 	STS  136,R30
                 ; 0000 00ED 		OCR1BH = 0x00;	OCR1BL = 0x00;
000183 93e0 008b 	STS  139,R30
000185 93e0 008a 	STS  138,R30
                 ; 0000 00EE 
                 ; 0000 00EF 		// Timer/Counter 2
                 ; 0000 00F0 		// Fast PWM Mode
                 ; 0000 00F1 		// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
                 ; 0000 00F2 		// TOP = 0xFF
                 ; 0000 00F3 		// Prescaler: 1:64
                 ; 0000 00F4 		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
000187 91e0 00b0 	LDS  R30,176
000189 6ae3      	ORI  R30,LOW(0xA3)
00018a 93e0 00b0 	STS  176,R30
                 ; 0000 00F5 		TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
00018c 91e0 00b0 	LDS  R30,176
00018e 7ae3      	ANDI R30,LOW(0xA3)
00018f 93e0 00b0 	STS  176,R30
                 ; 0000 00F6 		TCCR2B |= (1 << CS22);
000191 91e0 00b1 	LDS  R30,177
000193 60e4      	ORI  R30,4
000194 93e0 00b1 	STS  177,R30
                 ; 0000 00F7 		TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
000196 91e0 00b1 	LDS  R30,177
000198 70e4      	ANDI R30,LOW(0x4)
000199 93e0 00b1 	STS  177,R30
                 ; 0000 00F8 		TCNT2  = 0x00;
00019b e0e0      	LDI  R30,LOW(0)
00019c 93e0 00b2 	STS  178,R30
                 ; 0000 00F9 		TIMSK2 = 0x00;
00019e 93e0 0070 	STS  112,R30
                 ; 0000 00FA 		OCR2A  = 0x00;	OCR2B  = 0x00;
0001a0 93e0 00b3 	STS  179,R30
0001a2 93e0 00b4 	STS  180,R30
                 ; 0000 00FB 
                 ; 0000 00FC 	// Crystal Oscillator division factor: 1
                 ; 0000 00FD 		#pragma optsize-
                 ; 0000 00FE 			CLKPR = 0x80;
0001a4 e8e0      	LDI  R30,LOW(128)
0001a5 93e0 0061 	STS  97,R30
                 ; 0000 00FF 			CLKPR = 0x00;
0001a7 e0e0      	LDI  R30,LOW(0)
0001a8 93e0 0061 	STS  97,R30
                 ; 0000 0100 		#ifdef _OPTIMIZE_SIZE_
                 ; 0000 0101 		#pragma optsize+
                 ; 0000 0102 		#endif
                 ; 0000 0103 }
0001aa 9508      	RET
                 ; .FEND
                 ;
                 ;void ReadSensorLineData (void) {
                 ; 0000 0105 void ReadSensorLineData (void) {
                 _ReadSensorLineData:
                 ; .FSTART _ReadSensorLineData
                 ; 0000 0106 	#ifdef READ_SENSOR_1
                 ; 0000 0107 		line_data[0] = READ_SENSOR_1;
0001ab b1e3      	IN   R30,0x3
0001ac 70e4      	ANDI R30,LOW(0x4)
0001ad e0a0      	LDI  R26,LOW(_line_data)
0001ae e0b3      	LDI  R27,HIGH(_line_data)
0001af 940e 03cd 	CALL SUBOPT_0x5
                 ; 0000 0108 	#endif /* READ_SENSOR_1 */
                 ; 0000 0109 	#ifdef READ_SENSOR_2
                 ; 0000 010A 		line_data[1] = READ_SENSOR_2;
                +
0001b1 e0a1     +LDI R26 , LOW ( _line_data + ( 1 ) )
0001b2 e0b3     +LDI R27 , HIGH ( _line_data + ( 1 ) )
                 	__POINTW2MN _line_data,1
0001b3 b1e3      	IN   R30,0x3
0001b4 70e2      	ANDI R30,LOW(0x2)
0001b5 940e 03cd 	CALL SUBOPT_0x5
                 ; 0000 010B 	#endif /* READ_SENSOR_2 */
                 ; 0000 010C 	#ifdef READ_SENSOR_3
                 ; 0000 010D 		line_data[2] = READ_SENSOR_3;
                +
0001b7 e0a2     +LDI R26 , LOW ( _line_data + ( 2 ) )
0001b8 e0b3     +LDI R27 , HIGH ( _line_data + ( 2 ) )
                 	__POINTW2MN _line_data,2
0001b9 b1e3      	IN   R30,0x3
0001ba 70e1      	ANDI R30,LOW(0x1)
0001bb 940e 03cd 	CALL SUBOPT_0x5
                 ; 0000 010E 	#endif /* READ_SENSOR_3 */
                 ; 0000 010F 	#ifdef READ_SENSOR_4
                 ; 0000 0110 		line_data[3] = READ_SENSOR_4;
                +
0001bd e0a3     +LDI R26 , LOW ( _line_data + ( 3 ) )
0001be e0b3     +LDI R27 , HIGH ( _line_data + ( 3 ) )
                 	__POINTW2MN _line_data,3
0001bf b1e9      	IN   R30,0x9
0001c0 78e0      	ANDI R30,LOW(0x80)
0001c1 940e 03cd 	CALL SUBOPT_0x5
                 ; 0000 0111 	#endif /* READ_SENSOR_4 */
                 ; 0000 0112 	#ifdef READ_SENSOR_5
                 ; 0000 0113 		line_data[4] = READ_SENSOR_5;
                 ; 0000 0114 	#endif /* READ_SENSOR_5 */
                 ; 0000 0115 	#ifdef READ_SENSOR_6
                 ; 0000 0116 		line_data[5] = READ_SENSOR_6;
                 ; 0000 0117 	#endif /* READ_SENSOR_6 */
                 ; 0000 0118 	#ifdef READ_SENSOR_7
                 ; 0000 0119 		line_data[6] = READ_SENSOR_7;
                 ; 0000 011A 	#endif /* READ_SENSOR_7 */
                 ; 0000 011B 	#ifdef READ_SENSOR_8
                 ; 0000 011C 		line_data[7] = READ_SENSOR_8;
                 ; 0000 011D 	#endif /* READ_SENSOR_8 */
                 ; 0000 011E 	#ifdef READ_SENSOR_9
                 ; 0000 011F 		line_data[8] = READ_SENSOR_9;
                 ; 0000 0120 	#endif /* READ_SENSOR_9 */
                 ; 0000 0121 	#ifdef READ_SENSOR_10
                 ; 0000 0122 		line_data[9] = READ_SENSOR_10;
                 ; 0000 0123 	#endif /* READ_SENSOR_10 */
                 ; 0000 0124 	#ifdef READ_SENSOR_11
                 ; 0000 0125 		line_data[10] = READ_SENSOR_11;
                 ; 0000 0126 	#endif /* READ_SENSOR_11 */
                 ; 0000 0127 	#ifdef READ_SENSOR_12
                 ; 0000 0128 		line_data[11] = READ_SENSOR_12;
                 ; 0000 0129 	#endif /* READ_SENSOR_12 */
                 ; 0000 012A 	#ifdef READ_SENSOR_13
                 ; 0000 012B 		line_data[12] = READ_SENSOR_13;
                 ; 0000 012C 	#endif /* READ_SENSOR_13 */
                 ; 0000 012D 	#ifdef READ_SENSOR_14
                 ; 0000 012E 		line_data[13] = READ_SENSOR_14;
                 ; 0000 012F 	#endif /* READ_SENSOR_14 */
                 ; 0000 0130 	#ifdef READ_SENSOR_15
                 ; 0000 0131 		line_data[14] = READ_SENSOR_15;
                 ; 0000 0132 	#endif /* READ_SENSOR_15 */
                 ; 0000 0133 	#ifdef READ_SENSOR_16
                 ; 0000 0134 		line_data[15] = READ_SENSOR_16;
                 ; 0000 0135 	#endif /* READ_SENSOR_16 */
                 ; 0000 0136 }
0001c3 9508      	RET
                 ; .FEND
                 ;
                 ;float CurrentRobotError (void) {
                 ; 0000 0138 float CurrentRobotError (void) {
                 _CurrentRobotError:
                 ; .FSTART _CurrentRobotError
                 ; 0000 0139 	register uint8_t i = 0;
                 ; 0000 013A 	register float current_error = 0.0;
                 ; 0000 013B 
                 ; 0000 013C 	ReadSensorLineData ();
0001c4 9724      	SBIW R28,4
0001c5 e0e0      	LDI  R30,LOW(0)
0001c6 83e8      	ST   Y,R30
0001c7 83e9      	STD  Y+1,R30
0001c8 83ea      	STD  Y+2,R30
0001c9 83eb      	STD  Y+3,R30
0001ca 931a      	ST   -Y,R17
                 ;	i -> R17
                 ;	current_error -> Y+1
0001cb e010      	LDI  R17,0
0001cc dfde      	RCALL _ReadSensorLineData
                 ; 0000 013D 
                 ; 0000 013E 	for (i = 0; i < QTY_OF_SENSORS + 1; i++) {
0001cd e010      	LDI  R17,LOW(0)
                 _0x15:
0001ce 3015      	CPI  R17,5
0001cf f538      	BRSH _0x16
                 ; 0000 013F         if (i == (QTY_OF_SENSORS / 2)) {
0001d0 3012      	CPI  R17,2
0001d1 f119      	BREQ _0x14
                 ; 0000 0140             // Skip for the correct counting errors
                 ; 0000 0141             continue;
                 ; 0000 0142         }
                 ; 0000 0143 	    if (line_data[i] == 0) {
0001d2 2fe1      	MOV  R30,R17
0001d3 e0f0      	LDI  R31,0
0001d4 50e0      	SUBI R30,LOW(-_line_data)
0001d5 4ffd      	SBCI R31,HIGH(-_line_data)
0001d6 81e0      	LD   R30,Z
0001d7 30e0      	CPI  R30,0
0001d8 f4e1      	BRNE _0x18
                 ; 0000 0144             // If the data on the [i] sensor is zero,
                 ; 0000 0145             // then the sensor is located above the black line
                 ; 0000 0146             // Odd degree to preserve the sign '-'
                 ; 0000 0147             current_error += pow (QTY_OF_SENSORS / 2 - i, 3);
0001d9 2fe1      	MOV  R30,R17
0001da e0f0      	LDI  R31,0
0001db e0a2      	LDI  R26,LOW(2)
0001dc e0b0      	LDI  R27,HIGH(2)
0001dd 940e 0628 	CALL __SWAPW12
0001df 1bea      	SUB  R30,R26
0001e0 0bfb      	SBC  R31,R27
0001e1 940e 03d3 	CALL SUBOPT_0x6
0001e3 940e 0618 	CALL __PUTPARD1
                +
0001e5 e0a0     +LDI R26 , LOW ( 0x40400000 )
0001e6 e0b0     +LDI R27 , HIGH ( 0x40400000 )
0001e7 e480     +LDI R24 , BYTE3 ( 0x40400000 )
0001e8 e490     +LDI R25 , BYTE4 ( 0x40400000 )
                 	__GETD2N 0x40400000
0001e9 940e 035e 	CALL _pow
                +
0001eb 81a9     +LDD R26 , Y + 1
0001ec 81ba     +LDD R27 , Y + 1 + 1
0001ed 818b     +LDD R24 , Y + 1 + 2
0001ee 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0001ef 940e 04e9 	CALL __ADDF12
                +
0001f1 83e9     +STD Y + 1 , R30
0001f2 83fa     +STD Y + 1 + 1 , R31
0001f3 836b     +STD Y + 1 + 2 , R22
0001f4 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0148         }
                 ; 0000 0149 	}
                 _0x18:
                 _0x14:
0001f5 5f1f      	SUBI R17,-1
0001f6 cfd7      	RJMP _0x15
                 _0x16:
                 ; 0000 014A 
                 ; 0000 014B 	return current_error;
                +
0001f7 81e9     +LDD R30 , Y + 1
0001f8 81fa     +LDD R31 , Y + 1 + 1
0001f9 816b     +LDD R22 , Y + 1 + 2
0001fa 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
0001fb 8118      	LDD  R17,Y+0
0001fc 9625      	ADIW R28,5
0001fd 9508      	RET
                 ; 0000 014C }
                 ; .FEND
                 ;
                 ;
                 ;//  Literature:
                 ;//      http://we.easyelectronics.ru/Theory/pid-regulyatory--dlya-chaynikov-praktikov.html
                 ;//      https://wiki.roboforum.ru/index.php?title=%d0%9f%d0%b5%d1%80%d0%b5%d0%b2%d0%be%d0%b4_%d1%81%d1%82%d0%b0%d1%82%d1 ...
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0001fe 940e 061d 	CALL __PUTPARD2
000200 817b         ldd  r23,y+3
000201 816a         ldd  r22,y+2
000202 81f9         ldd  r31,y+1
000203 81e8         ld   r30,y
000204 fb77         bst  r23,7
000205 0f77         lsl  r23
000206 fd67         sbrc r22,7
000207 6071         sbr  r23,1
000208 2f97         mov  r25,r23
000209 579e         subi r25,0x7e
00020a f081         breq __ftrunc0
00020b f078         brcs __ftrunc0
00020c 3198         cpi  r25,24
00020d f490         brsh __ftrunc1
00020e 27aa         clr  r26
00020f 27bb         clr  r27
000210 2788         clr  r24
                 __ftrunc2:
000211 9408         sec
000212 9587         ror  r24
000213 95b7         ror  r27
000214 95a7         ror  r26
000215 959a         dec  r25
000216 f7d1         brne __ftrunc2
000217 23ea         and  r30,r26
000218 23fb         and  r31,r27
000219 2368         and  r22,r24
00021a c005         rjmp __ftrunc1
                 __ftrunc0:
00021b 94e8         clt
00021c 2777         clr  r23
00021d 27ee         clr  r30
00021e 27ff         clr  r31
00021f 2766         clr  r22
                 __ftrunc1:
000220 776f         cbr  r22,0x80
000221 9576         lsr  r23
000222 f408         brcc __ftrunc3
000223 6860         sbr  r22,0x80
                 __ftrunc3:
000224 f977         bld  r23,7
000225 91a9         ld   r26,y+
000226 91b9         ld   r27,y+
000227 9189         ld   r24,y+
000228 9199         ld   r25,y+
000229 17ea         cp   r30,r26
00022a 07fb         cpc  r31,r27
00022b 0768         cpc  r22,r24
00022c 0779         cpc  r23,r25
00022d fb97         bst  r25,7
00022e 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00022f 940e 061d 	CALL __PUTPARD2
000231 940e 060e 	CALL __GETD2S0
000233 940e 01fe 	CALL _ftrunc
000235 940e 0613 	CALL __PUTD1S0
000237 f419          brne __floor1
                 __floor0:
000238 940e 03d8 	CALL SUBOPT_0x7
00023a c005      	RJMP _0x2080004
                 __floor1:
00023b f7e6          brtc __floor0
00023c 940e 03d8 	CALL SUBOPT_0x7
00023e 940e 03db 	CALL SUBOPT_0x8
                 _0x2080004:
000240 9624      	ADIW R28,4
000241 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
000242 940e 061d 	CALL __PUTPARD2
000244 9724      	SBIW R28,4
000245 931a      	ST   -Y,R17
000246 930a      	ST   -Y,R16
000247 940e 03e2 	CALL SUBOPT_0x9
000249 940e 0633 	CALL __CPD02
00024b f02c      	BRLT _0x200000C
                +
00024c efef     +LDI R30 , LOW ( 0xFF7FFFFF )
00024d efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
00024e e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
00024f ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000250 c071      	RJMP _0x2080003
                 _0x200000C:
000251 940e 03e7 	CALL SUBOPT_0xA
000253 940e 0618 	CALL __PUTPARD1
000255 b7ad      	IN   R26,SPL
000256 b7be      	IN   R27,SPH
000257 9711      	SBIW R26,1
000258 931f      	PUSH R17
000259 930f      	PUSH R16
00025a 940e 0426 	CALL _frexp
00025c 910f      	POP  R16
00025d 911f      	POP  R17
00025e 940e 03ec 	CALL SUBOPT_0xB
000260 940e 03e2 	CALL SUBOPT_0x9
                +
000262 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000263 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000264 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000265 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000266 940e 05cc 	CALL __CMPF12
000268 f440      	BRSH _0x200000D
000269 940e 03f1 	CALL SUBOPT_0xC
00026b 940e 04e9 	CALL __ADDF12
00026d 940e 03ec 	CALL SUBOPT_0xB
                +
00026f 5001     +SUBI R16 , LOW ( 1 )
000270 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x200000D:
000271 940e 03e7 	CALL SUBOPT_0xA
000273 940e 03db 	CALL SUBOPT_0x8
000275 937f      	PUSH R23
000276 936f      	PUSH R22
000277 93ff      	PUSH R31
000278 93ef      	PUSH R30
000279 940e 03e7 	CALL SUBOPT_0xA
                +
00027b e0a0     +LDI R26 , LOW ( 0x3F800000 )
00027c e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00027d e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00027e e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00027f 940e 04e9 	CALL __ADDF12
000281 91af      	POP  R26
000282 91bf      	POP  R27
000283 918f      	POP  R24
000284 919f      	POP  R25
000285 940e 0587 	CALL __DIVF21
000287 940e 03ec 	CALL SUBOPT_0xB
000289 940e 03f1 	CALL SUBOPT_0xC
00028b 940e 03f3 	CALL SUBOPT_0xD
                +
00028d e2a6     +LDI R26 , LOW ( 0x3F654226 )
00028e e4b2     +LDI R27 , HIGH ( 0x3F654226 )
00028f e685     +LDI R24 , BYTE3 ( 0x3F654226 )
000290 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
000291 940e 03fa 	CALL SUBOPT_0xE
                +
000293 e4ee     +LDI R30 , LOW ( 0x4054114E )
000294 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000295 e564     +LDI R22 , BYTE3 ( 0x4054114E )
000296 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000297 940e 03ff 	CALL SUBOPT_0xF
000299 940e 03e2 	CALL SUBOPT_0x9
00029b 940e 0539 	CALL __MULF12
00029d 937f      	PUSH R23
00029e 936f      	PUSH R22
00029f 93ff      	PUSH R31
0002a0 93ef      	PUSH R30
0002a1 940e 0404 	CALL SUBOPT_0x10
                +
0002a3 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0002a4 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
0002a5 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
0002a6 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
0002a7 940e 04e2 	CALL __SUBF12
0002a9 91af      	POP  R26
0002aa 91bf      	POP  R27
0002ab 918f      	POP  R24
0002ac 919f      	POP  R25
0002ad 940e 0587 	CALL __DIVF21
0002af 937f      	PUSH R23
0002b0 936f      	PUSH R22
0002b1 93ff      	PUSH R31
0002b2 93ef      	PUSH R30
0002b3 01f8      	MOVW R30,R16
0002b4 940e 03d3 	CALL SUBOPT_0x6
                +
0002b6 e1a8     +LDI R26 , LOW ( 0x3F317218 )
0002b7 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
0002b8 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
0002b9 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
0002ba 940e 0539 	CALL __MULF12
0002bc 91af      	POP  R26
0002bd 91bf      	POP  R27
0002be 918f      	POP  R24
0002bf 919f      	POP  R25
0002c0 940e 04e9 	CALL __ADDF12
                 _0x2080003:
0002c2 8119      	LDD  R17,Y+1
0002c3 8108      	LDD  R16,Y+0
0002c4 962a      	ADIW R28,10
0002c5 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
0002c6 940e 061d 	CALL __PUTPARD2
0002c8 9728      	SBIW R28,8
0002c9 931a      	ST   -Y,R17
0002ca 930a      	ST   -Y,R16
0002cb 940e 0409 	CALL SUBOPT_0x11
                +
0002cd e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
0002ce eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
0002cf ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
0002d0 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
0002d1 940e 05cc 	CALL __CMPF12
0002d3 f418      	BRSH _0x200000F
0002d4 940e 040e 	CALL SUBOPT_0x12
0002d6 c083      	RJMP _0x2080002
                 _0x200000F:
                +
0002d7 85ea     +LDD R30 , Y + 10
0002d8 85fb     +LDD R31 , Y + 10 + 1
0002d9 856c     +LDD R22 , Y + 10 + 2
0002da 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0002db 940e 062f 	CALL __CPD10
0002dd f429      	BRNE _0x2000010
                +
0002de e0e0     +LDI R30 , LOW ( 0x3F800000 )
0002df e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0002e0 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0002e1 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0002e2 c077      	RJMP _0x2080002
                 _0x2000010:
0002e3 940e 0409 	CALL SUBOPT_0x11
                +
0002e5 e1e8     +LDI R30 , LOW ( 0x42B17218 )
0002e6 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
0002e7 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
0002e8 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
0002e9 940e 05cc 	CALL __CMPF12
0002eb f009      	BREQ PC+2
0002ec f408      	BRCC PC+2
0002ed c005      	RJMP _0x2000011
                +
0002ee efef     +LDI R30 , LOW ( 0x7F7FFFFF )
0002ef efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
0002f0 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
0002f1 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
0002f2 c067      	RJMP _0x2080002
                 _0x2000011:
0002f3 940e 0409 	CALL SUBOPT_0x11
                +
0002f5 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
0002f6 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
0002f7 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
0002f8 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
0002f9 940e 0539 	CALL __MULF12
                +
0002fb 87ea     +STD Y + 10 , R30
0002fc 87fb     +STD Y + 10 + 1 , R31
0002fd 876c     +STD Y + 10 + 2 , R22
0002fe 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0002ff 940e 0409 	CALL SUBOPT_0x11
000301 df2d      	RCALL _floor
000302 940e 0478 	CALL __CFD1
000304 018f      	MOVW R16,R30
000305 940e 0409 	CALL SUBOPT_0x11
000307 940e 03d3 	CALL SUBOPT_0x6
000309 940e 03ff 	CALL SUBOPT_0xF
00030b 01df      	MOVW R26,R30
00030c 01cb      	MOVW R24,R22
                +
00030d e0e0     +LDI R30 , LOW ( 0x3F000000 )
00030e e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00030f e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000310 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000311 940e 03ff 	CALL SUBOPT_0xF
000313 940e 03ec 	CALL SUBOPT_0xB
000315 940e 03f1 	CALL SUBOPT_0xC
000317 940e 03f3 	CALL SUBOPT_0xD
                +
000319 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
00031a e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
00031b e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
00031c e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
00031d 940e 0539 	CALL __MULF12
                +
00031f eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
000320 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000321 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000322 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000323 940e 04e9 	CALL __ADDF12
000325 940e 03e2 	CALL SUBOPT_0x9
000327 940e 0539 	CALL __MULF12
000329 940e 03ec 	CALL SUBOPT_0xB
00032b 940e 0404 	CALL SUBOPT_0x10
                +
00032d e2a8     +LDI R26 , LOW ( 0x41A68D28 )
00032e e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
00032f ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
000330 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000331 940e 04e9 	CALL __ADDF12
                +
000333 83ea     +STD Y + 2 , R30
000334 83fb     +STD Y + 2 + 1 , R31
000335 836c     +STD Y + 2 + 2 , R22
000336 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000337 940e 03e7 	CALL SUBOPT_0xA
                +
000339 81aa     +LDD R26 , Y + 2
00033a 81bb     +LDD R27 , Y + 2 + 1
00033b 818c     +LDD R24 , Y + 2 + 2
00033c 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00033d 940e 04e9 	CALL __ADDF12
                +
00033f efa3     +LDI R26 , LOW ( 0x3FB504F3 )
000340 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000341 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000342 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000343 940e 0539 	CALL __MULF12
000345 937f      	PUSH R23
000346 936f      	PUSH R22
000347 93ff      	PUSH R31
000348 93ef      	PUSH R30
000349 940e 03e2 	CALL SUBOPT_0x9
00034b 940e 0404 	CALL SUBOPT_0x10
00034d 940e 04e2 	CALL __SUBF12
00034f 91af      	POP  R26
000350 91bf      	POP  R27
000351 918f      	POP  R24
000352 919f      	POP  R25
000353 940e 0587 	CALL __DIVF21
000355 940e 0618 	CALL __PUTPARD1
000357 01d8      	MOVW R26,R16
000358 940e 0437 	CALL _ldexp
                 _0x2080002:
00035a 8119      	LDD  R17,Y+1
00035b 8108      	LDD  R16,Y+0
00035c 962e      	ADIW R28,14
00035d 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
00035e 940e 061d 	CALL __PUTPARD2
000360 9724      	SBIW R28,4
000361 940e 03be 	CALL SUBOPT_0x2
000363 940e 062f 	CALL __CPD10
000365 f419      	BRNE _0x2000012
000366 940e 040e 	CALL SUBOPT_0x12
000368 c045      	RJMP _0x2080001
                 _0x2000012:
                +
000369 85a8     +LDD R26 , Y + 8
00036a 85b9     +LDD R27 , Y + 8 + 1
00036b 858a     +LDD R24 , Y + 8 + 2
00036c 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00036d 940e 0633 	CALL __CPD02
00036f f494      	BRGE _0x2000013
000370 940e 0413 	CALL SUBOPT_0x13
000372 940e 062f 	CALL __CPD10
000374 f429      	BRNE _0x2000014
                +
000375 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000376 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000377 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000378 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000379 c034      	RJMP _0x2080001
                 _0x2000014:
                +
00037a 85a8     +LDD R26 , Y + 8
00037b 85b9     +LDD R27 , Y + 8 + 1
00037c 858a     +LDD R24 , Y + 8 + 2
00037d 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00037e 940e 0418 	CALL SUBOPT_0x14
000380 df45      	RCALL _exp
000381 c02c      	RJMP _0x2080001
                 _0x2000013:
000382 940e 0413 	CALL SUBOPT_0x13
000384 01de      	MOVW R26,R28
000385 940e 0478 	CALL __CFD1
000387 940e 0604 	CALL __PUTDP1
000389 940e 03d8 	CALL SUBOPT_0x7
00038b 940e 04af 	CALL __CDF1
00038d 01df      	MOVW R26,R30
00038e 01cb      	MOVW R24,R22
00038f 940e 0413 	CALL SUBOPT_0x13
000391 940e 0639 	CALL __CPD12
000393 f019      	BREQ _0x2000015
000394 940e 040e 	CALL SUBOPT_0x12
000396 c017      	RJMP _0x2080001
                 _0x2000015:
000397 940e 03be 	CALL SUBOPT_0x2
000399 940e 0443 	CALL __ANEGF1
00039b 01df      	MOVW R26,R30
00039c 01cb      	MOVW R24,R22
00039d 940e 0418 	CALL SUBOPT_0x14
00039f df26      	RCALL _exp
                +
0003a0 87e8     +STD Y + 8 , R30
0003a1 87f9     +STD Y + 8 + 1 , R31
0003a2 876a     +STD Y + 8 + 2 , R22
0003a3 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0003a4 81e8      	LD   R30,Y
0003a5 70e1      	ANDI R30,LOW(0x1)
0003a6 f419      	BRNE _0x2000016
0003a7 940e 03be 	CALL SUBOPT_0x2
0003a9 c004      	RJMP _0x2080001
                 _0x2000016:
0003aa 940e 03be 	CALL SUBOPT_0x2
0003ac 940e 0443 	CALL __ANEGF1
                 _0x2080001:
0003ae 962c      	ADIW R28,12
0003af 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _line_data:
000300           	.BYTE 0x4
                 __seed_G101:
000304           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003b0 2fe1      	MOV  R30,R17
0003b1 e0f0      	LDI  R31,0
0003b2 01de      	MOVW R26,R28
0003b3 9654      	ADIW R26,20
0003b4 940e 05f4 	CALL __LSLW2
0003b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
                +
0003b7 e0a0     +LDI R26 , LOW ( 0x0 )
0003b8 e0b0     +LDI R27 , HIGH ( 0x0 )
0003b9 e080     +LDI R24 , BYTE3 ( 0x0 )
0003ba e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
0003bb 940e 0539 	CALL __MULF12
0003bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
                +
0003be 85e8     +LDD R30 , Y + 8
0003bf 85f9     +LDD R31 , Y + 8 + 1
0003c0 856a     +LDD R22 , Y + 8 + 2
0003c1 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0003c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
0003c3 81ac     +LDD R26 , Y + 4
0003c4 81bd     +LDD R27 , Y + 4 + 1
0003c5 818e     +LDD R24 , Y + 4 + 2
0003c6 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0003c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0003c8 940e 0609 	CALL __GETD1S0
0003ca 940e 0476 	CALL __CFD1U
0003cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
0003cd 23ee      	TST  R30
0003ce e0e1      	LDI  R30,1
0003cf f409      	BRBC 0x1,PC+2
0003d0 e0e0      	LDI  R30,0
0003d1 93ec      	ST   X,R30
0003d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003d3 940e 05f9 	CALL __CWD1
0003d5 940e 04af 	CALL __CDF1
0003d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003d8 940e 0609 	CALL __GETD1S0
0003da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
0003db e0a0     +LDI R26 , LOW ( 0x3F800000 )
0003dc e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0003dd e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0003de e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0003df 940e 04e2 	CALL __SUBF12
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9:
                +
0003e2 81ae     +LDD R26 , Y + 6
0003e3 81bf     +LDD R27 , Y + 6 + 1
0003e4 8588     +LDD R24 , Y + 6 + 2
0003e5 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0003e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
                +
0003e7 81ee     +LDD R30 , Y + 6
0003e8 81ff     +LDD R31 , Y + 6 + 1
0003e9 8568     +LDD R22 , Y + 6 + 2
0003ea 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0003eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
                +
0003ec 83ee     +STD Y + 6 , R30
0003ed 83ff     +STD Y + 6 + 1 , R31
0003ee 8768     +STD Y + 6 + 2 , R22
0003ef 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0003f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0003f1 dff5      	RCALL SUBOPT_0xA
0003f2 cfef      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
0003f3 940e 0539 	CALL __MULF12
                +
0003f5 83ea     +STD Y + 2 , R30
0003f6 83fb     +STD Y + 2 + 1 , R31
0003f7 836c     +STD Y + 2 + 2 , R22
0003f8 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0003f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0003fa 940e 0539 	CALL __MULF12
0003fc 01df      	MOVW R26,R30
0003fd 01cb      	MOVW R24,R22
0003fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0003ff 940e 0622 	CALL __SWAPD12
000401 940e 04e2 	CALL __SUBF12
000403 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
                +
000404 81ea     +LDD R30 , Y + 2
000405 81fb     +LDD R31 , Y + 2 + 1
000406 816c     +LDD R22 , Y + 2 + 2
000407 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000408 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
                +
000409 85aa     +LDD R26 , Y + 10
00040a 85bb     +LDD R27 , Y + 10 + 1
00040b 858c     +LDD R24 , Y + 10 + 2
00040c 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
00040d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
                +
00040e e0e0     +LDI R30 , LOW ( 0x0 )
00040f e0f0     +LDI R31 , HIGH ( 0x0 )
000410 e060     +LDI R22 , BYTE3 ( 0x0 )
000411 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000412 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
                +
000413 81ec     +LDD R30 , Y + 4
000414 81fd     +LDD R31 , Y + 4 + 1
000415 816e     +LDD R22 , Y + 4 + 2
000416 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000417 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000418 940e 0242 	CALL _log
00041a dfa8      	RCALL SUBOPT_0x3
00041b cfde      	RJMP SUBOPT_0xE
                 
                 
                 	.CSEG
                 _delay_ms:
00041c 9610      	adiw r26,0
00041d f039      	breq __delay_ms1
                 __delay_ms0:
00041e 95a8      	wdr
                +
00041f e888     +LDI R24 , LOW ( 0x1388 )
000420 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000421 9701     +SBIW R24 , 1
000422 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
000423 9711      	sbiw r26,1
000424 f7c9      	brne __delay_ms0
                 __delay_ms1:
000425 9508      	ret
                 
                 _frexp:
000426 91e9      	LD   R30,Y+
000427 91f9      	LD   R31,Y+
000428 9169      	LD   R22,Y+
000429 9179      	LD   R23,Y+
00042a fb77      	BST  R23,7
00042b 0f66      	LSL  R22
00042c 1f77      	ROL  R23
00042d 2788      	CLR  R24
00042e 577e      	SUBI R23,0x7E
00042f 0b88      	SBC  R24,R24
000430 937d      	ST   X+,R23
000431 938c      	ST   X,R24
000432 e77e      	LDI  R23,0x7E
000433 9576      	LSR  R23
000434 9567      	ROR  R22
000435 f06e      	BRTS __ANEGF1
000436 9508      	RET
                 
                 _ldexp:
000437 91e9      	LD   R30,Y+
000438 91f9      	LD   R31,Y+
000439 9169      	LD   R22,Y+
00043a 9179      	LD   R23,Y+
00043b fb77      	BST  R23,7
00043c 0f66      	LSL  R22
00043d 1f77      	ROL  R23
00043e 0f7a      	ADD  R23,R26
00043f 9576      	LSR  R23
000440 9567      	ROR  R22
000441 f00e      	BRTS __ANEGF1
000442 9508      	RET
                 
                 __ANEGF1:
000443 9730      	SBIW R30,0
000444 4060      	SBCI R22,0
000445 4070      	SBCI R23,0
000446 f009      	BREQ __ANEGF10
000447 5870      	SUBI R23,0x80
                 __ANEGF10:
000448 9508      	RET
                 
                 __ROUND_REPACK:
000449 2355      	TST  R21
00044a f442      	BRPL __REPACK
00044b 3850      	CPI  R21,0x80
00044c f411      	BRNE __ROUND_REPACK0
00044d ffe0      	SBRS R30,0
00044e c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00044f 9631      	ADIW R30,1
000450 1f69      	ADC  R22,R25
000451 1f79      	ADC  R23,R25
000452 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000453 e850      	LDI  R21,0x80
000454 2757      	EOR  R21,R23
000455 f411      	BRNE __REPACK0
000456 935f      	PUSH R21
000457 c0cf      	RJMP __ZERORES
                 __REPACK0:
000458 3f5f      	CPI  R21,0xFF
000459 f031      	BREQ __REPACK1
00045a 0f66      	LSL  R22
00045b 0c00      	LSL  R0
00045c 9557      	ROR  R21
00045d 9567      	ROR  R22
00045e 2f75      	MOV  R23,R21
00045f 9508      	RET
                 __REPACK1:
000460 935f      	PUSH R21
000461 2000      	TST  R0
000462 f00a      	BRMI __REPACK2
000463 c0cf      	RJMP __MAXRES
                 __REPACK2:
000464 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000465 e850      	LDI  R21,0x80
000466 2e19      	MOV  R1,R25
000467 2215      	AND  R1,R21
000468 0f88      	LSL  R24
000469 1f99      	ROL  R25
00046a 2795      	EOR  R25,R21
00046b 0f55      	LSL  R21
00046c 9587      	ROR  R24
                 
                 __UNPACK1:
00046d e850      	LDI  R21,0x80
00046e 2e07      	MOV  R0,R23
00046f 2205      	AND  R0,R21
000470 0f66      	LSL  R22
000471 1f77      	ROL  R23
000472 2775      	EOR  R23,R21
000473 0f55      	LSL  R21
000474 9567      	ROR  R22
000475 9508      	RET
                 
                 __CFD1U:
000476 9468      	SET
000477 c001      	RJMP __CFD1U0
                 __CFD1:
000478 94e8      	CLT
                 __CFD1U0:
000479 935f      	PUSH R21
00047a dff2      	RCALL __UNPACK1
00047b 3870      	CPI  R23,0x80
00047c f018      	BRLO __CFD10
00047d 3f7f      	CPI  R23,0xFF
00047e f408      	BRCC __CFD10
00047f c0a7      	RJMP __ZERORES
                 __CFD10:
000480 e156      	LDI  R21,22
000481 1b57      	SUB  R21,R23
000482 f4aa      	BRPL __CFD11
000483 9551      	NEG  R21
000484 3058      	CPI  R21,8
000485 f40e      	BRTC __CFD19
000486 3059      	CPI  R21,9
                 __CFD19:
000487 f030      	BRLO __CFD17
000488 efef      	SER  R30
000489 efff      	SER  R31
00048a ef6f      	SER  R22
00048b e77f      	LDI  R23,0x7F
00048c f977      	BLD  R23,7
00048d c01a      	RJMP __CFD15
                 __CFD17:
00048e 2777      	CLR  R23
00048f 2355      	TST  R21
000490 f0b9      	BREQ __CFD15
                 __CFD18:
000491 0fee      	LSL  R30
000492 1fff      	ROL  R31
000493 1f66      	ROL  R22
000494 1f77      	ROL  R23
000495 955a      	DEC  R21
000496 f7d1      	BRNE __CFD18
000497 c010      	RJMP __CFD15
                 __CFD11:
000498 2777      	CLR  R23
                 __CFD12:
000499 3058      	CPI  R21,8
00049a f028      	BRLO __CFD13
00049b 2fef      	MOV  R30,R31
00049c 2ff6      	MOV  R31,R22
00049d 2f67      	MOV  R22,R23
00049e 5058      	SUBI R21,8
00049f cff9      	RJMP __CFD12
                 __CFD13:
0004a0 2355      	TST  R21
0004a1 f031      	BREQ __CFD15
                 __CFD14:
0004a2 9576      	LSR  R23
0004a3 9567      	ROR  R22
0004a4 95f7      	ROR  R31
0004a5 95e7      	ROR  R30
0004a6 955a      	DEC  R21
0004a7 f7d1      	BRNE __CFD14
                 __CFD15:
0004a8 2000      	TST  R0
0004a9 f40a      	BRPL __CFD16
0004aa d141      	RCALL __ANEGD1
                 __CFD16:
0004ab 915f      	POP  R21
0004ac 9508      	RET
                 
                 __CDF1U:
0004ad 9468      	SET
0004ae c001      	RJMP __CDF1U0
                 __CDF1:
0004af 94e8      	CLT
                 __CDF1U0:
0004b0 9730      	SBIW R30,0
0004b1 4060      	SBCI R22,0
0004b2 4070      	SBCI R23,0
0004b3 f0b1      	BREQ __CDF10
0004b4 2400      	CLR  R0
0004b5 f026      	BRTS __CDF11
0004b6 2377      	TST  R23
0004b7 f412      	BRPL __CDF11
0004b8 9400      	COM  R0
0004b9 d132      	RCALL __ANEGD1
                 __CDF11:
0004ba 2e17      	MOV  R1,R23
0004bb e17e      	LDI  R23,30
0004bc 2011      	TST  R1
                 __CDF12:
0004bd f032      	BRMI __CDF13
0004be 957a      	DEC  R23
0004bf 0fee      	LSL  R30
0004c0 1fff      	ROL  R31
0004c1 1f66      	ROL  R22
0004c2 1c11      	ROL  R1
0004c3 cff9      	RJMP __CDF12
                 __CDF13:
0004c4 2fef      	MOV  R30,R31
0004c5 2ff6      	MOV  R31,R22
0004c6 2d61      	MOV  R22,R1
0004c7 935f      	PUSH R21
0004c8 df8a      	RCALL __REPACK
0004c9 915f      	POP  R21
                 __CDF10:
0004ca 9508      	RET
                 
                 __SWAPACC:
0004cb 934f      	PUSH R20
0004cc 01af      	MOVW R20,R30
0004cd 01fd      	MOVW R30,R26
0004ce 01da      	MOVW R26,R20
0004cf 01ab      	MOVW R20,R22
0004d0 01bc      	MOVW R22,R24
0004d1 01ca      	MOVW R24,R20
0004d2 2d40      	MOV  R20,R0
0004d3 2c01      	MOV  R0,R1
0004d4 2e14      	MOV  R1,R20
0004d5 914f      	POP  R20
0004d6 9508      	RET
                 
                 __UADD12:
0004d7 0fea      	ADD  R30,R26
0004d8 1ffb      	ADC  R31,R27
0004d9 1f68      	ADC  R22,R24
0004da 9508      	RET
                 
                 __NEGMAN1:
0004db 95e0      	COM  R30
0004dc 95f0      	COM  R31
0004dd 9560      	COM  R22
0004de 5fef      	SUBI R30,-1
0004df 4fff      	SBCI R31,-1
0004e0 4f6f      	SBCI R22,-1
0004e1 9508      	RET
                 
                 __SUBF12:
0004e2 935f      	PUSH R21
0004e3 df81      	RCALL __UNPACK
0004e4 3890      	CPI  R25,0x80
0004e5 f171      	BREQ __ADDF129
0004e6 e850      	LDI  R21,0x80
0004e7 2615      	EOR  R1,R21
                 
0004e8 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0004e9 935f      	PUSH R21
0004ea df7a      	RCALL __UNPACK
0004eb 3890      	CPI  R25,0x80
0004ec f139      	BREQ __ADDF129
                 
                 __ADDF120:
0004ed 3870      	CPI  R23,0x80
0004ee f121      	BREQ __ADDF128
                 __ADDF121:
0004ef 2f57      	MOV  R21,R23
0004f0 1b59      	SUB  R21,R25
0004f1 f12b      	BRVS __ADDF1211
0004f2 f412      	BRPL __ADDF122
0004f3 dfd7      	RCALL __SWAPACC
0004f4 cffa      	RJMP __ADDF121
                 __ADDF122:
0004f5 3158      	CPI  R21,24
0004f6 f018      	BRLO __ADDF123
0004f7 27aa      	CLR  R26
0004f8 27bb      	CLR  R27
0004f9 2788      	CLR  R24
                 __ADDF123:
0004fa 3058      	CPI  R21,8
0004fb f028      	BRLO __ADDF124
0004fc 2fab      	MOV  R26,R27
0004fd 2fb8      	MOV  R27,R24
0004fe 2788      	CLR  R24
0004ff 5058      	SUBI R21,8
000500 cff9      	RJMP __ADDF123
                 __ADDF124:
000501 2355      	TST  R21
000502 f029      	BREQ __ADDF126
                 __ADDF125:
000503 9586      	LSR  R24
000504 95b7      	ROR  R27
000505 95a7      	ROR  R26
000506 955a      	DEC  R21
000507 f7d9      	BRNE __ADDF125
                 __ADDF126:
000508 2d50      	MOV  R21,R0
000509 2551      	EOR  R21,R1
00050a f072      	BRMI __ADDF127
00050b dfcb      	RCALL __UADD12
00050c f438      	BRCC __ADDF129
00050d 9567      	ROR  R22
00050e 95f7      	ROR  R31
00050f 95e7      	ROR  R30
000510 9573      	INC  R23
000511 f413      	BRVC __ADDF129
000512 c020      	RJMP __MAXRES
                 __ADDF128:
000513 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000514 df3e      	RCALL __REPACK
000515 915f      	POP  R21
000516 9508      	RET
                 __ADDF1211:
000517 f7d8      	BRCC __ADDF128
000518 cffb      	RJMP __ADDF129
                 __ADDF127:
000519 1bea      	SUB  R30,R26
00051a 0bfb      	SBC  R31,R27
00051b 0b68      	SBC  R22,R24
00051c f051      	BREQ __ZERORES
00051d f410      	BRCC __ADDF1210
00051e 9400      	COM  R0
00051f dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000520 2366      	TST  R22
000521 f392      	BRMI __ADDF129
000522 0fee      	LSL  R30
000523 1fff      	ROL  R31
000524 1f66      	ROL  R22
000525 957a      	DEC  R23
000526 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000527 27ee      	CLR  R30
000528 27ff      	CLR  R31
000529 2766      	CLR  R22
00052a 2777      	CLR  R23
00052b 915f      	POP  R21
00052c 9508      	RET
                 
                 __MINRES:
00052d efef      	SER  R30
00052e efff      	SER  R31
00052f e76f      	LDI  R22,0x7F
000530 ef7f      	SER  R23
000531 915f      	POP  R21
000532 9508      	RET
                 
                 __MAXRES:
000533 efef      	SER  R30
000534 efff      	SER  R31
000535 e76f      	LDI  R22,0x7F
000536 e77f      	LDI  R23,0x7F
000537 915f      	POP  R21
000538 9508      	RET
                 
                 __MULF12:
000539 935f      	PUSH R21
00053a df2a      	RCALL __UNPACK
00053b 3870      	CPI  R23,0x80
00053c f351      	BREQ __ZERORES
00053d 3890      	CPI  R25,0x80
00053e f341      	BREQ __ZERORES
00053f 2401      	EOR  R0,R1
000540 9408      	SEC
000541 1f79      	ADC  R23,R25
000542 f423      	BRVC __MULF124
000543 f31c      	BRLT __ZERORES
                 __MULF125:
000544 2000      	TST  R0
000545 f33a      	BRMI __MINRES
000546 cfec      	RJMP __MAXRES
                 __MULF124:
000547 920f      	PUSH R0
000548 931f      	PUSH R17
000549 932f      	PUSH R18
00054a 933f      	PUSH R19
00054b 934f      	PUSH R20
00054c 2711      	CLR  R17
00054d 2722      	CLR  R18
00054e 2799      	CLR  R25
00054f 9f68      	MUL  R22,R24
000550 01a0      	MOVW R20,R0
000551 9f8f      	MUL  R24,R31
000552 2d30      	MOV  R19,R0
000553 0d41      	ADD  R20,R1
000554 1f59      	ADC  R21,R25
000555 9f6b      	MUL  R22,R27
000556 0d30      	ADD  R19,R0
000557 1d41      	ADC  R20,R1
000558 1f59      	ADC  R21,R25
000559 9f8e      	MUL  R24,R30
00055a d027      	RCALL __MULF126
00055b 9fbf      	MUL  R27,R31
00055c d025      	RCALL __MULF126
00055d 9f6a      	MUL  R22,R26
00055e d023      	RCALL __MULF126
00055f 9fbe      	MUL  R27,R30
000560 d01d      	RCALL __MULF127
000561 9faf      	MUL  R26,R31
000562 d01b      	RCALL __MULF127
000563 9fae      	MUL  R26,R30
000564 0d11      	ADD  R17,R1
000565 1f29      	ADC  R18,R25
000566 1f39      	ADC  R19,R25
000567 1f49      	ADC  R20,R25
000568 1f59      	ADC  R21,R25
000569 2fe3      	MOV  R30,R19
00056a 2ff4      	MOV  R31,R20
00056b 2f65      	MOV  R22,R21
00056c 2f52      	MOV  R21,R18
00056d 914f      	POP  R20
00056e 913f      	POP  R19
00056f 912f      	POP  R18
000570 911f      	POP  R17
000571 900f      	POP  R0
000572 2366      	TST  R22
000573 f02a      	BRMI __MULF122
000574 0f55      	LSL  R21
000575 1fee      	ROL  R30
000576 1fff      	ROL  R31
000577 1f66      	ROL  R22
000578 c002      	RJMP __MULF123
                 __MULF122:
000579 9573      	INC  R23
00057a f24b      	BRVS __MULF125
                 __MULF123:
00057b decd      	RCALL __ROUND_REPACK
00057c 915f      	POP  R21
00057d 9508      	RET
                 
                 __MULF127:
00057e 0d10      	ADD  R17,R0
00057f 1d21      	ADC  R18,R1
000580 1f39      	ADC  R19,R25
000581 c002      	RJMP __MULF128
                 __MULF126:
000582 0d20      	ADD  R18,R0
000583 1d31      	ADC  R19,R1
                 __MULF128:
000584 1f49      	ADC  R20,R25
000585 1f59      	ADC  R21,R25
000586 9508      	RET
                 
                 __DIVF21:
000587 935f      	PUSH R21
000588 dedc      	RCALL __UNPACK
000589 3870      	CPI  R23,0x80
00058a f421      	BRNE __DIVF210
00058b 2011      	TST  R1
                 __DIVF211:
00058c f40a      	BRPL __DIVF219
00058d cf9f      	RJMP __MINRES
                 __DIVF219:
00058e cfa4      	RJMP __MAXRES
                 __DIVF210:
00058f 3890      	CPI  R25,0x80
000590 f409      	BRNE __DIVF218
                 __DIVF217:
000591 cf95      	RJMP __ZERORES
                 __DIVF218:
000592 2401      	EOR  R0,R1
000593 9408      	SEC
000594 0b97      	SBC  R25,R23
000595 f41b      	BRVC __DIVF216
000596 f3d4      	BRLT __DIVF217
000597 2000      	TST  R0
000598 cff3      	RJMP __DIVF211
                 __DIVF216:
000599 2f79      	MOV  R23,R25
00059a 931f      	PUSH R17
00059b 932f      	PUSH R18
00059c 933f      	PUSH R19
00059d 934f      	PUSH R20
00059e 2411      	CLR  R1
00059f 2711      	CLR  R17
0005a0 2722      	CLR  R18
0005a1 2733      	CLR  R19
0005a2 2744      	CLR  R20
0005a3 2755      	CLR  R21
0005a4 e290      	LDI  R25,32
                 __DIVF212:
0005a5 17ae      	CP   R26,R30
0005a6 07bf      	CPC  R27,R31
0005a7 0786      	CPC  R24,R22
0005a8 0741      	CPC  R20,R17
0005a9 f030      	BRLO __DIVF213
0005aa 1bae      	SUB  R26,R30
0005ab 0bbf      	SBC  R27,R31
0005ac 0b86      	SBC  R24,R22
0005ad 0b41      	SBC  R20,R17
0005ae 9408      	SEC
0005af c001      	RJMP __DIVF214
                 __DIVF213:
0005b0 9488      	CLC
                 __DIVF214:
0005b1 1f55      	ROL  R21
0005b2 1f22      	ROL  R18
0005b3 1f33      	ROL  R19
0005b4 1c11      	ROL  R1
0005b5 1faa      	ROL  R26
0005b6 1fbb      	ROL  R27
0005b7 1f88      	ROL  R24
0005b8 1f44      	ROL  R20
0005b9 959a      	DEC  R25
0005ba f751      	BRNE __DIVF212
0005bb 01f9      	MOVW R30,R18
0005bc 2d61      	MOV  R22,R1
0005bd 914f      	POP  R20
0005be 913f      	POP  R19
0005bf 912f      	POP  R18
0005c0 911f      	POP  R17
0005c1 2366      	TST  R22
0005c2 f032      	BRMI __DIVF215
0005c3 0f55      	LSL  R21
0005c4 1fee      	ROL  R30
0005c5 1fff      	ROL  R31
0005c6 1f66      	ROL  R22
0005c7 957a      	DEC  R23
0005c8 f243      	BRVS __DIVF217
                 __DIVF215:
0005c9 de7f      	RCALL __ROUND_REPACK
0005ca 915f      	POP  R21
0005cb 9508      	RET
                 
                 __CMPF12:
0005cc 2399      	TST  R25
0005cd f09a      	BRMI __CMPF120
0005ce 2377      	TST  R23
0005cf f042      	BRMI __CMPF121
0005d0 1797      	CP   R25,R23
0005d1 f048      	BRLO __CMPF122
0005d2 f429      	BRNE __CMPF121
0005d3 17ae      	CP   R26,R30
0005d4 07bf      	CPC  R27,R31
0005d5 0786      	CPC  R24,R22
0005d6 f020      	BRLO __CMPF122
0005d7 f031      	BREQ __CMPF123
                 __CMPF121:
0005d8 9498      	CLZ
0005d9 9488      	CLC
0005da 9508      	RET
                 __CMPF122:
0005db 9498      	CLZ
0005dc 9408      	SEC
0005dd 9508      	RET
                 __CMPF123:
0005de 9418      	SEZ
0005df 9488      	CLC
0005e0 9508      	RET
                 __CMPF120:
0005e1 2377      	TST  R23
0005e2 f7c2      	BRPL __CMPF122
0005e3 1797      	CP   R25,R23
0005e4 f398      	BRLO __CMPF121
0005e5 f7a9      	BRNE __CMPF122
0005e6 17ea      	CP   R30,R26
0005e7 07fb      	CPC  R31,R27
0005e8 0768      	CPC  R22,R24
0005e9 f388      	BRLO __CMPF122
0005ea f399      	BREQ __CMPF123
0005eb cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
0005ec 95f0      	COM  R31
0005ed 9560      	COM  R22
0005ee 9570      	COM  R23
0005ef 95e1      	NEG  R30
0005f0 4fff      	SBCI R31,-1
0005f1 4f6f      	SBCI R22,-1
0005f2 4f7f      	SBCI R23,-1
0005f3 9508      	RET
                 
                 __LSLW2:
0005f4 0fee      	LSL  R30
0005f5 1fff      	ROL  R31
0005f6 0fee      	LSL  R30
0005f7 1fff      	ROL  R31
0005f8 9508      	RET
                 
                 __CWD1:
0005f9 2f6f      	MOV  R22,R31
0005fa 0f66      	ADD  R22,R22
0005fb 0b66      	SBC  R22,R22
0005fc 2f76      	MOV  R23,R22
0005fd 9508      	RET
                 
                 __GETD1P:
0005fe 91ed      	LD   R30,X+
0005ff 91fd      	LD   R31,X+
000600 916d      	LD   R22,X+
000601 917c      	LD   R23,X
000602 9713      	SBIW R26,3
000603 9508      	RET
                 
                 __PUTDP1:
000604 93ed      	ST   X+,R30
000605 93fd      	ST   X+,R31
000606 936d      	ST   X+,R22
000607 937c      	ST   X,R23
000608 9508      	RET
                 
                 __GETD1S0:
000609 81e8      	LD   R30,Y
00060a 81f9      	LDD  R31,Y+1
00060b 816a      	LDD  R22,Y+2
00060c 817b      	LDD  R23,Y+3
00060d 9508      	RET
                 
                 __GETD2S0:
00060e 81a8      	LD   R26,Y
00060f 81b9      	LDD  R27,Y+1
000610 818a      	LDD  R24,Y+2
000611 819b      	LDD  R25,Y+3
000612 9508      	RET
                 
                 __PUTD1S0:
000613 83e8      	ST   Y,R30
000614 83f9      	STD  Y+1,R31
000615 836a      	STD  Y+2,R22
000616 837b      	STD  Y+3,R23
000617 9508      	RET
                 
                 __PUTPARD1:
000618 937a      	ST   -Y,R23
000619 936a      	ST   -Y,R22
00061a 93fa      	ST   -Y,R31
00061b 93ea      	ST   -Y,R30
00061c 9508      	RET
                 
                 __PUTPARD2:
00061d 939a      	ST   -Y,R25
00061e 938a      	ST   -Y,R24
00061f 93ba      	ST   -Y,R27
000620 93aa      	ST   -Y,R26
000621 9508      	RET
                 
                 __SWAPD12:
000622 2e18      	MOV  R1,R24
000623 2f86      	MOV  R24,R22
000624 2d61      	MOV  R22,R1
000625 2e19      	MOV  R1,R25
000626 2f97      	MOV  R25,R23
000627 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000628 2e1b      	MOV  R1,R27
000629 2fbf      	MOV  R27,R31
00062a 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00062b 2e1a      	MOV  R1,R26
00062c 2fae      	MOV  R26,R30
00062d 2de1      	MOV  R30,R1
00062e 9508      	RET
                 
                 __CPD10:
00062f 9730      	SBIW R30,0
000630 4060      	SBCI R22,0
000631 4070      	SBCI R23,0
000632 9508      	RET
                 
                 __CPD02:
000633 2400      	CLR  R0
000634 160a      	CP   R0,R26
000635 060b      	CPC  R0,R27
000636 0608      	CPC  R0,R24
000637 0609      	CPC  R0,R25
000638 9508      	RET
                 
                 __CPD12:
000639 17ea      	CP   R30,R26
00063a 07fb      	CPC  R31,R27
00063b 0768      	CPC  R22,R24
00063c 0779      	CPC  R23,R25
00063d 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00063e 0fac      	ADD  R26,R28
00063f 1fbd      	ADC  R27,R29
                 __INITLOC0:
000640 9005      	LPM  R0,Z+
000641 920d      	ST   X+,R0
000642 958a      	DEC  R24
000643 f7e1      	BRNE __INITLOC0
000644 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  35 r1 :  30 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  10 r17:  35 r18:  18 r19:  17 r20:  28 r21:  68 r22: 111 r23: 109 
r24:  75 r25:  71 r26:  91 r27:  70 r28:  15 r29:   2 r30: 222 r31:  98 
x  :  15 y  : 175 z  :   9 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  12 
adiw  :  10 and   :   5 andi  :  12 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   1 brbs  :   0 brcc  :   6 brcs  :   1 break :   0 breq  :  20 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   5 brmi  :   9 brne  :  23 brpl  :   9 brsh  :   6 brtc  :   2 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 137 
cbi   :   1 cbr   :   2 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  31 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :   8 cpc   :  18 cpi   :  24 cpse  :   0 dec   :  10 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  13 inc   :   2 jmp   :  27 ld    :  21 ldd   :  90 ldi   : 177 
lds   :   8 lpm   :   8 lsl   :  16 lsr   :   5 mov   :  43 movw  :  29 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  18 pop   :  36 push  :  36 rcall :  28 ret   :  63 
reti  :   0 rjmp  :  47 rol   :  28 ror   :  17 sbc   :  10 sbci  :  14 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :  15 sbr   :   2 sbrc  :   1 
sbrs  :   1 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  26 std   :  54 sts   :  29 sub   :   6 subi  :  12 swap  :   0 
tst   :  20 wdr   :   2 
Instructions used: 77 out of 116 (66.4%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c8a   3130     80   3210   32768   9.8%
[.dseg] 0x000100 0x000308      0      8      8    2048   0.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
