
AVRASM ver. 2.1.30  C:\Users\vladu\OneDrive\Documents\!Projects\!Line Follower Robot\Program\List\LineFollowerRobot.asm Mon Apr 13 14:40:04 2020

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega328P
                 ;Program type             : Application
                 ;Clock frequency          : 20,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2303
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x3:
000034 0000
000035 0000
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000038 0000
000039 4000      	.DB  0x0,0x0,0x0,0x40
                 _0x2020060:
C:\Users\vladu\OneDrive\Documents\!Projects\!Line Follower Robot\Program\List\LineFollowerRobot.asm(1114): warning: .cseg .db misalignment - padding zero byte
00003a 0001      	.DB  0x1
                 _0x2020000:
00003b 4e2d
00003c 4e41
00003d 4900
00003e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\vladu\OneDrive\Documents\!Projects\!Line Follower Robot\Program\List\LineFollowerRobot.asm(1117): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000040 0001      	.DW  0x01
000041 0300      	.DW  __seed_G101
000042 0074      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bff5      	OUT  MCUCR,R31
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004a e1f8      	LDI  R31,0x18
00004b 95a8      	WDR
00004c b7a4      	IN   R26,MCUSR
00004d 7fa7      	CBR  R26,8
00004e bfa4      	OUT  MCUSR,R26
00004f 93f0 0060 	STS  WDTCSR,R31
000051 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000053 e08d      	LDI  R24,(14-2)+1
000054 e0a2      	LDI  R26,2
000055 27bb      	CLR  R27
                 __CLEAR_REG:
000056 93ed      	ST   X+,R30
000057 958a      	DEC  R24
000058 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000059 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005b e0a0      	LDI  R26,LOW(__SRAM_START)
00005c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005d 93ed      	ST   X+,R30
00005e 9701      	SBIW R24,1
00005f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000060 e8e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000061 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000062 9185      	LPM  R24,Z+
000063 9195      	LPM  R25,Z+
000064 9700      	SBIW R24,0
000065 f061      	BREQ __GLOBAL_INI_END
000066 91a5      	LPM  R26,Z+
000067 91b5      	LPM  R27,Z+
000068 9005      	LPM  R0,Z+
000069 9015      	LPM  R1,Z+
00006a 01bf      	MOVW R22,R30
00006b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006c 9005      	LPM  R0,Z+
00006d 920d      	ST   X+,R0
00006e 9701      	SBIW R24,1
00006f f7e1      	BRNE __GLOBAL_INI_LOOP
000070 01fb      	MOVW R30,R22
000071 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000072 e0e0      	LDI  R30,__GPIOR0_INIT
000073 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000074 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000075 bfed      	OUT  SPL,R30
000076 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000077 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000078 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000079 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007a 940c 0144 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/**************************** Includes ****************************/
                 ;
                 ;#include "inc/mega328p.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include "inc/mega328p_bits.h"
                 ;#include "inc/delay.h"
                 ;#include "inc/math.h"
                 ;
                 ;/***************************** Defines ****************************/
                 ;
                 ;#define     true                        1
                 ;#define     false                       0
                 ;
                 ;#define     F_CPU                       20000000UL      // Clock frequency of quartz resonator
                 ;
                 ;#define     QTY_OF_SENSORS              4                // Quantity of sensors
                 ;
                 ;// Sensor order in the right -> direction
                 ;#define     ReadSensor1                 PINB & (1 << 2)
                 ;#define     ReadSensor2                 PINB & (1 << 1)
                 ;#define     ReadSensor3                 PINB & (1 << 0)
                 ;#define     ReadSensor4                 PIND & (1 << 7)
                 ;//#define     ReadSensor5                 PIND & (1 << 2)
                 ;//#define     ReadSensor6                 PIND & (1 << 4)
                 ;//#define     ReadSensor7                 PINB & (1 << 0)
                 ;//#define     ReadSensor8                 PIND & (1 << 7)
                 ;//#define     ReadSensor9                 PINx & (1 << x)
                 ;//#define     ReadSensor10                PINx & (1 << x)
                 ;//#define     ReadSensor11                PINx & (1 << x)
                 ;//#define     ReadSensor12                PINx & (1 << x)
                 ;//#define     ReadSensor13                PINx & (1 << x)
                 ;//#define     ReadSensor14                PINx & (1 << x)
                 ;//#define     ReadSensor15                PINx & (1 << x)
                 ;//#define     ReadSensor16                PINx & (1 << x)
                 ;
                 ;//#define     ReadSensorIR                PINx & (1 << x)
                 ;//#define     MEncoderLeft                PINx & (1 << x)
                 ;//#define     MEncoderRight               PINx & (1 << x)
                 ;
                 ;#define     LED_1_ON                      PIND |= (1 << DDD0)
                 ;#define     LED_1_OFF                     PIND &= ~(1 << DDD0)
                 ;#define     LED_2_ON                      PIND |= (1 << DDD1)
                 ;#define     LED_2_OFF                     PIND &= ~(1 << DDD1)
                 ;#define     LED_3_ON                      PIND |= (1 << DDD2)
                 ;#define     LED_3_OFF                     PIND &= ~(1 << DDD2)
                 ;
                 ;/**************************** Function ****************************/
                 ;
                 ;void InitSys (void) {
                 ; 0000 0030 void InitSys (void) {
                 
                 	.CSEG
                 _InitSys:
                 ; 0000 0031 
                 ; 0000 0032     // Motors
                 ; 0000 0033         DDRB |= (1 << DDB3);            //OC2A
00007c 9a23      	SBI  0x4,3
                 ; 0000 0034         DDRD |= (1 << DDD6) |           //OC0A
                 ; 0000 0035                 (1 << DDD5) |           //OC0B
                 ; 0000 0036                 (1 << DDD3);            //OC2B
00007d b1ea      	IN   R30,0xA
00007e 66e8      	ORI  R30,LOW(0x68)
00007f b9ea      	OUT  0xA,R30
                 ; 0000 0037 
                 ; 0000 0038     // SensorLine
                 ; 0000 0039         DDRB &= ~((1 << DDB2) |
                 ; 0000 003A                 (1 << DDB1) |
                 ; 0000 003B                 (1 << DDB0));
000080 b1e4      	IN   R30,0x4
000081 7fe8      	ANDI R30,LOW(0xF8)
000082 b9e4      	OUT  0x4,R30
                 ; 0000 003C         DDRD &= ~(1 << DDD7);
000083 9857      	CBI  0xA,7
                 ; 0000 003D 
                 ; 0000 003E    // Infrared Sensor
                 ; 0000 003F           //DDRD &= ~(0 << DDD0);
                 ; 0000 0040 
                 ; 0000 0041    // LED
                 ; 0000 0042       	DDRD |= (1 << DDD2) | (1 << DDD1) | (1 << DDD0);
000084 b1ea      	IN   R30,0xA
000085 60e7      	ORI  R30,LOW(0x7)
000086 b9ea      	OUT  0xA,R30
                 ; 0000 0043 
                 ; 0000 0044 
                 ; 0000 0045 	// TIMER/COUNTER INITIALIZATION
                 ; 0000 0046 		// Timer/Counter 0
                 ; 0000 0047 		// Fast PWM Mode
                 ; 0000 0048         // Non-inverting mode
                 ; 0000 0049 		// Top = 0xFF
                 ; 0000 004A 		// Prescaler: 1:64
                 ; 0000 004B 		TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
000087 b5e4      	IN   R30,0x24
000088 6ae3      	ORI  R30,LOW(0xA3)
000089 bde4      	OUT  0x24,R30
                 ; 0000 004C 		TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
00008a b5e4      	IN   R30,0x24
00008b 7ae3      	ANDI R30,LOW(0xA3)
00008c bde4      	OUT  0x24,R30
                 ; 0000 004D 		TCCR0B |= (1 << CS01) | (1 << CS00);
00008d b5e5      	IN   R30,0x25
00008e 60e3      	ORI  R30,LOW(0x3)
00008f bde5      	OUT  0x25,R30
                 ; 0000 004E 		TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
000090 b5e5      	IN   R30,0x25
000091 70e3      	ANDI R30,LOW(0x3)
000092 bde5      	OUT  0x25,R30
                 ; 0000 004F 		TCNT0  = 0x00;
000093 e0e0      	LDI  R30,LOW(0)
000094 bde6      	OUT  0x26,R30
                 ; 0000 0050 		OCR0A  = 0x00;    OCR0B  = 0x00;
000095 bde7      	OUT  0x27,R30
000096 bde8      	OUT  0x28,R30
                 ; 0000 0051 
                 ; 0000 0052 		// Timer/Counter 1
                 ; 0000 0053         // Fast PWM 8-bit
                 ; 0000 0054         TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0) | (1 << 3) | (1 << 2) | (1 << WGM11) | (1 << WGM10));
000097 91e0 0080 	LDS  R30,128
000099 70e0      	ANDI R30,LOW(0x0)
00009a 93e0 0080 	STS  128,R30
                 ; 0000 0055         TCCR1B &= ~((1 << ICNC1) | (1 << ICES1) | (1 << 5) | (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS11) | (1 << CS10));
00009c 91e0 0081 	LDS  R30,129
00009e 70e0      	ANDI R30,LOW(0x0)
00009f 93e0 0081 	STS  129,R30
                 ; 0000 0056         TCCR1C = 0x00;
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 93e0 0082 	STS  130,R30
                 ; 0000 0057 		TCNT1H = 0x00;    TCNT1L = 0x00;
0000a4 93e0 0085 	STS  133,R30
0000a6 93e0 0084 	STS  132,R30
                 ; 0000 0058 		ICR1H  = 0x00;    ICR1L  = 0x00;
0000a8 93e0 0087 	STS  135,R30
0000aa 93e0 0086 	STS  134,R30
                 ; 0000 0059 		OCR1AH = 0x00;    OCR1AL = 0x00;
0000ac 93e0 0089 	STS  137,R30
0000ae 93e0 0088 	STS  136,R30
                 ; 0000 005A 		OCR1BH = 0x00;    OCR1BL = 0x00;
0000b0 93e0 008b 	STS  139,R30
0000b2 93e0 008a 	STS  138,R30
                 ; 0000 005B 
                 ; 0000 005C 		// Timer/Counter 2
                 ; 0000 005D 		// Fast PWM Mode
                 ; 0000 005E         // Non-inverting mode
                 ; 0000 005F 		// Top = 0xFF
                 ; 0000 0060 		// Prescaler: 1:64
                 ; 0000 0061 		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
0000b4 91e0 00b0 	LDS  R30,176
0000b6 6ae3      	ORI  R30,LOW(0xA3)
0000b7 93e0 00b0 	STS  176,R30
                 ; 0000 0062 		TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
0000b9 91e0 00b0 	LDS  R30,176
0000bb 7ae3      	ANDI R30,LOW(0xA3)
0000bc 93e0 00b0 	STS  176,R30
                 ; 0000 0063 		TCCR2B |=  (1 << CS22);
0000be 91e0 00b1 	LDS  R30,177
0000c0 60e4      	ORI  R30,4
0000c1 93e0 00b1 	STS  177,R30
                 ; 0000 0064 		TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
0000c3 91e0 00b1 	LDS  R30,177
0000c5 70e4      	ANDI R30,LOW(0x4)
0000c6 93e0 00b1 	STS  177,R30
                 ; 0000 0065 		TCNT2  = 0x00;
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 93e0 00b2 	STS  178,R30
                 ; 0000 0066 		OCR2A  = 0x00;    OCR2B  = 0x00;
0000cb 93e0 00b3 	STS  179,R30
0000cd 93e0 00b4 	STS  180,R30
                 ; 0000 0067 
                 ; 0000 0068 	// Crystal Oscillator division factor: 1
                 ; 0000 0069 		#pragma optsize-
                 ; 0000 006A 			CLKPR  = 0x80;
0000cf e8e0      	LDI  R30,LOW(128)
0000d0 93e0 0061 	STS  97,R30
                 ; 0000 006B 			CLKPR  = 0x00;
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 93e0 0061 	STS  97,R30
                 ; 0000 006C 		#ifdef _OPTIMIZE_SIZE_
                 ; 0000 006D 		#pragma optsize+
                 ; 0000 006E 		#endif
                 ; 0000 006F 
                 ; 0000 0070 	// External Interrupt(s) initialization
                 ; 0000 0071 		// Turn OFF
                 ; 0000 0072 		EICRA  = 0x00;
0000d5 93e0 0069 	STS  105,R30
                 ; 0000 0073 		EIMSK  = 0x00;
0000d7 bbed      	OUT  0x1D,R30
                 ; 0000 0074 		PCICR  = 0x00;
0000d8 93e0 0068 	STS  104,R30
                 ; 0000 0075 
                 ; 0000 0076 	// Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0077 		// Turn OFF
                 ; 0000 0078 		TIMSK0 = 0x00;
0000da 93e0 006e 	STS  110,R30
                 ; 0000 0079 
                 ; 0000 007A 	// Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 007B 		// Turn OFF
                 ; 0000 007C 		TIMSK1 = 0x00;
0000dc 93e0 006f 	STS  111,R30
                 ; 0000 007D 
                 ; 0000 007E 	// Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 007F 		// Turn OFF
                 ; 0000 0080 		TIMSK2 = 0x00;
0000de 93e0 0070 	STS  112,R30
                 ; 0000 0081 
                 ; 0000 0082 	// USART initialization
                 ; 0000 0083 		// Turn OFF
                 ; 0000 0084 		UCSR0B = 0x00;
0000e0 93e0 00c1 	STS  193,R30
                 ; 0000 0085 
                 ; 0000 0086 	// Analog Comparator initialization
                 ; 0000 0087 		// Turn OFF
                 ; 0000 0088 		ACSR   = 0x80;
0000e2 e8e0      	LDI  R30,LOW(128)
0000e3 bfe0      	OUT  0x30,R30
                 ; 0000 0089 		ADCSRB = 0x00;
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 93e0 007b 	STS  123,R30
                 ; 0000 008A 		DIDR1  = 0x00;
0000e7 93e0 007f 	STS  127,R30
                 ; 0000 008B 
                 ; 0000 008C 	// ADC initialization
                 ; 0000 008D 		// Turn OFF
                 ; 0000 008E 		ADCSRA = 0x00;
0000e9 93e0 007a 	STS  122,R30
                 ; 0000 008F 
                 ; 0000 0090 	// SPI initialization
                 ; 0000 0091 		// Turn OFF
                 ; 0000 0092 		SPCR   = 0x00;
0000eb bdec      	OUT  0x2C,R30
                 ; 0000 0093 
                 ; 0000 0094 	// TWI initialization
                 ; 0000 0095 		// Turn OFF
                 ; 0000 0096 		TWCR   = 0x00;
0000ec 93e0 00bc 	STS  188,R30
                 ; 0000 0097 
                 ; 0000 0098 }
0000ee 9508      	RET
                 ;
                 ;unsigned short int ReadSensorLineData (unsigned short int lineData[]) {
                 ; 0000 009A unsigned short int ReadSensorLineData (unsigned short int lineData[]) {
                 _ReadSensorLineData:
                 ; 0000 009B 
                 ; 0000 009C     #ifdef ReadSensor1
                 ; 0000 009D         lineData[0] = ReadSensor1;
0000ef 93ba      	ST   -Y,R27
0000f0 93aa      	ST   -Y,R26
                 ;	lineData -> Y+0
0000f1 b1e3      	IN   R30,0x3
0000f2 70e4      	ANDI R30,LOW(0x4)
0000f3 81a8      	LD   R26,Y
0000f4 81b9      	LDD  R27,Y+1
0000f5 940e 0183 	CALL SUBOPT_0x0
                 ; 0000 009E     #endif
                 ; 0000 009F     #ifdef ReadSensor2
                 ; 0000 00A0         lineData[1] = ReadSensor2;
0000f7 9612      	ADIW R26,2
0000f8 b1e3      	IN   R30,0x3
0000f9 70e2      	ANDI R30,LOW(0x2)
0000fa 940e 0183 	CALL SUBOPT_0x0
                 ; 0000 00A1     #endif
                 ; 0000 00A2     #ifdef ReadSensor3
                 ; 0000 00A3         lineData[2] = ReadSensor3;
0000fc 9614      	ADIW R26,4
0000fd b1e3      	IN   R30,0x3
0000fe 70e1      	ANDI R30,LOW(0x1)
0000ff 940e 0183 	CALL SUBOPT_0x0
                 ; 0000 00A4     #endif
                 ; 0000 00A5     #ifdef ReadSensor4
                 ; 0000 00A6         lineData[3] = ReadSensor4;
000101 9616      	ADIW R26,6
000102 b1e9      	IN   R30,0x9
000103 78e0      	ANDI R30,LOW(0x80)
000104 940e 0183 	CALL SUBOPT_0x0
                 ; 0000 00A7     #endif
                 ; 0000 00A8     #ifdef ReadSensor5
                 ; 0000 00A9         lineData[4] = ReadSensor5;
                 ; 0000 00AA     #endif
                 ; 0000 00AB     #ifdef ReadSensor6
                 ; 0000 00AC         lineData[5] = ReadSensor6;
                 ; 0000 00AD     #endif
                 ; 0000 00AE     #ifdef ReadSensor7
                 ; 0000 00AF         lineData[6] = ReadSensor7;
                 ; 0000 00B0     #endif
                 ; 0000 00B1     #ifdef ReadSensor8
                 ; 0000 00B2         lineData[7] = ReadSensor8;
                 ; 0000 00B3     #endif
                 ; 0000 00B4     #ifdef ReadSensor9
                 ; 0000 00B5         lineData[8] = ReadSensor9;
                 ; 0000 00B6     #endif
                 ; 0000 00B7     #ifdef ReadSensor10
                 ; 0000 00B8         lineData[9] = ReadSensor10;
                 ; 0000 00B9     #endif
                 ; 0000 00BA     #ifdef ReadSensor11
                 ; 0000 00BB         lineData[10] = ReadSensor11;
                 ; 0000 00BC     #endif
                 ; 0000 00BD     #ifdef ReadSensor12
                 ; 0000 00BE         lineData[11] = ReadSensor12;
                 ; 0000 00BF     #endif
                 ; 0000 00C0     #ifdef ReadSensor13
                 ; 0000 00C1         lineData[12] = ReadSensor13;
                 ; 0000 00C2     #endif
                 ; 0000 00C3     #ifdef ReadSensor14
                 ; 0000 00C4         lineData[13] = ReadSensor14;
                 ; 0000 00C5     #endif
                 ; 0000 00C6     #ifdef ReadSensor15
                 ; 0000 00C7         lineData[14] = ReadSensor15;
                 ; 0000 00C8     #endif
                 ; 0000 00C9     #ifdef ReadSensor16
                 ; 0000 00CA         lineData[15] = ReadSensor16;
                 ; 0000 00CB     #endif
                 ; 0000 00CC 
                 ; 0000 00CD     return lineData[QTY_OF_SENSORS];
000106 9618      	ADIW R26,8
000107 940e 0296 	CALL __GETW1P
000109 9622      	ADIW R28,2
00010a 9508      	RET
                 ; 0000 00CE 
                 ; 0000 00CF }
                 ;
                 ;float RobotPosition(void) {
                 ; 0000 00D1 float RobotPosition(void) {
                 _RobotPosition:
                 ; 0000 00D2 
                 ; 0000 00D3     int posSum = 0;
                 ; 0000 00D4     float posMedian = QTY_OF_SENSORS / 2;
                 ; 0000 00D5     unsigned short int sensorLineData[QTY_OF_SENSORS] = {0};
                 ; 0000 00D6     int signalCorrected;
                 ; 0000 00D7     unsigned char i = 0;
                 ; 0000 00D8 
                 ; 0000 00D9     ReadSensorLineData(sensorLineData);
00010b 972c      	SBIW R28,12
00010c e08c      	LDI  R24,12
00010d e0a0      	LDI  R26,LOW(0)
00010e e0b0      	LDI  R27,HIGH(0)
00010f e6e8      	LDI  R30,LOW(_0x3*2)
000110 e0f0      	LDI  R31,HIGH(_0x3*2)
000111 940e 02b5 	CALL __INITLOCB
000113 940e 02a7 	CALL __SAVELOCR6
                 ;	posSum -> R16,R17
                 ;	posMedian -> Y+14
                 ;	sensorLineData -> Y+6
                 ;	signalCorrected -> R18,R19
                 ;	i -> R21
                +
000115 e000     +LDI R16 , LOW ( 0 )
000116 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000117 e050      	LDI  R21,0
000118 01de      	MOVW R26,R28
000119 9616      	ADIW R26,6
00011a dfd4      	RCALL _ReadSensorLineData
                 ; 0000 00DA 
                 ; 0000 00DB     for (i = QTY_OF_SENSORS; i > 0; i--) {
00011b e054      	LDI  R21,LOW(4)
                 _0x5:
00011c 3051      	CPI  R21,1
00011d f0a8      	BRLO _0x6
                 ; 0000 00DC         if (sensorLineData[i]) {
00011e 2fe5      	MOV  R30,R21
00011f e0f0      	LDI  R31,0
000120 01de      	MOVW R26,R28
000121 9616      	ADIW R26,6
000122 0fee      	LSL  R30
000123 1fff      	ROL  R31
000124 0fae      	ADD  R26,R30
000125 1fbf      	ADC  R27,R31
000126 940e 0296 	CALL __GETW1P
000128 9730      	SBIW R30,0
000129 f019      	BREQ _0x7
                 ; 0000 00DD             signalCorrected = 1;
                +
00012a e021     +LDI R18 , LOW ( 1 )
00012b e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 00DE         }
                 ; 0000 00DF         else {
00012c c002      	RJMP _0x8
                 _0x7:
                 ; 0000 00E0             signalCorrected = 0;
                +
00012d e020     +LDI R18 , LOW ( 0 )
00012e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 00E1         }
                 _0x8:
                 ; 0000 00E2 
                 ; 0000 00E3         posSum += signalCorrected;
                +
00012f 0f02     +ADD R16 , R18
000130 1f13     +ADC R17 , R19
                 	__ADDWRR 16,17,18,19
                 ; 0000 00E4     }
000131 5051      	SUBI R21,1
000132 cfe9      	RJMP _0x5
                 _0x6:
                 ; 0000 00E5 
                 ; 0000 00E6     return posMedian - posSum;
000133 01f8      	MOVW R30,R16
                +
000134 85ae     +LDD R26 , Y + 14
000135 85bf     +LDD R27 , Y + 14 + 1
000136 8988     +LDD R24 , Y + 14 + 2
000137 8999     +LDD R25 , Y + 14 + 3
                 	__GETD2S 14
000138 940e 0276 	CALL __CWD1
00013a 940e 01e5 	CALL __CDF1
00013c 940e 029a 	CALL __SWAPD12
00013e 940e 0218 	CALL __SUBF12
000140 940e 02ae 	CALL __LOADLOCR6
000142 9662      	ADIW R28,18
000143 9508      	RET
                 ; 0000 00E7 
                 ; 0000 00E8 }
                 ;
                 ;/****************************** Main ******************************/
                 ;
                 ;void main (void) {
                 ; 0000 00EC void main (void) {
                 _main:
                 ; 0000 00ED 
                 ; 0000 00EE     unsigned char avgSpeed = 150; // средняя скорость моторов
                 ; 0000 00EF     unsigned char kP = 10; // коэффициент пропорциональной обратной связи
                 ; 0000 00F0     signed char error = 0; // Это ошибка положения
                 ; 0000 00F1     signed short int correction = kP * error;
                 ; 0000 00F2 
                 ; 0000 00F3     signed short int leftMotorSpeed = avgSpeed * (1 + correction);
                 ; 0000 00F4     signed short int rightMotorSpeed = avgSpeed * (1 - correction);
                 ; 0000 00F5 
                 ; 0000 00F6     InitSys ();
000144 9724      	SBIW R28,4
                 ;	avgSpeed -> R17
                 ;	kP -> R16
                 ;	error -> R19
                 ;	correction -> R20,R21
                 ;	leftMotorSpeed -> Y+2
                 ;	rightMotorSpeed -> Y+0
000145 e916      	LDI  R17,150
000146 e00a      	LDI  R16,10
000147 e030      	LDI  R19,0
000148 2fa0      	MOV  R26,R16
000149 27bb      	CLR  R27
00014a 2fe3      	MOV  R30,R19
00014b e0f0      	LDI  R31,0
00014c fde7      	SBRC R30,7
00014d efff      	SER  R31
00014e 940e 0283 	CALL __MULW12
000150 01af      	MOVW R20,R30
000151 2fa1      	MOV  R26,R17
000152 27bb      	CLR  R27
000153 01fa      	MOVW R30,R20
000154 9631      	ADIW R30,1
000155 940e 0283 	CALL __MULW12
000157 83ea      	STD  Y+2,R30
000158 83fb      	STD  Y+2+1,R31
000159 2fa1      	MOV  R26,R17
00015a 27bb      	CLR  R27
00015b e0e1      	LDI  R30,LOW(1)
00015c e0f0      	LDI  R31,HIGH(1)
00015d 1be4      	SUB  R30,R20
00015e 0bf5      	SBC  R31,R21
00015f 940e 0283 	CALL __MULW12
000161 83e8      	ST   Y,R30
000162 83f9      	STD  Y+1,R31
000163 df18      	RCALL _InitSys
                 ; 0000 00F7 
                 ; 0000 00F8     error = RobotPosition();
000164 dfa6      	RCALL _RobotPosition
000165 940e 01ae 	CALL __CFD1
000167 2f3e      	MOV  R19,R30
                 ; 0000 00F9 
                 ; 0000 00FA     if (leftMotorSpeed >= 0) {
000168 81ab      	LDD  R26,Y+3
000169 23aa      	TST  R26
00016a f02a      	BRMI _0x9
                 ; 0000 00FB         OCR2A = leftMotorSpeed;
00016b 81ea      	LDD  R30,Y+2
00016c 93e0 00b3 	STS  179,R30
                 ; 0000 00FC         OCR2B = 0;
00016e e0e0      	LDI  R30,LOW(0)
00016f c004      	RJMP _0x11
                 ; 0000 00FD     }
                 ; 0000 00FE     else {
                 _0x9:
                 ; 0000 00FF         OCR2A = 0;
000170 e0e0      	LDI  R30,LOW(0)
000171 93e0 00b3 	STS  179,R30
                 ; 0000 0100         OCR2B = leftMotorSpeed;
000173 81ea      	LDD  R30,Y+2
                 _0x11:
000174 93e0 00b4 	STS  180,R30
                 ; 0000 0101     }
                 ; 0000 0102 
                 ; 0000 0103     if (rightMotorSpeed >= 0) {
000176 81a9      	LDD  R26,Y+1
000177 23aa      	TST  R26
000178 f022      	BRMI _0xB
                 ; 0000 0104         OCR0A = rightMotorSpeed;
000179 81e8      	LD   R30,Y
00017a bde7      	OUT  0x27,R30
                 ; 0000 0105         OCR0B = 0;
00017b e0e0      	LDI  R30,LOW(0)
00017c c003      	RJMP _0x12
                 ; 0000 0106     }
                 ; 0000 0107     else {
                 _0xB:
                 ; 0000 0108         OCR0A = 0;
00017d e0e0      	LDI  R30,LOW(0)
00017e bde7      	OUT  0x27,R30
                 ; 0000 0109         OCR0B = rightMotorSpeed;
00017f 81e8      	LD   R30,Y
                 _0x12:
000180 bde8      	OUT  0x28,R30
                 ; 0000 010A     }
                 ; 0000 010B 
                 ; 0000 010C 	// Waiting for a signal on IR sensor
                 ; 0000 010D     #ifdef SensorIR
                 ; 0000 010E         while (SensorIR) {
                 ; 0000 010F             LED_ON;
                 ; 0000 0110             delay_ms (25);
                 ; 0000 0111             LED_OFF;
                 ; 0000 0112             delay_ms (25);
                 ; 0000 0113         }
                 ; 0000 0114     #endif
                 ; 0000 0115 
                 ; 0000 0116 	//delay_ms (1000);
                 ; 0000 0117 
                 ; 0000 0118     while (true) {
                 _0xD:
                 ; 0000 0119 
                 ; 0000 011A     }
000181 cfff      	RJMP _0xD
                 ; 0000 011B 
                 ; 0000 011C }
                 _0x10:
000182 cfff      	RJMP _0x10
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G101:
000300           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
000183 e0f0      	LDI  R31,0
000184 93ed      	ST   X+,R30
000185 93fc      	ST   X,R31
000186 81a8      	LD   R26,Y
000187 81b9      	LDD  R27,Y+1
000188 9508      	RET
                 
                 
                 	.CSEG
                 __REPACK:
000189 e850      	LDI  R21,0x80
00018a 2757      	EOR  R21,R23
00018b f411      	BRNE __REPACK0
00018c 935f      	PUSH R21
00018d c0ca      	RJMP __ZERORES
                 __REPACK0:
00018e 3f5f      	CPI  R21,0xFF
00018f f031      	BREQ __REPACK1
000190 0f66      	LSL  R22
000191 0c00      	LSL  R0
000192 9557      	ROR  R21
000193 9567      	ROR  R22
000194 2f75      	MOV  R23,R21
000195 9508      	RET
                 __REPACK1:
000196 935f      	PUSH R21
000197 2000      	TST  R0
000198 f00a      	BRMI __REPACK2
000199 c0ca      	RJMP __MAXRES
                 __REPACK2:
00019a c0c3      	RJMP __MINRES
                 
                 __UNPACK:
00019b e850      	LDI  R21,0x80
00019c 2e19      	MOV  R1,R25
00019d 2215      	AND  R1,R21
00019e 0f88      	LSL  R24
00019f 1f99      	ROL  R25
0001a0 2795      	EOR  R25,R21
0001a1 0f55      	LSL  R21
0001a2 9587      	ROR  R24
                 
                 __UNPACK1:
0001a3 e850      	LDI  R21,0x80
0001a4 2e07      	MOV  R0,R23
0001a5 2205      	AND  R0,R21
0001a6 0f66      	LSL  R22
0001a7 1f77      	ROL  R23
0001a8 2775      	EOR  R23,R21
0001a9 0f55      	LSL  R21
0001aa 9567      	ROR  R22
0001ab 9508      	RET
                 
                 __CFD1U:
0001ac 9468      	SET
0001ad c001      	RJMP __CFD1U0
                 __CFD1:
0001ae 94e8      	CLT
                 __CFD1U0:
0001af 935f      	PUSH R21
0001b0 dff2      	RCALL __UNPACK1
0001b1 3870      	CPI  R23,0x80
0001b2 f018      	BRLO __CFD10
0001b3 3f7f      	CPI  R23,0xFF
0001b4 f408      	BRCC __CFD10
0001b5 c0a2      	RJMP __ZERORES
                 __CFD10:
0001b6 e156      	LDI  R21,22
0001b7 1b57      	SUB  R21,R23
0001b8 f4aa      	BRPL __CFD11
0001b9 9551      	NEG  R21
0001ba 3058      	CPI  R21,8
0001bb f40e      	BRTC __CFD19
0001bc 3059      	CPI  R21,9
                 __CFD19:
0001bd f030      	BRLO __CFD17
0001be efef      	SER  R30
0001bf efff      	SER  R31
0001c0 ef6f      	SER  R22
0001c1 e77f      	LDI  R23,0x7F
0001c2 f977      	BLD  R23,7
0001c3 c01a      	RJMP __CFD15
                 __CFD17:
0001c4 2777      	CLR  R23
0001c5 2355      	TST  R21
0001c6 f0b9      	BREQ __CFD15
                 __CFD18:
0001c7 0fee      	LSL  R30
0001c8 1fff      	ROL  R31
0001c9 1f66      	ROL  R22
0001ca 1f77      	ROL  R23
0001cb 955a      	DEC  R21
0001cc f7d1      	BRNE __CFD18
0001cd c010      	RJMP __CFD15
                 __CFD11:
0001ce 2777      	CLR  R23
                 __CFD12:
0001cf 3058      	CPI  R21,8
0001d0 f028      	BRLO __CFD13
0001d1 2fef      	MOV  R30,R31
0001d2 2ff6      	MOV  R31,R22
0001d3 2f67      	MOV  R22,R23
0001d4 5058      	SUBI R21,8
0001d5 cff9      	RJMP __CFD12
                 __CFD13:
0001d6 2355      	TST  R21
0001d7 f031      	BREQ __CFD15
                 __CFD14:
0001d8 9576      	LSR  R23
0001d9 9567      	ROR  R22
0001da 95f7      	ROR  R31
0001db 95e7      	ROR  R30
0001dc 955a      	DEC  R21
0001dd f7d1      	BRNE __CFD14
                 __CFD15:
0001de 2000      	TST  R0
0001df f40a      	BRPL __CFD16
0001e0 d08d      	RCALL __ANEGD1
                 __CFD16:
0001e1 915f      	POP  R21
0001e2 9508      	RET
                 
                 __CDF1U:
0001e3 9468      	SET
0001e4 c001      	RJMP __CDF1U0
                 __CDF1:
0001e5 94e8      	CLT
                 __CDF1U0:
0001e6 9730      	SBIW R30,0
0001e7 4060      	SBCI R22,0
0001e8 4070      	SBCI R23,0
0001e9 f0b1      	BREQ __CDF10
0001ea 2400      	CLR  R0
0001eb f026      	BRTS __CDF11
0001ec 2377      	TST  R23
0001ed f412      	BRPL __CDF11
0001ee 9400      	COM  R0
0001ef d07e      	RCALL __ANEGD1
                 __CDF11:
0001f0 2e17      	MOV  R1,R23
0001f1 e17e      	LDI  R23,30
0001f2 2011      	TST  R1
                 __CDF12:
0001f3 f032      	BRMI __CDF13
0001f4 957a      	DEC  R23
0001f5 0fee      	LSL  R30
0001f6 1fff      	ROL  R31
0001f7 1f66      	ROL  R22
0001f8 1c11      	ROL  R1
0001f9 cff9      	RJMP __CDF12
                 __CDF13:
0001fa 2fef      	MOV  R30,R31
0001fb 2ff6      	MOV  R31,R22
0001fc 2d61      	MOV  R22,R1
0001fd 935f      	PUSH R21
0001fe df8a      	RCALL __REPACK
0001ff 915f      	POP  R21
                 __CDF10:
000200 9508      	RET
                 
                 __SWAPACC:
000201 934f      	PUSH R20
000202 01af      	MOVW R20,R30
000203 01fd      	MOVW R30,R26
000204 01da      	MOVW R26,R20
000205 01ab      	MOVW R20,R22
000206 01bc      	MOVW R22,R24
000207 01ca      	MOVW R24,R20
000208 2d40      	MOV  R20,R0
000209 2c01      	MOV  R0,R1
00020a 2e14      	MOV  R1,R20
00020b 914f      	POP  R20
00020c 9508      	RET
                 
                 __UADD12:
00020d 0fea      	ADD  R30,R26
00020e 1ffb      	ADC  R31,R27
00020f 1f68      	ADC  R22,R24
000210 9508      	RET
                 
                 __NEGMAN1:
000211 95e0      	COM  R30
000212 95f0      	COM  R31
000213 9560      	COM  R22
000214 5fef      	SUBI R30,-1
000215 4fff      	SBCI R31,-1
000216 4f6f      	SBCI R22,-1
000217 9508      	RET
                 
                 __SUBF12:
000218 935f      	PUSH R21
000219 df81      	RCALL __UNPACK
00021a 3890      	CPI  R25,0x80
00021b f149      	BREQ __ADDF129
00021c e850      	LDI  R21,0x80
00021d 2615      	EOR  R1,R21
                 
                 __ADDF120:
00021e 3870      	CPI  R23,0x80
00021f f121      	BREQ __ADDF128
                 __ADDF121:
000220 2f57      	MOV  R21,R23
000221 1b59      	SUB  R21,R25
000222 f12b      	BRVS __ADDF1211
000223 f412      	BRPL __ADDF122
000224 dfdc      	RCALL __SWAPACC
000225 cffa      	RJMP __ADDF121
                 __ADDF122:
000226 3158      	CPI  R21,24
000227 f018      	BRLO __ADDF123
000228 27aa      	CLR  R26
000229 27bb      	CLR  R27
00022a 2788      	CLR  R24
                 __ADDF123:
00022b 3058      	CPI  R21,8
00022c f028      	BRLO __ADDF124
00022d 2fab      	MOV  R26,R27
00022e 2fb8      	MOV  R27,R24
00022f 2788      	CLR  R24
000230 5058      	SUBI R21,8
000231 cff9      	RJMP __ADDF123
                 __ADDF124:
000232 2355      	TST  R21
000233 f029      	BREQ __ADDF126
                 __ADDF125:
000234 9586      	LSR  R24
000235 95b7      	ROR  R27
000236 95a7      	ROR  R26
000237 955a      	DEC  R21
000238 f7d9      	BRNE __ADDF125
                 __ADDF126:
000239 2d50      	MOV  R21,R0
00023a 2551      	EOR  R21,R1
00023b f072      	BRMI __ADDF127
00023c dfd0      	RCALL __UADD12
00023d f438      	BRCC __ADDF129
00023e 9567      	ROR  R22
00023f 95f7      	ROR  R31
000240 95e7      	ROR  R30
000241 9573      	INC  R23
000242 f413      	BRVC __ADDF129
000243 c020      	RJMP __MAXRES
                 __ADDF128:
000244 dfbc      	RCALL __SWAPACC
                 __ADDF129:
000245 df43      	RCALL __REPACK
000246 915f      	POP  R21
000247 9508      	RET
                 __ADDF1211:
000248 f7d8      	BRCC __ADDF128
000249 cffb      	RJMP __ADDF129
                 __ADDF127:
00024a 1bea      	SUB  R30,R26
00024b 0bfb      	SBC  R31,R27
00024c 0b68      	SBC  R22,R24
00024d f051      	BREQ __ZERORES
00024e f410      	BRCC __ADDF1210
00024f 9400      	COM  R0
000250 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
000251 2366      	TST  R22
000252 f392      	BRMI __ADDF129
000253 0fee      	LSL  R30
000254 1fff      	ROL  R31
000255 1f66      	ROL  R22
000256 957a      	DEC  R23
000257 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000258 27ee      	CLR  R30
000259 27ff      	CLR  R31
00025a 2766      	CLR  R22
00025b 2777      	CLR  R23
00025c 915f      	POP  R21
00025d 9508      	RET
                 
                 __MINRES:
00025e efef      	SER  R30
00025f efff      	SER  R31
000260 e76f      	LDI  R22,0x7F
000261 ef7f      	SER  R23
000262 915f      	POP  R21
000263 9508      	RET
                 
                 __MAXRES:
000264 efef      	SER  R30
000265 efff      	SER  R31
000266 e76f      	LDI  R22,0x7F
000267 e77f      	LDI  R23,0x7F
000268 915f      	POP  R21
000269 9508      	RET
                 
                 __ANEGW1:
00026a 95f1      	NEG  R31
00026b 95e1      	NEG  R30
00026c 40f0      	SBCI R31,0
00026d 9508      	RET
                 
                 __ANEGD1:
00026e 95f0      	COM  R31
00026f 9560      	COM  R22
000270 9570      	COM  R23
000271 95e1      	NEG  R30
000272 4fff      	SBCI R31,-1
000273 4f6f      	SBCI R22,-1
000274 4f7f      	SBCI R23,-1
000275 9508      	RET
                 
                 __CWD1:
000276 2f6f      	MOV  R22,R31
000277 0f66      	ADD  R22,R22
000278 0b66      	SBC  R22,R22
000279 2f76      	MOV  R23,R22
00027a 9508      	RET
                 
                 __MULW12U:
00027b 9ffa      	MUL  R31,R26
00027c 2df0      	MOV  R31,R0
00027d 9feb      	MUL  R30,R27
00027e 0df0      	ADD  R31,R0
00027f 9fea      	MUL  R30,R26
000280 2de0      	MOV  R30,R0
000281 0df1      	ADD  R31,R1
000282 9508      	RET
                 
                 __MULW12:
000283 d004      	RCALL __CHKSIGNW
000284 dff6      	RCALL __MULW12U
000285 f40e      	BRTC __MULW121
000286 dfe3      	RCALL __ANEGW1
                 __MULW121:
000287 9508      	RET
                 
                 __CHKSIGNW:
000288 94e8      	CLT
000289 fff7      	SBRS R31,7
00028a c002      	RJMP __CHKSW1
00028b dfde      	RCALL __ANEGW1
00028c 9468      	SET
                 __CHKSW1:
00028d ffb7      	SBRS R27,7
00028e c006      	RJMP __CHKSW2
00028f 95a0      	COM  R26
000290 95b0      	COM  R27
000291 9611      	ADIW R26,1
000292 f800      	BLD  R0,0
000293 9403      	INC  R0
000294 fa00      	BST  R0,0
                 __CHKSW2:
000295 9508      	RET
                 
                 __GETW1P:
000296 91ed      	LD   R30,X+
000297 91fc      	LD   R31,X
000298 9711      	SBIW R26,1
000299 9508      	RET
                 
                 __SWAPD12:
00029a 2e18      	MOV  R1,R24
00029b 2f86      	MOV  R24,R22
00029c 2d61      	MOV  R22,R1
00029d 2e19      	MOV  R1,R25
00029e 2f97      	MOV  R25,R23
00029f 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0002a0 2e1b      	MOV  R1,R27
0002a1 2fbf      	MOV  R27,R31
0002a2 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0002a3 2e1a      	MOV  R1,R26
0002a4 2fae      	MOV  R26,R30
0002a5 2de1      	MOV  R30,R1
0002a6 9508      	RET
                 
                 __SAVELOCR6:
0002a7 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002a8 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002a9 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002aa 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002ab 931a      	ST   -Y,R17
0002ac 930a      	ST   -Y,R16
0002ad 9508      	RET
                 
                 __LOADLOCR6:
0002ae 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002af 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0002b0 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002b1 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002b2 8119      	LDD  R17,Y+1
0002b3 8108      	LD   R16,Y
0002b4 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0002b5 0fac      	ADD  R26,R28
0002b6 1fbd      	ADC  R27,R29
                 __INITLOC0:
0002b7 9005      	LPM  R0,Z+
0002b8 920d      	ST   X+,R0
0002b9 958a      	DEC  R24
0002ba f7e1      	BRNE __INITLOC0
0002bb 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  23 r1 :  20 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:   7 r18:   5 r19:   8 r20:  13 r21:  54 r22:  37 r23:  32 
r24:  22 r25:  10 r26:  42 r27:  24 r28:   8 r29:   2 r30: 157 r31:  47 
x  :   8 y  :  32 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   7 
adiw  :  10 and   :   2 andi  :  11 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  10 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   6 brne  :   8 brpl  :   4 brsh  :   0 brtc  :   2 
brts  :   1 brvc  :   2 brvs  :   1 bset  :   0 bst   :   1 call  :  17 
cbi   :   1 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :  10 
cp    :   0 cpc   :   0 cpi   :  11 cpse  :   0 dec   :   7 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  12 inc   :   2 jmp   :  27 ld    :   7 ldd   :  15 ldi   :  57 
lds   :   6 lpm   :   8 lsl   :  10 lsr   :   2 mov   :  39 movw  :  14 
mul   :   3 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   6 out   :  23 pop   :   7 push  :   6 rcall :  17 ret   :  26 
reti  :   0 rjmp  :  23 rol   :  11 ror   :  12 sbc   :   4 sbci  :   8 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   1 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   9 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :   3 sts   :  35 sub   :   4 subi  :   4 swap  :   0 
tst   :  10 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000578   1368     32   1400   32768   4.3%
[.dseg] 0x000100 0x000304      0      4      4    2303   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
