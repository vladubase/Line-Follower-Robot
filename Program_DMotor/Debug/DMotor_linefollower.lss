
DMotor_linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000166  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094c  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ba  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000524  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	// DEFINITION OF VARIABLES
		char USART_message[1];
		uint8_t i = 0;
	
	// MICROCONTROLLER INITIALIZATION
		InitSYS ();
  96:	0e 94 68 00 	call	0xd0	; 0xd0 <InitSYS>
		InitTIM ();
  9a:	0e 94 6f 00 	call	0xde	; 0xde <InitTIM>
		InitUSART ();
  9e:	0e 94 9d 00 	call	0x13a	; 0x13a <InitUSART>
				
		DDRD |= (1 << DDD7);	// output
  a2:	57 9a       	sbi	0x0a, 7	; 10
	
	// MAIN CYCLE
		while (true) {
			USART_message[0] = USART_Receive ();
  a4:	0e 94 a9 00 	call	0x152	; 0x152 <USART_Receive>
			
			if (USART_message[0] != "Q") {
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	80 50       	subi	r24, 0x00	; 0
  ac:	91 40       	sbci	r25, 0x01	; 1
  ae:	d1 f3       	breq	.-12     	; 0xa4 <main+0xe>
  b0:	9a e0       	ldi	r25, 0x0A	; 10
				for (i = 0; i < 10; i++) {
					PORTD ^= (1 << PORTD7);
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	80 58       	subi	r24, 0x80	; 128
  b6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	3f e9       	ldi	r19, 0x9F	; 159
  ba:	86 e8       	ldi	r24, 0x86	; 134
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	31 50       	subi	r19, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	20 40       	sbci	r18, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x28>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x32>
  c8:	00 00       	nop
  ca:	91 50       	subi	r25, 0x01	; 1
	// MAIN CYCLE
		while (true) {
			USART_message[0] = USART_Receive ();
			
			if (USART_message[0] != "Q") {
				for (i = 0; i < 10; i++) {
  cc:	91 f7       	brne	.-28     	; 0xb2 <main+0x1c>
  ce:	ea cf       	rjmp	.-44     	; 0xa4 <main+0xe>

000000d0 <InitSYS>:
			DDRx &= ~(1 << DDxx);
		#endif /* READ_SENSOR_IR */

	// Crystal Oscillator division factor: 1
		#pragma optsize-
			CLKPR |= (1 << CLKPCE);
  d0:	e1 e6       	ldi	r30, 0x61	; 97
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
			CLKPR = 0x00;
  da:	10 82       	st	Z, r1
  dc:	08 95       	ret

000000de <InitTIM>:
/************************************** Function **************************************/

void InitTIM (void) {
	// Motors
	// Output mode
	DDRB |= (1 << DDB3);	// OC2A
  de:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= (1 << DDD6) |	// OC0A
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	88 66       	ori	r24, 0x68	; 104
  e4:	8a b9       	out	0x0a, r24	; 10
	// Timer/Counter 0
	// Fast PWM Mode
	// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	// TOP = 0xFF
	// Prescaler: 1:64
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	83 6a       	ori	r24, 0xA3	; 163
  ea:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
  ec:	84 b5       	in	r24, 0x24	; 36
  ee:	83 7a       	andi	r24, 0xA3	; 163
  f0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);
  f2:	85 b5       	in	r24, 0x25	; 37
  f4:	83 60       	ori	r24, 0x03	; 3
  f6:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
  f8:	85 b5       	in	r24, 0x25	; 37
  fa:	83 70       	andi	r24, 0x03	; 3
  fc:	85 bd       	out	0x25, r24	; 37
	TCNT0  = 0x00;
  fe:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0x00;
 100:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	OCR0A  = 0x00;	OCR0B  = 0x00;
 104:	17 bc       	out	0x27, r1	; 39
 106:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 2
	// Fast PWM Mode
	// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	// TOP = 0xFF
	// Prescaler: 1:64
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
 108:	e0 eb       	ldi	r30, 0xB0	; 176
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	83 6a       	ori	r24, 0xA3	; 163
 110:	80 83       	st	Z, r24
	TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
 112:	80 81       	ld	r24, Z
 114:	83 7a       	andi	r24, 0xA3	; 163
 116:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);
 118:	e1 eb       	ldi	r30, 0xB1	; 177
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	80 83       	st	Z, r24
	TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
 122:	80 81       	ld	r24, Z
 124:	84 70       	andi	r24, 0x04	; 4
 126:	80 83       	st	Z, r24
	TCNT2  = 0x00;
 128:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	TIMSK2 = 0x00;
 12c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	OCR2A  = 0x00;	OCR2B  = 0x00;
 130:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 134:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
 138:	08 95       	ret

0000013a <InitUSART>:

/************************************** Function **************************************/

void InitUSART () {
	/* Set baud rate */
	UBRR0H = (uint8_t) (MYUBRR >> 8);
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) MYUBRR;
 140:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 144:	88 e1       	ldi	r24, 0x18	; 24
 146:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 14a:	8e e0       	ldi	r24, 0x0E	; 14
 14c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 150:	08 95       	ret

00000152 <USART_Receive>:
}

uint8_t USART_Receive (void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1 << RXC0)));
 152:	e0 ec       	ldi	r30, 0xC0	; 192
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	88 23       	and	r24, r24
 15a:	ec f7       	brge	.-6      	; 0x156 <USART_Receive+0x4>
	
	/* Get and return received data from buffer */
	return UDR0;
 15c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
