
DMotor_linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f3  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000778  00000000  00000000  00000b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048d  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001c61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
		register uint8_t i = 0;
		register int16_t left_motor_speed = 0,
						right_motor_speed = 0;

	// MICROCONTROLLER INITIALIZATION
		InitSYS ();
  90:	0e 94 5f 00 	call	0xbe	; 0xbe <InitSYS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f e3       	ldi	r18, 0x3F	; 63
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	9f e0       	ldi	r25, 0x0F	; 15
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0xa>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x14>
  a4:	00 00       	nop
	_delay_ms (5000);									// This delay is required by the competition rules
	
	
	// MAIN CYCLE
		while (true) {
			I2C_Start ();
  a6:	0e 94 56 00 	call	0xac	; 0xac <I2C_Start>
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <main+0x16>

000000ac <I2C_Start>:
	*	@brief	This function setup I2C.
	*	@param	None.
	*	@retval	None
	*/
   
   TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  ac:	84 ea       	ldi	r24, 0xA4	; 164
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
   while (!(TWCR & (1 << TWINT)));
  b2:	ec eb       	ldi	r30, 0xBC	; 188
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	ec f7       	brge	.-6      	; 0xb6 <I2C_Start+0xa>
}
  bc:	08 95       	ret

000000be <InitSYS>:
/************************************** Function **************************************/

void InitSYS (void) {
	// Motors
	// Output mode
		DDRB |= (1 << DDB3);	// OC2A
  be:	23 9a       	sbi	0x04, 3	; 4
		DDRD |= (1 << DDD6) |	// OC0A
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	88 66       	ori	r24, 0x68	; 104
  c4:	8a b9       	out	0x0a, r24	; 10
				(1 << DDD5) |	// OC0B
				(1 << DDD3);	// OC2B

	// SensorLine
	// Input mode
		DDRB &= ~((1 << DDB2) | (1 << DDB1) | (1 << DDB0));
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	88 7f       	andi	r24, 0xF8	; 248
  ca:	84 b9       	out	0x04, r24	; 4
		DDRD &= ~(1 << DDD7);
  cc:	57 98       	cbi	0x0a, 7	; 10
	// Timer/Counter 0
	// Fast PWM Mode
	// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	// TOP = 0xFF
	// Prescaler: 1:64
		TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  ce:	84 b5       	in	r24, 0x24	; 36
  d0:	83 6a       	ori	r24, 0xA3	; 163
  d2:	84 bd       	out	0x24, r24	; 36
		TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
  d4:	84 b5       	in	r24, 0x24	; 36
  d6:	83 7a       	andi	r24, 0xA3	; 163
  d8:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= (1 << CS01) | (1 << CS00);
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
  e0:	85 b5       	in	r24, 0x25	; 37
  e2:	83 70       	andi	r24, 0x03	; 3
  e4:	85 bd       	out	0x25, r24	; 37
		TCNT0  = 0x00;
  e6:	16 bc       	out	0x26, r1	; 38
		TIMSK0 = 0x00;
  e8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
		OCR0A  = 0x00;	OCR0B  = 0x00;
  ec:	17 bc       	out	0x27, r1	; 39
  ee:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 1
	// Fast PWM 10-bit Mode
	// Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM (non-inverting mode)
	// TOP = 0x03FF
	// Prescaler: 1:64
		TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
  f0:	e0 e8       	ldi	r30, 0x80	; 128
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	83 6a       	ori	r24, 0xA3	; 163
  f8:	80 83       	st	Z, r24
		TCCR1A &= ~((1 << COM1A0) | (1 << COM1B0) | (1 << 3) | (1 << 2));
  fa:	80 81       	ld	r24, Z
  fc:	83 7a       	andi	r24, 0xA3	; 163
  fe:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
 100:	e1 e8       	ldi	r30, 0x81	; 129
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8b 60       	ori	r24, 0x0B	; 11
 108:	80 83       	st	Z, r24
		TCCR1B &= ~((1 << ICNC1) | (1 << ICES1) | (1 << 5) | (1 << WGM13) | (1 << CS12));
 10a:	80 81       	ld	r24, Z
 10c:	8b 70       	andi	r24, 0x0B	; 11
 10e:	80 83       	st	Z, r24
		TCCR1C = 0x00;
 110:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
		TCNT1H = 0x00;	TCNT1L = 0x00;
 114:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 118:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		TIMSK1 = 0x00;
 11c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		ICR1H  = 0x00;	ICR1L  = 0x00;
 120:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 124:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
		OCR1AH = 0x00;	OCR1AL = 0x00;
 128:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 12c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		OCR1BH = 0x00;	OCR1BL = 0x00;
 130:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 134:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	// Timer/Counter 2
	// Fast PWM Mode
	// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	// TOP = 0xFF
	// Prescaler: 1:64
		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
 138:	e0 eb       	ldi	r30, 0xB0	; 176
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	83 6a       	ori	r24, 0xA3	; 163
 140:	80 83       	st	Z, r24
		TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
 142:	80 81       	ld	r24, Z
 144:	83 7a       	andi	r24, 0xA3	; 163
 146:	80 83       	st	Z, r24
		TCCR2B |= (1 << CS22);
 148:	e1 eb       	ldi	r30, 0xB1	; 177
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	80 83       	st	Z, r24
		TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
 152:	80 81       	ld	r24, Z
 154:	84 70       	andi	r24, 0x04	; 4
 156:	80 83       	st	Z, r24
		TCNT2  = 0x00;
 158:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
		TIMSK2 = 0x00;
 15c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		OCR2A  = 0x00;	OCR2B  = 0x00;
 160:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 164:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

	// Crystal Oscillator division factor: 1
		#pragma optsize-
			CLKPR |= (1 << CLKPCE);
 168:	e1 e6       	ldi	r30, 0x61	; 97
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	80 83       	st	Z, r24
			CLKPR = 0x00;
 172:	10 82       	st	Z, r1
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
