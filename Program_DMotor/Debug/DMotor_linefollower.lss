
DMotor_linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cc  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000758  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c4  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c9  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000020  00000000  00000000  00001bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
void main (void) {
	// DEFINITION OF VARIABLES
		uint8_t motor_delta = 81;
		
	// MICROCONTROLLER INITIALIZATION
		InitSYS ();
  80:	0e 94 4b 00 	call	0x96	; 0x96 <InitSYS>
		InitTIM ();
  84:	0e 94 52 00 	call	0xa4	; 0xa4 <InitTIM>
		InitUSART ();
  88:	0e 94 80 00 	call	0x100	; 0x100 <InitUSART>
	
	// MAIN CYCLE
		while (true) {
			motor_delta = USART_ReceiveByte ();
  8c:	0e 94 91 00 	call	0x122	; 0x122 <USART_ReceiveByte>
			//OCR0A = 0;
			//OCR0B = 0;
			//OCR2A = 0;
			//OCR2B = 0;
			
			USART_SendByte (motor_delta);
  90:	0e 94 99 00 	call	0x132	; 0x132 <USART_SendByte>
  94:	fb cf       	rjmp	.-10     	; 0x8c <main+0xc>

00000096 <InitSYS>:
			DDRx &= ~(1 << DDxx);
		#endif /* READ_SENSOR_IR */

	// Crystal Oscillator division factor: 1
		#pragma optsize-
			CLKPR |= (1 << CLKPCE);
  96:	e1 e6       	ldi	r30, 0x61	; 97
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	80 83       	st	Z, r24
			CLKPR = 0x00;
  a0:	10 82       	st	Z, r1
  a2:	08 95       	ret

000000a4 <InitTIM>:
/************************************** Function **************************************/

void InitTIM (void) {
	// Motors
	// Output mode
	DDRB |= (1 << DDB3);	// OC2A
  a4:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= (1 << DDD6) |	// OC0A
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	88 66       	ori	r24, 0x68	; 104
  aa:	8a b9       	out	0x0a, r24	; 10
	// Timer/Counter 0
	// Fast PWM Mode
	// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	// TOP = 0xFF
	// Prescaler: 1:64
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  ac:	84 b5       	in	r24, 0x24	; 36
  ae:	83 6a       	ori	r24, 0xA3	; 163
  b0:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
  b2:	84 b5       	in	r24, 0x24	; 36
  b4:	83 7a       	andi	r24, 0xA3	; 163
  b6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
  be:	85 b5       	in	r24, 0x25	; 37
  c0:	83 70       	andi	r24, 0x03	; 3
  c2:	85 bd       	out	0x25, r24	; 37
	TCNT0  = 0x00;
  c4:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0x00;
  c6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	OCR0A  = 0x00;	OCR0B  = 0x00;
  ca:	17 bc       	out	0x27, r1	; 39
  cc:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 2
	// Fast PWM Mode
	// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	// TOP = 0xFF
	// Prescaler: 1:64
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
  ce:	e0 eb       	ldi	r30, 0xB0	; 176
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	83 6a       	ori	r24, 0xA3	; 163
  d6:	80 83       	st	Z, r24
	TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
  d8:	80 81       	ld	r24, Z
  da:	83 7a       	andi	r24, 0xA3	; 163
  dc:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);
  de:	e1 eb       	ldi	r30, 0xB1	; 177
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	80 83       	st	Z, r24
	TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
  e8:	80 81       	ld	r24, Z
  ea:	84 70       	andi	r24, 0x04	; 4
  ec:	80 83       	st	Z, r24
	TCNT2  = 0x00;
  ee:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	TIMSK2 = 0x00;
  f2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	OCR2A  = 0x00;	OCR2B  = 0x00;
  f6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
  fa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
  fe:	08 95       	ret

00000100 <InitUSART>:

/************************************** Function **************************************/

void InitUSART () {
	/* Set baud rate 230400 */
	UBRR0 = 4;											// F_CPU / (USART_BAUD * 16) - 1.
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 108:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	/* Enable receiver and transmitter */
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 10c:	e1 ec       	ldi	r30, 0xC1	; 193
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 61       	ori	r24, 0x18	; 24
 114:	80 83       	st	Z, r24
	
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 116:	e2 ec       	ldi	r30, 0xC2	; 194
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	86 60       	ori	r24, 0x06	; 6
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <USART_ReceiveByte>:
}

uint8_t USART_ReceiveByte (void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1 << RXC0)));
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <USART_ReceiveByte+0x4>
	
	/* Get and return received data from buffer */
	return UDR0;
 12c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 130:	08 95       	ret

00000132 <USART_SendByte>:

void USART_SendByte (uint8_t data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)));
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	95 ff       	sbrs	r25, 5
 13a:	fd cf       	rjmp	.-6      	; 0x136 <USART_SendByte+0x4>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
