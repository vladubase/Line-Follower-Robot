
DMotor_linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00000b94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093c  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000787  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000499  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f0  00000000  00000000  0000268e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000287e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <ldexp+0x3c>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a0 32       	cpi	r26, 0x20	; 32
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 89 00 	call	0x112	; 0x112 <main>
 10a:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <main>:
#include "inc/main.h"


/**************************************** Main ****************************************/

void main (void) {
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	ac 97       	sbiw	r28, 0x2c	; 44
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
	// DEFINITION OF VARIABLES
		float error_history[QTY_OF_ERR] = {0};				// Storing the values of recent errors
 126:	fe 01       	movw	r30, r28
 128:	31 96       	adiw	r30, 0x01	; 1
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	df 01       	movw	r26, r30
 12e:	1d 92       	st	X+, r1
 130:	8a 95       	dec	r24
 132:	e9 f7       	brne	.-6      	; 0x12e <main+0x1c>
		register float current_error = 0.0;
		register int16_t left_motor_speed = 0;
		register int16_t right_motor_speed = 0;

	// MICROCONTROLLER INITIALIZATION
		InitSYS ();
 134:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <InitSYS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	bf e3       	ldi	r27, 0x3F	; 63
 13a:	e2 e4       	ldi	r30, 0x42	; 66
 13c:	ff e0       	ldi	r31, 0x0F	; 15
 13e:	b1 50       	subi	r27, 0x01	; 1
 140:	e0 40       	sbci	r30, 0x00	; 0
 142:	f0 40       	sbci	r31, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x2c>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x36>
 148:	00 00       	nop
	
	
	// MAIN CYCLE
		while (true) {
			error_sum = 0.0;
			current_error = 0.0;
 14a:	41 2c       	mov	r4, r1
 14c:	51 2c       	mov	r5, r1
 14e:	3e 01       	movw	r6, r28
 150:	29 e2       	ldi	r18, 0x29	; 41
 152:	62 0e       	add	r6, r18
 154:	71 1c       	adc	r7, r1
			
			ReadSensorLineData ();
 156:	0e 94 d6 01 	call	0x3ac	; 0x3ac <ReadSensorLineData>
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	4c 01       	movw	r8, r24
 160:	0f 2e       	mov	r0, r31
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	2f 2e       	mov	r2, r31
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	3f 2e       	mov	r3, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	7c 01       	movw	r14, r24
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	10 e0       	ldi	r17, 0x00	; 0
	
	
	// MAIN CYCLE
		while (true) {
			error_sum = 0.0;
			current_error = 0.0;
 172:	d1 2c       	mov	r13, r1
 174:	c1 2c       	mov	r12, r1
 176:	b4 2c       	mov	r11, r4
 178:	a5 2c       	mov	r10, r5
			
			ReadSensorLineData ();
			
		    // Shift error values
			for (i = 0; i < QTY_OF_ERR - 1; i++) {
				error_history[i] = error_history[i + 1];
 17a:	f7 01       	movw	r30, r14
 17c:	84 81       	ldd	r24, Z+4	; 0x04
 17e:	95 81       	ldd	r25, Z+5	; 0x05
 180:	a6 81       	ldd	r26, Z+6	; 0x06
 182:	b7 81       	ldd	r27, Z+7	; 0x07
 184:	81 93       	st	Z+, r24
 186:	91 93       	st	Z+, r25
 188:	a1 93       	st	Z+, r26
 18a:	b1 93       	st	Z+, r27
 18c:	7f 01       	movw	r14, r30
				
				if (line_data[i] != 0) {
 18e:	d1 01       	movw	r26, r2
 190:	6d 91       	ld	r22, X+
 192:	7d 91       	ld	r23, X+
 194:	8d 91       	ld	r24, X+
 196:	9d 91       	ld	r25, X+
 198:	1d 01       	movw	r2, r26
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	44 2d       	mov	r20, r4
 1a0:	55 2d       	mov	r21, r5
 1a2:	0e 94 44 02 	call	0x488	; 0x488 <__cmpsf2>
 1a6:	88 23       	and	r24, r24
 1a8:	09 f1       	breq	.+66     	; 0x1ec <main+0xda>
					// If the data on the i-th sensor is zero,
					// then the sensor is located above the black line.
					// Odd degree to preserve the sign '-'
					current_error += pow (QTY_OF_SENSORS / 2 - 0.5 - i, 3);
 1aa:	b8 01       	movw	r22, r16
 1ac:	01 2e       	mov	r0, r17
 1ae:	00 0c       	add	r0, r0
 1b0:	88 0b       	sbc	r24, r24
 1b2:	99 0b       	sbc	r25, r25
 1b4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__floatsisf>
 1b8:	9b 01       	movw	r18, r22
 1ba:	ac 01       	movw	r20, r24
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 e6       	ldi	r24, 0x60	; 96
 1c2:	90 e4       	ldi	r25, 0x40	; 64
 1c4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__subsf3>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e4       	ldi	r20, 0x40	; 64
 1ce:	50 e4       	ldi	r21, 0x40	; 64
 1d0:	0e 94 97 03 	call	0x72e	; 0x72e <pow>
 1d4:	9b 01       	movw	r18, r22
 1d6:	ac 01       	movw	r20, r24
 1d8:	6d 2d       	mov	r22, r13
 1da:	7c 2d       	mov	r23, r12
 1dc:	8b 2d       	mov	r24, r11
 1de:	9a 2d       	mov	r25, r10
 1e0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__addsf3>
 1e4:	d6 2e       	mov	r13, r22
 1e6:	c7 2e       	mov	r12, r23
 1e8:	b8 2e       	mov	r11, r24
 1ea:	a9 2e       	mov	r10, r25
 1ec:	0f 5f       	subi	r16, 0xFF	; 255
 1ee:	1f 4f       	sbci	r17, 0xFF	; 255
			current_error = 0.0;
			
			ReadSensorLineData ();
			
		    // Shift error values
			for (i = 0; i < QTY_OF_ERR - 1; i++) {
 1f0:	09 30       	cpi	r16, 0x09	; 9
 1f2:	11 05       	cpc	r17, r1
 1f4:	11 f6       	brne	.-124    	; 0x17a <main+0x68>
					// then the sensor is located above the black line.
					// Odd degree to preserve the sign '-'
					current_error += pow (QTY_OF_SENSORS / 2 - 0.5 - i, 3);
				}
			}
			error_history[QTY_OF_ERR - 1] = current_error;
 1f6:	8d 2d       	mov	r24, r13
 1f8:	9c 2d       	mov	r25, r12
 1fa:	ab 2d       	mov	r26, r11
 1fc:	ba 2d       	mov	r27, r10
 1fe:	8d a3       	std	Y+37, r24	; 0x25
 200:	9e a3       	std	Y+38, r25	; 0x26
 202:	af a3       	std	Y+39, r26	; 0x27
 204:	b8 a7       	std	Y+40, r27	; 0x28
	
			// Calculation of value P
			P = error_history[QTY_OF_ERR - 1] * kP;			// Current error * kP
 206:	2a e0       	ldi	r18, 0x0A	; 10
 208:	37 ed       	ldi	r19, 0xD7	; 215
 20a:	43 ea       	ldi	r20, 0xA3	; 163
 20c:	5c e3       	ldi	r21, 0x3C	; 60
 20e:	6d 2d       	mov	r22, r13
 210:	7c 2d       	mov	r23, r12
 212:	8b 2d       	mov	r24, r11
 214:	9a 2d       	mov	r25, r10
 216:	0e 94 2a 03 	call	0x654	; 0x654 <__mulsf3>
 21a:	69 a7       	std	Y+41, r22	; 0x29
 21c:	7a a7       	std	Y+42, r23	; 0x2a
 21e:	8b a7       	std	Y+43, r24	; 0x2b
 220:	9c a7       	std	Y+44, r25	; 0x2c
	_delay_ms (5000);									// This delay is required by the competition rules
	
	
	// MAIN CYCLE
		while (true) {
			error_sum = 0.0;
 222:	e1 2c       	mov	r14, r1
 224:	f1 2c       	mov	r15, r1
 226:	04 2d       	mov	r16, r4
 228:	15 2d       	mov	r17, r5
	
			// Calculation of value P
			P = error_history[QTY_OF_ERR - 1] * kP;			// Current error * kP
			// Calculation of value I
			for (i = 0; i < QTY_OF_ERR; i++) {
				error_sum += error_history[i];
 22a:	f4 01       	movw	r30, r8
 22c:	21 91       	ld	r18, Z+
 22e:	31 91       	ld	r19, Z+
 230:	41 91       	ld	r20, Z+
 232:	51 91       	ld	r21, Z+
 234:	4f 01       	movw	r8, r30
 236:	6e 2d       	mov	r22, r14
 238:	7f 2d       	mov	r23, r15
 23a:	80 2f       	mov	r24, r16
 23c:	91 2f       	mov	r25, r17
 23e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__addsf3>
 242:	e6 2e       	mov	r14, r22
 244:	f7 2e       	mov	r15, r23
 246:	08 2f       	mov	r16, r24
 248:	19 2f       	mov	r17, r25
			error_history[QTY_OF_ERR - 1] = current_error;
	
			// Calculation of value P
			P = error_history[QTY_OF_ERR - 1] * kP;			// Current error * kP
			// Calculation of value I
			for (i = 0; i < QTY_OF_ERR; i++) {
 24a:	86 14       	cp	r8, r6
 24c:	97 04       	cpc	r9, r7
 24e:	69 f7       	brne	.-38     	; 0x22a <main+0x118>
	        	error_history[0]) * kD;
	
			PID_total_correction = (P + I) + D;
	
			// 
			left_motor_speed  = AVG_SPEED - (uint16_t)PID_total_correction;
 250:	29 81       	ldd	r18, Y+1	; 0x01
 252:	3a 81       	ldd	r19, Y+2	; 0x02
 254:	4b 81       	ldd	r20, Y+3	; 0x03
 256:	5c 81       	ldd	r21, Y+4	; 0x04
 258:	6d 2d       	mov	r22, r13
 25a:	7c 2d       	mov	r23, r12
 25c:	8b 2d       	mov	r24, r11
 25e:	9a 2d       	mov	r25, r10
 260:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__subsf3>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	44 2d       	mov	r20, r4
 26a:	55 2d       	mov	r21, r5
 26c:	0e 94 2a 03 	call	0x654	; 0x654 <__mulsf3>
 270:	4b 01       	movw	r8, r22
 272:	5c 01       	movw	r10, r24
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	44 2d       	mov	r20, r4
 27a:	55 2d       	mov	r21, r5
 27c:	6e 2d       	mov	r22, r14
 27e:	7f 2d       	mov	r23, r15
 280:	80 2f       	mov	r24, r16
 282:	91 2f       	mov	r25, r17
 284:	0e 94 2a 03 	call	0x654	; 0x654 <__mulsf3>
 288:	29 a5       	ldd	r18, Y+41	; 0x29
 28a:	3a a5       	ldd	r19, Y+42	; 0x2a
 28c:	4b a5       	ldd	r20, Y+43	; 0x2b
 28e:	5c a5       	ldd	r21, Y+44	; 0x2c
 290:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__addsf3>
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	c5 01       	movw	r24, r10
 29a:	b4 01       	movw	r22, r8
 29c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__addsf3>
 2a0:	0e 94 49 02 	call	0x492	; 0x492 <__fixunssfsi>
 2a4:	2b e9       	ldi	r18, 0x9B	; 155
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	26 1b       	sub	r18, r22
 2aa:	37 0b       	sbc	r19, r23
			right_motor_speed = AVG_SPEED + (uint16_t)PID_total_correction;
 2ac:	65 56       	subi	r22, 0x65	; 101
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	c9 01       	movw	r24, r18
 2b2:	99 23       	and	r25, r25
 2b4:	14 f4       	brge	.+4      	; 0x2ba <main+0x1a8>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	77 23       	and	r23, r23
 2bc:	14 f4       	brge	.+4      	; 0x2c2 <main+0x1b0>
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
				OCR2A = 0;
				OCR2B = left_motor_speed * L_MOTOR_MISMATCH;
				OCR0A = 0;
				OCR0B = right_motor_speed * R_MOTOR_MISMATCH;
				#else
				OCR2A = 0;
 2c2:	a3 eb       	ldi	r26, 0xB3	; 179
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	1c 92       	st	X, r1
				OCR2B = left_motor_speed;
 2c8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ca:	91 05       	cpc	r25, r1
 2cc:	11 f0       	breq	.+4      	; 0x2d2 <main+0x1c0>
 2ce:	0c f0       	brlt	.+2      	; 0x2d2 <main+0x1c0>
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	e4 eb       	ldi	r30, 0xB4	; 180
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 83       	st	Z, r24
				OCR0A = 0;
 2d8:	17 bc       	out	0x27, r1	; 39
				OCR0B = right_motor_speed;
 2da:	6f 3f       	cpi	r22, 0xFF	; 255
 2dc:	71 05       	cpc	r23, r1
 2de:	11 f0       	breq	.+4      	; 0x2e4 <main+0x1d2>
 2e0:	0c f0       	brlt	.+2      	; 0x2e4 <main+0x1d2>
 2e2:	6f ef       	ldi	r22, 0xFF	; 255
 2e4:	68 bd       	out	0x28, r22	; 40
 2e6:	83 ef       	ldi	r24, 0xF3	; 243
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x1d8>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x1de>
 2f0:	00 00       	nop
 2f2:	31 cf       	rjmp	.-414    	; 0x156 <main+0x44>

000002f4 <InitSYS>:
/************************************** Function **************************************/

void InitSYS (void) {
	// Motors
	// Output mode
		DDRB |= (1 << DDB3);	// OC2A
 2f4:	23 9a       	sbi	0x04, 3	; 4
		DDRD |= (1 << DDD6) |	// OC0A
 2f6:	8a b1       	in	r24, 0x0a	; 10
 2f8:	88 66       	ori	r24, 0x68	; 104
 2fa:	8a b9       	out	0x0a, r24	; 10
				(1 << DDD5) |	// OC0B
				(1 << DDD3);	// OC2B

	// SensorLine
	// Input mode
		DDRB &= ~((1 << DDB2) | (1 << DDB1) | (1 << DDB0));
 2fc:	84 b1       	in	r24, 0x04	; 4
 2fe:	88 7f       	andi	r24, 0xF8	; 248
 300:	84 b9       	out	0x04, r24	; 4
		DDRD &= ~(1 << DDD7);
 302:	57 98       	cbi	0x0a, 7	; 10
	// Timer/Counter 0
	// Fast PWM Mode
	// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	// TOP = 0xFF
	// Prescaler: 1:64
		TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 304:	84 b5       	in	r24, 0x24	; 36
 306:	83 6a       	ori	r24, 0xA3	; 163
 308:	84 bd       	out	0x24, r24	; 36
		TCCR0A &= ~((1 << COM0A0) | (1 << COM0B0) | (1 << 3) | (1 << 2));
 30a:	84 b5       	in	r24, 0x24	; 36
 30c:	83 7a       	andi	r24, 0xA3	; 163
 30e:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= (1 << CS01) | (1 << CS00);
 310:	85 b5       	in	r24, 0x25	; 37
 312:	83 60       	ori	r24, 0x03	; 3
 314:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~((1 << FOC0A) | (1 << FOC0B) | (1 << 5) | (1 << 4) | (1 << WGM02) | (1 << CS02));
 316:	85 b5       	in	r24, 0x25	; 37
 318:	83 70       	andi	r24, 0x03	; 3
 31a:	85 bd       	out	0x25, r24	; 37
		TCNT0  = 0x00;
 31c:	16 bc       	out	0x26, r1	; 38
		TIMSK0 = 0x00;
 31e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
		OCR0A  = 0x00;	OCR0B  = 0x00;
 322:	17 bc       	out	0x27, r1	; 39
 324:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 1
	// Fast PWM 10-bit Mode
	// Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM (non-inverting mode)
	// TOP = 0x03FF
	// Prescaler: 1:64
		TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
 326:	e0 e8       	ldi	r30, 0x80	; 128
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	83 6a       	ori	r24, 0xA3	; 163
 32e:	80 83       	st	Z, r24
		TCCR1A &= ~((1 << COM1A0) | (1 << COM1B0) | (1 << 3) | (1 << 2));
 330:	80 81       	ld	r24, Z
 332:	83 7a       	andi	r24, 0xA3	; 163
 334:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
 336:	e1 e8       	ldi	r30, 0x81	; 129
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	8b 60       	ori	r24, 0x0B	; 11
 33e:	80 83       	st	Z, r24
		TCCR1B &= ~((1 << ICNC1) | (1 << ICES1) | (1 << 5) | (1 << WGM13) | (1 << CS12));
 340:	80 81       	ld	r24, Z
 342:	8b 70       	andi	r24, 0x0B	; 11
 344:	80 83       	st	Z, r24
		TCCR1C = 0x00;
 346:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
		TCNT1H = 0x00;	TCNT1L = 0x00;
 34a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 34e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		TIMSK1 = 0x00;
 352:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		ICR1H  = 0x00;	ICR1L  = 0x00;
 356:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 35a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
		OCR1AH = 0x00;	OCR1AL = 0x00;
 35e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 362:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		OCR1BH = 0x00;	OCR1BL = 0x00;
 366:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 36a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	// Timer/Counter 2
	// Fast PWM Mode
	// Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	// TOP = 0xFF
	// Prescaler: 1:64
		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
 36e:	e0 eb       	ldi	r30, 0xB0	; 176
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	83 6a       	ori	r24, 0xA3	; 163
 376:	80 83       	st	Z, r24
		TCCR2A &= ~((1 << COM2A0) | (1 << COM2B0) | (1 << 3) | (1 << 2));
 378:	80 81       	ld	r24, Z
 37a:	83 7a       	andi	r24, 0xA3	; 163
 37c:	80 83       	st	Z, r24
		TCCR2B |= (1 << CS22);
 37e:	e1 eb       	ldi	r30, 0xB1	; 177
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	84 60       	ori	r24, 0x04	; 4
 386:	80 83       	st	Z, r24
		TCCR2B &= ~((1 << FOC2A) | (1 << FOC2B) | (1 << 5) | (1 << 4) | (1 << WGM22) | (1 << CS21) | (1 << CS20));
 388:	80 81       	ld	r24, Z
 38a:	84 70       	andi	r24, 0x04	; 4
 38c:	80 83       	st	Z, r24
		TCNT2  = 0x00;
 38e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
		TIMSK2 = 0x00;
 392:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		OCR2A  = 0x00;	OCR2B  = 0x00;
 396:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 39a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

	// Crystal Oscillator division factor: 1
		#pragma optsize-
			CLKPR |= (1 << CLKPCE);
 39e:	e1 e6       	ldi	r30, 0x61	; 97
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	80 83       	st	Z, r24
			CLKPR = 0x00;
 3a8:	10 82       	st	Z, r1
 3aa:	08 95       	ret

000003ac <ReadSensorLineData>:
#include "../inc/ReadSensorLineData.h"


/************************************** Function **************************************/

void ReadSensorLineData (void) {
 3ac:	08 95       	ret

000003ae <__subsf3>:
 3ae:	50 58       	subi	r21, 0x80	; 128

000003b0 <__addsf3>:
 3b0:	bb 27       	eor	r27, r27
 3b2:	aa 27       	eor	r26, r26
 3b4:	0e 94 ef 01 	call	0x3de	; 0x3de <__addsf3x>
 3b8:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_round>
 3bc:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fp_pscA>
 3c0:	38 f0       	brcs	.+14     	; 0x3d0 <__addsf3+0x20>
 3c2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_pscB>
 3c6:	20 f0       	brcs	.+8      	; 0x3d0 <__addsf3+0x20>
 3c8:	39 f4       	brne	.+14     	; 0x3d8 <__addsf3+0x28>
 3ca:	9f 3f       	cpi	r25, 0xFF	; 255
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <__addsf3+0x24>
 3ce:	26 f4       	brtc	.+8      	; 0x3d8 <__addsf3+0x28>
 3d0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_nan>
 3d4:	0e f4       	brtc	.+2      	; 0x3d8 <__addsf3+0x28>
 3d6:	e0 95       	com	r30
 3d8:	e7 fb       	bst	r30, 7
 3da:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_inf>

000003de <__addsf3x>:
 3de:	e9 2f       	mov	r30, r25
 3e0:	0e 94 01 03 	call	0x602	; 0x602 <__fp_split3>
 3e4:	58 f3       	brcs	.-42     	; 0x3bc <__addsf3+0xc>
 3e6:	ba 17       	cp	r27, r26
 3e8:	62 07       	cpc	r22, r18
 3ea:	73 07       	cpc	r23, r19
 3ec:	84 07       	cpc	r24, r20
 3ee:	95 07       	cpc	r25, r21
 3f0:	20 f0       	brcs	.+8      	; 0x3fa <__addsf3x+0x1c>
 3f2:	79 f4       	brne	.+30     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f4:	a6 f5       	brtc	.+104    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3f6:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_zero>
 3fa:	0e f4       	brtc	.+2      	; 0x3fe <__addsf3x+0x20>
 3fc:	e0 95       	com	r30
 3fe:	0b 2e       	mov	r0, r27
 400:	ba 2f       	mov	r27, r26
 402:	a0 2d       	mov	r26, r0
 404:	0b 01       	movw	r0, r22
 406:	b9 01       	movw	r22, r18
 408:	90 01       	movw	r18, r0
 40a:	0c 01       	movw	r0, r24
 40c:	ca 01       	movw	r24, r20
 40e:	a0 01       	movw	r20, r0
 410:	11 24       	eor	r1, r1
 412:	ff 27       	eor	r31, r31
 414:	59 1b       	sub	r21, r25
 416:	99 f0       	breq	.+38     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 418:	59 3f       	cpi	r21, 0xF9	; 249
 41a:	50 f4       	brcc	.+20     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41c:	50 3e       	cpi	r21, 0xE0	; 224
 41e:	68 f1       	brcs	.+90     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 420:	1a 16       	cp	r1, r26
 422:	f0 40       	sbci	r31, 0x00	; 0
 424:	a2 2f       	mov	r26, r18
 426:	23 2f       	mov	r18, r19
 428:	34 2f       	mov	r19, r20
 42a:	44 27       	eor	r20, r20
 42c:	58 5f       	subi	r21, 0xF8	; 248
 42e:	f3 cf       	rjmp	.-26     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 430:	46 95       	lsr	r20
 432:	37 95       	ror	r19
 434:	27 95       	ror	r18
 436:	a7 95       	ror	r26
 438:	f0 40       	sbci	r31, 0x00	; 0
 43a:	53 95       	inc	r21
 43c:	c9 f7       	brne	.-14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 43e:	7e f4       	brtc	.+30     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 440:	1f 16       	cp	r1, r31
 442:	ba 0b       	sbc	r27, r26
 444:	62 0b       	sbc	r22, r18
 446:	73 0b       	sbc	r23, r19
 448:	84 0b       	sbc	r24, r20
 44a:	ba f0       	brmi	.+46     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 44c:	91 50       	subi	r25, 0x01	; 1
 44e:	a1 f0       	breq	.+40     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 450:	ff 0f       	add	r31, r31
 452:	bb 1f       	adc	r27, r27
 454:	66 1f       	adc	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	88 1f       	adc	r24, r24
 45a:	c2 f7       	brpl	.-16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 45c:	0e c0       	rjmp	.+28     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 45e:	ba 0f       	add	r27, r26
 460:	62 1f       	adc	r22, r18
 462:	73 1f       	adc	r23, r19
 464:	84 1f       	adc	r24, r20
 466:	48 f4       	brcc	.+18     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 468:	87 95       	ror	r24
 46a:	77 95       	ror	r23
 46c:	67 95       	ror	r22
 46e:	b7 95       	ror	r27
 470:	f7 95       	ror	r31
 472:	9e 3f       	cpi	r25, 0xFE	; 254
 474:	08 f0       	brcs	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 476:	b0 cf       	rjmp	.-160    	; 0x3d8 <__addsf3+0x28>
 478:	93 95       	inc	r25
 47a:	88 0f       	add	r24, r24
 47c:	08 f0       	brcs	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47e:	99 27       	eor	r25, r25
 480:	ee 0f       	add	r30, r30
 482:	97 95       	ror	r25
 484:	87 95       	ror	r24
 486:	08 95       	ret

00000488 <__cmpsf2>:
 488:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_cmp>
 48c:	08 f4       	brcc	.+2      	; 0x490 <__cmpsf2+0x8>
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	08 95       	ret

00000492 <__fixunssfsi>:
 492:	0e 94 09 03 	call	0x612	; 0x612 <__fp_splitA>
 496:	88 f0       	brcs	.+34     	; 0x4ba <__fixunssfsi+0x28>
 498:	9f 57       	subi	r25, 0x7F	; 127
 49a:	98 f0       	brcs	.+38     	; 0x4c2 <__fixunssfsi+0x30>
 49c:	b9 2f       	mov	r27, r25
 49e:	99 27       	eor	r25, r25
 4a0:	b7 51       	subi	r27, 0x17	; 23
 4a2:	b0 f0       	brcs	.+44     	; 0x4d0 <__fixunssfsi+0x3e>
 4a4:	e1 f0       	breq	.+56     	; 0x4de <__fixunssfsi+0x4c>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	1a f0       	brmi	.+6      	; 0x4b6 <__fixunssfsi+0x24>
 4b0:	ba 95       	dec	r27
 4b2:	c9 f7       	brne	.-14     	; 0x4a6 <__fixunssfsi+0x14>
 4b4:	14 c0       	rjmp	.+40     	; 0x4de <__fixunssfsi+0x4c>
 4b6:	b1 30       	cpi	r27, 0x01	; 1
 4b8:	91 f0       	breq	.+36     	; 0x4de <__fixunssfsi+0x4c>
 4ba:	0e 94 23 03 	call	0x646	; 0x646 <__fp_zero>
 4be:	b1 e0       	ldi	r27, 0x01	; 1
 4c0:	08 95       	ret
 4c2:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_zero>
 4c6:	67 2f       	mov	r22, r23
 4c8:	78 2f       	mov	r23, r24
 4ca:	88 27       	eor	r24, r24
 4cc:	b8 5f       	subi	r27, 0xF8	; 248
 4ce:	39 f0       	breq	.+14     	; 0x4de <__fixunssfsi+0x4c>
 4d0:	b9 3f       	cpi	r27, 0xF9	; 249
 4d2:	cc f3       	brlt	.-14     	; 0x4c6 <__fixunssfsi+0x34>
 4d4:	86 95       	lsr	r24
 4d6:	77 95       	ror	r23
 4d8:	67 95       	ror	r22
 4da:	b3 95       	inc	r27
 4dc:	d9 f7       	brne	.-10     	; 0x4d4 <__fixunssfsi+0x42>
 4de:	3e f4       	brtc	.+14     	; 0x4ee <__fixunssfsi+0x5c>
 4e0:	90 95       	com	r25
 4e2:	80 95       	com	r24
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	08 95       	ret

000004f0 <__floatunsisf>:
 4f0:	e8 94       	clt
 4f2:	09 c0       	rjmp	.+18     	; 0x506 <__floatsisf+0x12>

000004f4 <__floatsisf>:
 4f4:	97 fb       	bst	r25, 7
 4f6:	3e f4       	brtc	.+14     	; 0x506 <__floatsisf+0x12>
 4f8:	90 95       	com	r25
 4fa:	80 95       	com	r24
 4fc:	70 95       	com	r23
 4fe:	61 95       	neg	r22
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	8f 4f       	sbci	r24, 0xFF	; 255
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	99 23       	and	r25, r25
 508:	a9 f0       	breq	.+42     	; 0x534 <__floatsisf+0x40>
 50a:	f9 2f       	mov	r31, r25
 50c:	96 e9       	ldi	r25, 0x96	; 150
 50e:	bb 27       	eor	r27, r27
 510:	93 95       	inc	r25
 512:	f6 95       	lsr	r31
 514:	87 95       	ror	r24
 516:	77 95       	ror	r23
 518:	67 95       	ror	r22
 51a:	b7 95       	ror	r27
 51c:	f1 11       	cpse	r31, r1
 51e:	f8 cf       	rjmp	.-16     	; 0x510 <__floatsisf+0x1c>
 520:	fa f4       	brpl	.+62     	; 0x560 <__floatsisf+0x6c>
 522:	bb 0f       	add	r27, r27
 524:	11 f4       	brne	.+4      	; 0x52a <__floatsisf+0x36>
 526:	60 ff       	sbrs	r22, 0
 528:	1b c0       	rjmp	.+54     	; 0x560 <__floatsisf+0x6c>
 52a:	6f 5f       	subi	r22, 0xFF	; 255
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	16 c0       	rjmp	.+44     	; 0x560 <__floatsisf+0x6c>
 534:	88 23       	and	r24, r24
 536:	11 f0       	breq	.+4      	; 0x53c <__floatsisf+0x48>
 538:	96 e9       	ldi	r25, 0x96	; 150
 53a:	11 c0       	rjmp	.+34     	; 0x55e <__floatsisf+0x6a>
 53c:	77 23       	and	r23, r23
 53e:	21 f0       	breq	.+8      	; 0x548 <__floatsisf+0x54>
 540:	9e e8       	ldi	r25, 0x8E	; 142
 542:	87 2f       	mov	r24, r23
 544:	76 2f       	mov	r23, r22
 546:	05 c0       	rjmp	.+10     	; 0x552 <__floatsisf+0x5e>
 548:	66 23       	and	r22, r22
 54a:	71 f0       	breq	.+28     	; 0x568 <__floatsisf+0x74>
 54c:	96 e8       	ldi	r25, 0x86	; 134
 54e:	86 2f       	mov	r24, r22
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	2a f0       	brmi	.+10     	; 0x560 <__floatsisf+0x6c>
 556:	9a 95       	dec	r25
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	da f7       	brpl	.-10     	; 0x556 <__floatsisf+0x62>
 560:	88 0f       	add	r24, r24
 562:	96 95       	lsr	r25
 564:	87 95       	ror	r24
 566:	97 f9       	bld	r25, 7
 568:	08 95       	ret

0000056a <__fp_cmp>:
 56a:	99 0f       	add	r25, r25
 56c:	00 08       	sbc	r0, r0
 56e:	55 0f       	add	r21, r21
 570:	aa 0b       	sbc	r26, r26
 572:	e0 e8       	ldi	r30, 0x80	; 128
 574:	fe ef       	ldi	r31, 0xFE	; 254
 576:	16 16       	cp	r1, r22
 578:	17 06       	cpc	r1, r23
 57a:	e8 07       	cpc	r30, r24
 57c:	f9 07       	cpc	r31, r25
 57e:	c0 f0       	brcs	.+48     	; 0x5b0 <__fp_cmp+0x46>
 580:	12 16       	cp	r1, r18
 582:	13 06       	cpc	r1, r19
 584:	e4 07       	cpc	r30, r20
 586:	f5 07       	cpc	r31, r21
 588:	98 f0       	brcs	.+38     	; 0x5b0 <__fp_cmp+0x46>
 58a:	62 1b       	sub	r22, r18
 58c:	73 0b       	sbc	r23, r19
 58e:	84 0b       	sbc	r24, r20
 590:	95 0b       	sbc	r25, r21
 592:	39 f4       	brne	.+14     	; 0x5a2 <__fp_cmp+0x38>
 594:	0a 26       	eor	r0, r26
 596:	61 f0       	breq	.+24     	; 0x5b0 <__fp_cmp+0x46>
 598:	23 2b       	or	r18, r19
 59a:	24 2b       	or	r18, r20
 59c:	25 2b       	or	r18, r21
 59e:	21 f4       	brne	.+8      	; 0x5a8 <__fp_cmp+0x3e>
 5a0:	08 95       	ret
 5a2:	0a 26       	eor	r0, r26
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <__fp_cmp+0x3e>
 5a6:	a1 40       	sbci	r26, 0x01	; 1
 5a8:	a6 95       	lsr	r26
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	81 1d       	adc	r24, r1
 5ae:	81 1d       	adc	r24, r1
 5b0:	08 95       	ret

000005b2 <__fp_inf>:
 5b2:	97 f9       	bld	r25, 7
 5b4:	9f 67       	ori	r25, 0x7F	; 127
 5b6:	80 e8       	ldi	r24, 0x80	; 128
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	08 95       	ret

000005be <__fp_nan>:
 5be:	9f ef       	ldi	r25, 0xFF	; 255
 5c0:	80 ec       	ldi	r24, 0xC0	; 192
 5c2:	08 95       	ret

000005c4 <__fp_pscA>:
 5c4:	00 24       	eor	r0, r0
 5c6:	0a 94       	dec	r0
 5c8:	16 16       	cp	r1, r22
 5ca:	17 06       	cpc	r1, r23
 5cc:	18 06       	cpc	r1, r24
 5ce:	09 06       	cpc	r0, r25
 5d0:	08 95       	ret

000005d2 <__fp_pscB>:
 5d2:	00 24       	eor	r0, r0
 5d4:	0a 94       	dec	r0
 5d6:	12 16       	cp	r1, r18
 5d8:	13 06       	cpc	r1, r19
 5da:	14 06       	cpc	r1, r20
 5dc:	05 06       	cpc	r0, r21
 5de:	08 95       	ret

000005e0 <__fp_round>:
 5e0:	09 2e       	mov	r0, r25
 5e2:	03 94       	inc	r0
 5e4:	00 0c       	add	r0, r0
 5e6:	11 f4       	brne	.+4      	; 0x5ec <__fp_round+0xc>
 5e8:	88 23       	and	r24, r24
 5ea:	52 f0       	brmi	.+20     	; 0x600 <__fp_round+0x20>
 5ec:	bb 0f       	add	r27, r27
 5ee:	40 f4       	brcc	.+16     	; 0x600 <__fp_round+0x20>
 5f0:	bf 2b       	or	r27, r31
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <__fp_round+0x18>
 5f4:	60 ff       	sbrs	r22, 0
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <__fp_round+0x20>
 5f8:	6f 5f       	subi	r22, 0xFF	; 255
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	8f 4f       	sbci	r24, 0xFF	; 255
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	08 95       	ret

00000602 <__fp_split3>:
 602:	57 fd       	sbrc	r21, 7
 604:	90 58       	subi	r25, 0x80	; 128
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	59 f0       	breq	.+22     	; 0x622 <__fp_splitA+0x10>
 60c:	5f 3f       	cpi	r21, 0xFF	; 255
 60e:	71 f0       	breq	.+28     	; 0x62c <__fp_splitA+0x1a>
 610:	47 95       	ror	r20

00000612 <__fp_splitA>:
 612:	88 0f       	add	r24, r24
 614:	97 fb       	bst	r25, 7
 616:	99 1f       	adc	r25, r25
 618:	61 f0       	breq	.+24     	; 0x632 <__fp_splitA+0x20>
 61a:	9f 3f       	cpi	r25, 0xFF	; 255
 61c:	79 f0       	breq	.+30     	; 0x63c <__fp_splitA+0x2a>
 61e:	87 95       	ror	r24
 620:	08 95       	ret
 622:	12 16       	cp	r1, r18
 624:	13 06       	cpc	r1, r19
 626:	14 06       	cpc	r1, r20
 628:	55 1f       	adc	r21, r21
 62a:	f2 cf       	rjmp	.-28     	; 0x610 <__fp_split3+0xe>
 62c:	46 95       	lsr	r20
 62e:	f1 df       	rcall	.-30     	; 0x612 <__fp_splitA>
 630:	08 c0       	rjmp	.+16     	; 0x642 <__fp_splitA+0x30>
 632:	16 16       	cp	r1, r22
 634:	17 06       	cpc	r1, r23
 636:	18 06       	cpc	r1, r24
 638:	99 1f       	adc	r25, r25
 63a:	f1 cf       	rjmp	.-30     	; 0x61e <__fp_splitA+0xc>
 63c:	86 95       	lsr	r24
 63e:	71 05       	cpc	r23, r1
 640:	61 05       	cpc	r22, r1
 642:	08 94       	sec
 644:	08 95       	ret

00000646 <__fp_zero>:
 646:	e8 94       	clt

00000648 <__fp_szero>:
 648:	bb 27       	eor	r27, r27
 64a:	66 27       	eor	r22, r22
 64c:	77 27       	eor	r23, r23
 64e:	cb 01       	movw	r24, r22
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret

00000654 <__mulsf3>:
 654:	0e 94 3d 03 	call	0x67a	; 0x67a <__mulsf3x>
 658:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_round>
 65c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fp_pscA>
 660:	38 f0       	brcs	.+14     	; 0x670 <__mulsf3+0x1c>
 662:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_pscB>
 666:	20 f0       	brcs	.+8      	; 0x670 <__mulsf3+0x1c>
 668:	95 23       	and	r25, r21
 66a:	11 f0       	breq	.+4      	; 0x670 <__mulsf3+0x1c>
 66c:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_inf>
 670:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_nan>
 674:	11 24       	eor	r1, r1
 676:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_szero>

0000067a <__mulsf3x>:
 67a:	0e 94 01 03 	call	0x602	; 0x602 <__fp_split3>
 67e:	70 f3       	brcs	.-36     	; 0x65c <__mulsf3+0x8>

00000680 <__mulsf3_pse>:
 680:	95 9f       	mul	r25, r21
 682:	c1 f3       	breq	.-16     	; 0x674 <__mulsf3+0x20>
 684:	95 0f       	add	r25, r21
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	55 1f       	adc	r21, r21
 68a:	62 9f       	mul	r22, r18
 68c:	f0 01       	movw	r30, r0
 68e:	72 9f       	mul	r23, r18
 690:	bb 27       	eor	r27, r27
 692:	f0 0d       	add	r31, r0
 694:	b1 1d       	adc	r27, r1
 696:	63 9f       	mul	r22, r19
 698:	aa 27       	eor	r26, r26
 69a:	f0 0d       	add	r31, r0
 69c:	b1 1d       	adc	r27, r1
 69e:	aa 1f       	adc	r26, r26
 6a0:	64 9f       	mul	r22, r20
 6a2:	66 27       	eor	r22, r22
 6a4:	b0 0d       	add	r27, r0
 6a6:	a1 1d       	adc	r26, r1
 6a8:	66 1f       	adc	r22, r22
 6aa:	82 9f       	mul	r24, r18
 6ac:	22 27       	eor	r18, r18
 6ae:	b0 0d       	add	r27, r0
 6b0:	a1 1d       	adc	r26, r1
 6b2:	62 1f       	adc	r22, r18
 6b4:	73 9f       	mul	r23, r19
 6b6:	b0 0d       	add	r27, r0
 6b8:	a1 1d       	adc	r26, r1
 6ba:	62 1f       	adc	r22, r18
 6bc:	83 9f       	mul	r24, r19
 6be:	a0 0d       	add	r26, r0
 6c0:	61 1d       	adc	r22, r1
 6c2:	22 1f       	adc	r18, r18
 6c4:	74 9f       	mul	r23, r20
 6c6:	33 27       	eor	r19, r19
 6c8:	a0 0d       	add	r26, r0
 6ca:	61 1d       	adc	r22, r1
 6cc:	23 1f       	adc	r18, r19
 6ce:	84 9f       	mul	r24, r20
 6d0:	60 0d       	add	r22, r0
 6d2:	21 1d       	adc	r18, r1
 6d4:	82 2f       	mov	r24, r18
 6d6:	76 2f       	mov	r23, r22
 6d8:	6a 2f       	mov	r22, r26
 6da:	11 24       	eor	r1, r1
 6dc:	9f 57       	subi	r25, 0x7F	; 127
 6de:	50 40       	sbci	r21, 0x00	; 0
 6e0:	9a f0       	brmi	.+38     	; 0x708 <__mulsf3_pse+0x88>
 6e2:	f1 f0       	breq	.+60     	; 0x720 <__mulsf3_pse+0xa0>
 6e4:	88 23       	and	r24, r24
 6e6:	4a f0       	brmi	.+18     	; 0x6fa <__mulsf3_pse+0x7a>
 6e8:	ee 0f       	add	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	bb 1f       	adc	r27, r27
 6ee:	66 1f       	adc	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	50 40       	sbci	r21, 0x00	; 0
 6f8:	a9 f7       	brne	.-22     	; 0x6e4 <__mulsf3_pse+0x64>
 6fa:	9e 3f       	cpi	r25, 0xFE	; 254
 6fc:	51 05       	cpc	r21, r1
 6fe:	80 f0       	brcs	.+32     	; 0x720 <__mulsf3_pse+0xa0>
 700:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_inf>
 704:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_szero>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	e4 f3       	brlt	.-8      	; 0x704 <__mulsf3_pse+0x84>
 70c:	98 3e       	cpi	r25, 0xE8	; 232
 70e:	d4 f3       	brlt	.-12     	; 0x704 <__mulsf3_pse+0x84>
 710:	86 95       	lsr	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b7 95       	ror	r27
 718:	f7 95       	ror	r31
 71a:	e7 95       	ror	r30
 71c:	9f 5f       	subi	r25, 0xFF	; 255
 71e:	c1 f7       	brne	.-16     	; 0x710 <__mulsf3_pse+0x90>
 720:	fe 2b       	or	r31, r30
 722:	88 0f       	add	r24, r24
 724:	91 1d       	adc	r25, r1
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret

0000072e <pow>:
 72e:	fa 01       	movw	r30, r20
 730:	ee 0f       	add	r30, r30
 732:	ff 1f       	adc	r31, r31
 734:	30 96       	adiw	r30, 0x00	; 0
 736:	21 05       	cpc	r18, r1
 738:	31 05       	cpc	r19, r1
 73a:	a1 f1       	breq	.+104    	; 0x7a4 <pow+0x76>
 73c:	61 15       	cp	r22, r1
 73e:	71 05       	cpc	r23, r1
 740:	61 f4       	brne	.+24     	; 0x75a <pow+0x2c>
 742:	80 38       	cpi	r24, 0x80	; 128
 744:	bf e3       	ldi	r27, 0x3F	; 63
 746:	9b 07       	cpc	r25, r27
 748:	49 f1       	breq	.+82     	; 0x79c <pow+0x6e>
 74a:	68 94       	set
 74c:	90 38       	cpi	r25, 0x80	; 128
 74e:	81 05       	cpc	r24, r1
 750:	61 f0       	breq	.+24     	; 0x76a <pow+0x3c>
 752:	80 38       	cpi	r24, 0x80	; 128
 754:	bf ef       	ldi	r27, 0xFF	; 255
 756:	9b 07       	cpc	r25, r27
 758:	41 f0       	breq	.+16     	; 0x76a <pow+0x3c>
 75a:	99 23       	and	r25, r25
 75c:	4a f5       	brpl	.+82     	; 0x7b0 <pow+0x82>
 75e:	ff 3f       	cpi	r31, 0xFF	; 255
 760:	e1 05       	cpc	r30, r1
 762:	31 05       	cpc	r19, r1
 764:	21 05       	cpc	r18, r1
 766:	19 f1       	breq	.+70     	; 0x7ae <pow+0x80>
 768:	e8 94       	clt
 76a:	08 94       	sec
 76c:	e7 95       	ror	r30
 76e:	d9 01       	movw	r26, r18
 770:	aa 23       	and	r26, r26
 772:	29 f4       	brne	.+10     	; 0x77e <pow+0x50>
 774:	ab 2f       	mov	r26, r27
 776:	be 2f       	mov	r27, r30
 778:	f8 5f       	subi	r31, 0xF8	; 248
 77a:	d0 f3       	brcs	.-12     	; 0x770 <pow+0x42>
 77c:	10 c0       	rjmp	.+32     	; 0x79e <pow+0x70>
 77e:	ff 5f       	subi	r31, 0xFF	; 255
 780:	70 f4       	brcc	.+28     	; 0x79e <pow+0x70>
 782:	a6 95       	lsr	r26
 784:	e0 f7       	brcc	.-8      	; 0x77e <pow+0x50>
 786:	f7 39       	cpi	r31, 0x97	; 151
 788:	50 f0       	brcs	.+20     	; 0x79e <pow+0x70>
 78a:	19 f0       	breq	.+6      	; 0x792 <pow+0x64>
 78c:	ff 3a       	cpi	r31, 0xAF	; 175
 78e:	38 f4       	brcc	.+14     	; 0x79e <pow+0x70>
 790:	9f 77       	andi	r25, 0x7F	; 127
 792:	9f 93       	push	r25
 794:	0d d0       	rcall	.+26     	; 0x7b0 <pow+0x82>
 796:	0f 90       	pop	r0
 798:	07 fc       	sbrc	r0, 7
 79a:	90 58       	subi	r25, 0x80	; 128
 79c:	08 95       	ret
 79e:	46 f0       	brts	.+16     	; 0x7b0 <pow+0x82>
 7a0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_nan>
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	80 e8       	ldi	r24, 0x80	; 128
 7aa:	9f e3       	ldi	r25, 0x3F	; 63
 7ac:	08 95       	ret
 7ae:	4f e7       	ldi	r20, 0x7F	; 127
 7b0:	9f 77       	andi	r25, 0x7F	; 127
 7b2:	5f 93       	push	r21
 7b4:	4f 93       	push	r20
 7b6:	3f 93       	push	r19
 7b8:	2f 93       	push	r18
 7ba:	0e 94 92 04 	call	0x924	; 0x924 <log>
 7be:	2f 91       	pop	r18
 7c0:	3f 91       	pop	r19
 7c2:	4f 91       	pop	r20
 7c4:	5f 91       	pop	r21
 7c6:	0e 94 2a 03 	call	0x654	; 0x654 <__mulsf3>
 7ca:	0c 94 ef 03 	jmp	0x7de	; 0x7de <exp>
 7ce:	29 f4       	brne	.+10     	; 0x7da <pow+0xac>
 7d0:	16 f0       	brts	.+4      	; 0x7d6 <pow+0xa8>
 7d2:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_inf>
 7d6:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_zero>
 7da:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_nan>

000007de <exp>:
 7de:	0e 94 09 03 	call	0x612	; 0x612 <__fp_splitA>
 7e2:	a8 f3       	brcs	.-22     	; 0x7ce <pow+0xa0>
 7e4:	96 38       	cpi	r25, 0x86	; 134
 7e6:	a0 f7       	brcc	.-24     	; 0x7d0 <pow+0xa2>
 7e8:	07 f8       	bld	r0, 7
 7ea:	0f 92       	push	r0
 7ec:	e8 94       	clt
 7ee:	2b e3       	ldi	r18, 0x3B	; 59
 7f0:	3a ea       	ldi	r19, 0xAA	; 170
 7f2:	48 eb       	ldi	r20, 0xB8	; 184
 7f4:	5f e7       	ldi	r21, 0x7F	; 127
 7f6:	0e 94 40 03 	call	0x680	; 0x680 <__mulsf3_pse>
 7fa:	0f 92       	push	r0
 7fc:	0f 92       	push	r0
 7fe:	0f 92       	push	r0
 800:	4d b7       	in	r20, 0x3d	; 61
 802:	5e b7       	in	r21, 0x3e	; 62
 804:	0f 92       	push	r0
 806:	0e 94 da 04 	call	0x9b4	; 0x9b4 <modf>
 80a:	e8 e6       	ldi	r30, 0x68	; 104
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	0e 94 21 04 	call	0x842	; 0x842 <__fp_powser>
 812:	4f 91       	pop	r20
 814:	5f 91       	pop	r21
 816:	ef 91       	pop	r30
 818:	ff 91       	pop	r31
 81a:	e5 95       	asr	r30
 81c:	ee 1f       	adc	r30, r30
 81e:	ff 1f       	adc	r31, r31
 820:	49 f0       	breq	.+18     	; 0x834 <exp+0x56>
 822:	fe 57       	subi	r31, 0x7E	; 126
 824:	e0 68       	ori	r30, 0x80	; 128
 826:	44 27       	eor	r20, r20
 828:	ee 0f       	add	r30, r30
 82a:	44 1f       	adc	r20, r20
 82c:	fa 95       	dec	r31
 82e:	e1 f7       	brne	.-8      	; 0x828 <exp+0x4a>
 830:	41 95       	neg	r20
 832:	55 0b       	sbc	r21, r21
 834:	0e 94 54 04 	call	0x8a8	; 0x8a8 <ldexp>
 838:	0f 90       	pop	r0
 83a:	07 fe       	sbrs	r0, 7
 83c:	0c 94 48 04 	jmp	0x890	; 0x890 <inverse>
 840:	08 95       	ret

00000842 <__fp_powser>:
 842:	df 93       	push	r29
 844:	cf 93       	push	r28
 846:	1f 93       	push	r17
 848:	0f 93       	push	r16
 84a:	ff 92       	push	r15
 84c:	ef 92       	push	r14
 84e:	df 92       	push	r13
 850:	7b 01       	movw	r14, r22
 852:	8c 01       	movw	r16, r24
 854:	68 94       	set
 856:	06 c0       	rjmp	.+12     	; 0x864 <__fp_powser+0x22>
 858:	da 2e       	mov	r13, r26
 85a:	ef 01       	movw	r28, r30
 85c:	0e 94 3d 03 	call	0x67a	; 0x67a <__mulsf3x>
 860:	fe 01       	movw	r30, r28
 862:	e8 94       	clt
 864:	a5 91       	lpm	r26, Z+
 866:	25 91       	lpm	r18, Z+
 868:	35 91       	lpm	r19, Z+
 86a:	45 91       	lpm	r20, Z+
 86c:	55 91       	lpm	r21, Z+
 86e:	a6 f3       	brts	.-24     	; 0x858 <__fp_powser+0x16>
 870:	ef 01       	movw	r28, r30
 872:	0e 94 ef 01 	call	0x3de	; 0x3de <__addsf3x>
 876:	fe 01       	movw	r30, r28
 878:	97 01       	movw	r18, r14
 87a:	a8 01       	movw	r20, r16
 87c:	da 94       	dec	r13
 87e:	69 f7       	brne	.-38     	; 0x85a <__fp_powser+0x18>
 880:	df 90       	pop	r13
 882:	ef 90       	pop	r14
 884:	ff 90       	pop	r15
 886:	0f 91       	pop	r16
 888:	1f 91       	pop	r17
 88a:	cf 91       	pop	r28
 88c:	df 91       	pop	r29
 88e:	08 95       	ret

00000890 <inverse>:
 890:	9b 01       	movw	r18, r22
 892:	ac 01       	movw	r20, r24
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	80 e8       	ldi	r24, 0x80	; 128
 89a:	9f e3       	ldi	r25, 0x3F	; 63
 89c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__divsf3>
 8a0:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_inf>
 8a4:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_mpack>

000008a8 <ldexp>:
 8a8:	0e 94 09 03 	call	0x612	; 0x612 <__fp_splitA>
 8ac:	d8 f3       	brcs	.-10     	; 0x8a4 <inverse+0x14>
 8ae:	99 23       	and	r25, r25
 8b0:	c9 f3       	breq	.-14     	; 0x8a4 <inverse+0x14>
 8b2:	94 0f       	add	r25, r20
 8b4:	51 1d       	adc	r21, r1
 8b6:	a3 f3       	brvs	.-24     	; 0x8a0 <inverse+0x10>
 8b8:	91 50       	subi	r25, 0x01	; 1
 8ba:	50 40       	sbci	r21, 0x00	; 0
 8bc:	94 f0       	brlt	.+36     	; 0x8e2 <ldexp+0x3a>
 8be:	59 f0       	breq	.+22     	; 0x8d6 <ldexp+0x2e>
 8c0:	88 23       	and	r24, r24
 8c2:	32 f0       	brmi	.+12     	; 0x8d0 <ldexp+0x28>
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	50 40       	sbci	r21, 0x00	; 0
 8ce:	c1 f7       	brne	.-16     	; 0x8c0 <ldexp+0x18>
 8d0:	9e 3f       	cpi	r25, 0xFE	; 254
 8d2:	51 05       	cpc	r21, r1
 8d4:	2c f7       	brge	.-54     	; 0x8a0 <inverse+0x10>
 8d6:	88 0f       	add	r24, r24
 8d8:	91 1d       	adc	r25, r1
 8da:	96 95       	lsr	r25
 8dc:	87 95       	ror	r24
 8de:	97 f9       	bld	r25, 7
 8e0:	08 95       	ret
 8e2:	5f 3f       	cpi	r21, 0xFF	; 255
 8e4:	ac f0       	brlt	.+42     	; 0x910 <__stack+0x11>
 8e6:	98 3e       	cpi	r25, 0xE8	; 232
 8e8:	9c f0       	brlt	.+38     	; 0x910 <__stack+0x11>
 8ea:	bb 27       	eor	r27, r27
 8ec:	86 95       	lsr	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	08 f4       	brcc	.+2      	; 0x8f8 <ldexp+0x50>
 8f6:	b1 60       	ori	r27, 0x01	; 1
 8f8:	93 95       	inc	r25
 8fa:	c1 f7       	brne	.-16     	; 0x8ec <ldexp+0x44>
 8fc:	bb 0f       	add	r27, r27
 8fe:	58 f7       	brcc	.-42     	; 0x8d6 <ldexp+0x2e>
 900:	11 f4       	brne	.+4      	; 0x906 <__stack+0x7>
 902:	60 ff       	sbrs	r22, 0
 904:	e8 cf       	rjmp	.-48     	; 0x8d6 <ldexp+0x2e>
 906:	6f 5f       	subi	r22, 0xFF	; 255
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	e3 cf       	rjmp	.-58     	; 0x8d6 <ldexp+0x2e>
 910:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_szero>
 914:	16 f0       	brts	.+4      	; 0x91a <__stack+0x1b>
 916:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_mpack>
 91a:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_nan>
 91e:	68 94       	set
 920:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_inf>

00000924 <log>:
 924:	0e 94 09 03 	call	0x612	; 0x612 <__fp_splitA>
 928:	a8 f3       	brcs	.-22     	; 0x914 <__stack+0x15>
 92a:	99 23       	and	r25, r25
 92c:	c1 f3       	breq	.-16     	; 0x91e <__stack+0x1f>
 92e:	ae f3       	brts	.-22     	; 0x91a <__stack+0x1b>
 930:	df 93       	push	r29
 932:	cf 93       	push	r28
 934:	1f 93       	push	r17
 936:	0f 93       	push	r16
 938:	ff 92       	push	r15
 93a:	c9 2f       	mov	r28, r25
 93c:	dd 27       	eor	r29, r29
 93e:	88 23       	and	r24, r24
 940:	2a f0       	brmi	.+10     	; 0x94c <log+0x28>
 942:	21 97       	sbiw	r28, 0x01	; 1
 944:	66 0f       	add	r22, r22
 946:	77 1f       	adc	r23, r23
 948:	88 1f       	adc	r24, r24
 94a:	da f7       	brpl	.-10     	; 0x942 <log+0x1e>
 94c:	20 e0       	ldi	r18, 0x00	; 0
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	40 e8       	ldi	r20, 0x80	; 128
 952:	5f eb       	ldi	r21, 0xBF	; 191
 954:	9f e3       	ldi	r25, 0x3F	; 63
 956:	88 39       	cpi	r24, 0x98	; 152
 958:	20 f0       	brcs	.+8      	; 0x962 <log+0x3e>
 95a:	80 3e       	cpi	r24, 0xE0	; 224
 95c:	38 f0       	brcs	.+14     	; 0x96c <log+0x48>
 95e:	21 96       	adiw	r28, 0x01	; 1
 960:	8f 77       	andi	r24, 0x7F	; 127
 962:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__addsf3>
 966:	e0 e9       	ldi	r30, 0x90	; 144
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	04 c0       	rjmp	.+8      	; 0x974 <log+0x50>
 96c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__addsf3>
 970:	ed eb       	ldi	r30, 0xBD	; 189
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	0e 94 21 04 	call	0x842	; 0x842 <__fp_powser>
 978:	8b 01       	movw	r16, r22
 97a:	be 01       	movw	r22, r28
 97c:	ec 01       	movw	r28, r24
 97e:	fb 2e       	mov	r15, r27
 980:	6f 57       	subi	r22, 0x7F	; 127
 982:	71 09       	sbc	r23, r1
 984:	75 95       	asr	r23
 986:	77 1f       	adc	r23, r23
 988:	88 0b       	sbc	r24, r24
 98a:	99 0b       	sbc	r25, r25
 98c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__floatsisf>
 990:	28 e1       	ldi	r18, 0x18	; 24
 992:	32 e7       	ldi	r19, 0x72	; 114
 994:	41 e3       	ldi	r20, 0x31	; 49
 996:	5f e3       	ldi	r21, 0x3F	; 63
 998:	0e 94 3d 03 	call	0x67a	; 0x67a <__mulsf3x>
 99c:	af 2d       	mov	r26, r15
 99e:	98 01       	movw	r18, r16
 9a0:	ae 01       	movw	r20, r28
 9a2:	ff 90       	pop	r15
 9a4:	0f 91       	pop	r16
 9a6:	1f 91       	pop	r17
 9a8:	cf 91       	pop	r28
 9aa:	df 91       	pop	r29
 9ac:	0e 94 ef 01 	call	0x3de	; 0x3de <__addsf3x>
 9b0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_round>

000009b4 <modf>:
 9b4:	fa 01       	movw	r30, r20
 9b6:	dc 01       	movw	r26, r24
 9b8:	aa 0f       	add	r26, r26
 9ba:	bb 1f       	adc	r27, r27
 9bc:	9b 01       	movw	r18, r22
 9be:	ac 01       	movw	r20, r24
 9c0:	bf 57       	subi	r27, 0x7F	; 127
 9c2:	28 f4       	brcc	.+10     	; 0x9ce <modf+0x1a>
 9c4:	22 27       	eor	r18, r18
 9c6:	33 27       	eor	r19, r19
 9c8:	44 27       	eor	r20, r20
 9ca:	50 78       	andi	r21, 0x80	; 128
 9cc:	20 c0       	rjmp	.+64     	; 0xa0e <modf+0x5a>
 9ce:	b7 51       	subi	r27, 0x17	; 23
 9d0:	90 f4       	brcc	.+36     	; 0x9f6 <modf+0x42>
 9d2:	ab 2f       	mov	r26, r27
 9d4:	00 24       	eor	r0, r0
 9d6:	46 95       	lsr	r20
 9d8:	37 95       	ror	r19
 9da:	27 95       	ror	r18
 9dc:	01 1c       	adc	r0, r1
 9de:	a3 95       	inc	r26
 9e0:	d2 f3       	brmi	.-12     	; 0x9d6 <modf+0x22>
 9e2:	00 20       	and	r0, r0
 9e4:	71 f0       	breq	.+28     	; 0xa02 <modf+0x4e>
 9e6:	22 0f       	add	r18, r18
 9e8:	33 1f       	adc	r19, r19
 9ea:	44 1f       	adc	r20, r20
 9ec:	b3 95       	inc	r27
 9ee:	da f3       	brmi	.-10     	; 0x9e6 <modf+0x32>
 9f0:	0e d0       	rcall	.+28     	; 0xa0e <modf+0x5a>
 9f2:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__subsf3>
 9f6:	61 30       	cpi	r22, 0x01	; 1
 9f8:	71 05       	cpc	r23, r1
 9fa:	a0 e8       	ldi	r26, 0x80	; 128
 9fc:	8a 07       	cpc	r24, r26
 9fe:	b9 46       	sbci	r27, 0x69	; 105
 a00:	30 f4       	brcc	.+12     	; 0xa0e <modf+0x5a>
 a02:	9b 01       	movw	r18, r22
 a04:	ac 01       	movw	r20, r24
 a06:	66 27       	eor	r22, r22
 a08:	77 27       	eor	r23, r23
 a0a:	88 27       	eor	r24, r24
 a0c:	90 78       	andi	r25, 0x80	; 128
 a0e:	30 96       	adiw	r30, 0x00	; 0
 a10:	21 f0       	breq	.+8      	; 0xa1a <modf+0x66>
 a12:	20 83       	st	Z, r18
 a14:	31 83       	std	Z+1, r19	; 0x01
 a16:	42 83       	std	Z+2, r20	; 0x02
 a18:	53 83       	std	Z+3, r21	; 0x03
 a1a:	08 95       	ret

00000a1c <__divsf3>:
 a1c:	0e 94 22 05 	call	0xa44	; 0xa44 <__divsf3x>
 a20:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_round>
 a24:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_pscB>
 a28:	58 f0       	brcs	.+22     	; 0xa40 <__divsf3+0x24>
 a2a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fp_pscA>
 a2e:	40 f0       	brcs	.+16     	; 0xa40 <__divsf3+0x24>
 a30:	29 f4       	brne	.+10     	; 0xa3c <__divsf3+0x20>
 a32:	5f 3f       	cpi	r21, 0xFF	; 255
 a34:	29 f0       	breq	.+10     	; 0xa40 <__divsf3+0x24>
 a36:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_inf>
 a3a:	51 11       	cpse	r21, r1
 a3c:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_szero>
 a40:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_nan>

00000a44 <__divsf3x>:
 a44:	0e 94 01 03 	call	0x602	; 0x602 <__fp_split3>
 a48:	68 f3       	brcs	.-38     	; 0xa24 <__divsf3+0x8>

00000a4a <__divsf3_pse>:
 a4a:	99 23       	and	r25, r25
 a4c:	b1 f3       	breq	.-20     	; 0xa3a <__divsf3+0x1e>
 a4e:	55 23       	and	r21, r21
 a50:	91 f3       	breq	.-28     	; 0xa36 <__divsf3+0x1a>
 a52:	95 1b       	sub	r25, r21
 a54:	55 0b       	sbc	r21, r21
 a56:	bb 27       	eor	r27, r27
 a58:	aa 27       	eor	r26, r26
 a5a:	62 17       	cp	r22, r18
 a5c:	73 07       	cpc	r23, r19
 a5e:	84 07       	cpc	r24, r20
 a60:	38 f0       	brcs	.+14     	; 0xa70 <__divsf3_pse+0x26>
 a62:	9f 5f       	subi	r25, 0xFF	; 255
 a64:	5f 4f       	sbci	r21, 0xFF	; 255
 a66:	22 0f       	add	r18, r18
 a68:	33 1f       	adc	r19, r19
 a6a:	44 1f       	adc	r20, r20
 a6c:	aa 1f       	adc	r26, r26
 a6e:	a9 f3       	breq	.-22     	; 0xa5a <__divsf3_pse+0x10>
 a70:	35 d0       	rcall	.+106    	; 0xadc <__divsf3_pse+0x92>
 a72:	0e 2e       	mov	r0, r30
 a74:	3a f0       	brmi	.+14     	; 0xa84 <__divsf3_pse+0x3a>
 a76:	e0 e8       	ldi	r30, 0x80	; 128
 a78:	32 d0       	rcall	.+100    	; 0xade <__divsf3_pse+0x94>
 a7a:	91 50       	subi	r25, 0x01	; 1
 a7c:	50 40       	sbci	r21, 0x00	; 0
 a7e:	e6 95       	lsr	r30
 a80:	00 1c       	adc	r0, r0
 a82:	ca f7       	brpl	.-14     	; 0xa76 <__divsf3_pse+0x2c>
 a84:	2b d0       	rcall	.+86     	; 0xadc <__divsf3_pse+0x92>
 a86:	fe 2f       	mov	r31, r30
 a88:	29 d0       	rcall	.+82     	; 0xadc <__divsf3_pse+0x92>
 a8a:	66 0f       	add	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	bb 1f       	adc	r27, r27
 a92:	26 17       	cp	r18, r22
 a94:	37 07       	cpc	r19, r23
 a96:	48 07       	cpc	r20, r24
 a98:	ab 07       	cpc	r26, r27
 a9a:	b0 e8       	ldi	r27, 0x80	; 128
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <__divsf3_pse+0x56>
 a9e:	bb 0b       	sbc	r27, r27
 aa0:	80 2d       	mov	r24, r0
 aa2:	bf 01       	movw	r22, r30
 aa4:	ff 27       	eor	r31, r31
 aa6:	93 58       	subi	r25, 0x83	; 131
 aa8:	5f 4f       	sbci	r21, 0xFF	; 255
 aaa:	3a f0       	brmi	.+14     	; 0xaba <__divsf3_pse+0x70>
 aac:	9e 3f       	cpi	r25, 0xFE	; 254
 aae:	51 05       	cpc	r21, r1
 ab0:	78 f0       	brcs	.+30     	; 0xad0 <__divsf3_pse+0x86>
 ab2:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_inf>
 ab6:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_szero>
 aba:	5f 3f       	cpi	r21, 0xFF	; 255
 abc:	e4 f3       	brlt	.-8      	; 0xab6 <__divsf3_pse+0x6c>
 abe:	98 3e       	cpi	r25, 0xE8	; 232
 ac0:	d4 f3       	brlt	.-12     	; 0xab6 <__divsf3_pse+0x6c>
 ac2:	86 95       	lsr	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	b7 95       	ror	r27
 aca:	f7 95       	ror	r31
 acc:	9f 5f       	subi	r25, 0xFF	; 255
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__divsf3_pse+0x78>
 ad0:	88 0f       	add	r24, r24
 ad2:	91 1d       	adc	r25, r1
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret
 adc:	e1 e0       	ldi	r30, 0x01	; 1
 ade:	66 0f       	add	r22, r22
 ae0:	77 1f       	adc	r23, r23
 ae2:	88 1f       	adc	r24, r24
 ae4:	bb 1f       	adc	r27, r27
 ae6:	62 17       	cp	r22, r18
 ae8:	73 07       	cpc	r23, r19
 aea:	84 07       	cpc	r24, r20
 aec:	ba 07       	cpc	r27, r26
 aee:	20 f0       	brcs	.+8      	; 0xaf8 <__divsf3_pse+0xae>
 af0:	62 1b       	sub	r22, r18
 af2:	73 0b       	sbc	r23, r19
 af4:	84 0b       	sbc	r24, r20
 af6:	ba 0b       	sbc	r27, r26
 af8:	ee 1f       	adc	r30, r30
 afa:	88 f7       	brcc	.-30     	; 0xade <__divsf3_pse+0x94>
 afc:	e0 95       	com	r30
 afe:	08 95       	ret

00000b00 <__fp_mpack>:
 b00:	9f 3f       	cpi	r25, 0xFF	; 255
 b02:	31 f0       	breq	.+12     	; 0xb10 <__fp_mpack_finite+0xc>

00000b04 <__fp_mpack_finite>:
 b04:	91 50       	subi	r25, 0x01	; 1
 b06:	20 f4       	brcc	.+8      	; 0xb10 <__fp_mpack_finite+0xc>
 b08:	87 95       	ror	r24
 b0a:	77 95       	ror	r23
 b0c:	67 95       	ror	r22
 b0e:	b7 95       	ror	r27
 b10:	88 0f       	add	r24, r24
 b12:	91 1d       	adc	r25, r1
 b14:	96 95       	lsr	r25
 b16:	87 95       	ror	r24
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <_exit>:
 b1c:	f8 94       	cli

00000b1e <__stop_program>:
 b1e:	ff cf       	rjmp	.-2      	; 0xb1e <__stop_program>
