
DMotor_linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000512  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d1  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b7  00000000  00000000  00000dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a5  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "inc/main.h"


/**************************************** Main ****************************************/

void main (void) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	ac 97       	sbiw	r28, 0x2c	; 44
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
	// DEFINITION OF VARIABLES
	float error_history[QTY_OF_ERR] = {0};				// Storing the values of recent errors
  a4:	fe 01       	movw	r30, r28
  a6:	31 96       	adiw	r30, 0x01	; 1
  a8:	88 e2       	ldi	r24, 0x28	; 40
  aa:	df 01       	movw	r26, r30
  ac:	1d 92       	st	X+, r1
  ae:	8a 95       	dec	r24
  b0:	e9 f7       	brne	.-6      	; 0xac <main+0x1c>
  b2:	3e 01       	movw	r6, r28
  b4:	b5 e2       	ldi	r27, 0x25	; 37
  b6:	6b 0e       	add	r6, r27
  b8:	71 1c       	adc	r7, r1
  ba:	1e 01       	movw	r2, r28
  bc:	e9 e2       	ldi	r30, 0x29	; 41
  be:	2e 0e       	add	r2, r30
  c0:	31 1c       	adc	r3, r1
        	error_history[0]) * kD;

		PID_total_correction = (P + I) + D;

		// 
		left_motor_speed  = AVG_SPEED - (uint16_t)PID_total_correction;
  c2:	0f 2e       	mov	r0, r31
  c4:	fb e9       	ldi	r31, 0x9B	; 155
  c6:	4f 2e       	mov	r4, r31
  c8:	51 2c       	mov	r5, r1
  ca:	f0 2d       	mov	r31, r0
  cc:	8e 01       	movw	r16, r28
  ce:	0f 5f       	subi	r16, 0xFF	; 255
  d0:	1f 4f       	sbci	r17, 0xFF	; 255
#include "inc/main.h"


/**************************************** Main ****************************************/

void main (void) {
  d2:	f8 01       	movw	r30, r16
	while (true) {
		error_sum = 0.0;

	    // Shift error values
		for (i = 0; i < QTY_OF_ERR - 1; i++) {
			error_history[i] = error_history[i + 1];
  d4:	84 81       	ldd	r24, Z+4	; 0x04
  d6:	95 81       	ldd	r25, Z+5	; 0x05
  d8:	a6 81       	ldd	r26, Z+6	; 0x06
  da:	b7 81       	ldd	r27, Z+7	; 0x07
  dc:	81 93       	st	Z+, r24
  de:	91 93       	st	Z+, r25
  e0:	a1 93       	st	Z+, r26
  e2:	b1 93       	st	Z+, r27
	// MAIN CYCLE
	while (true) {
		error_sum = 0.0;

	    // Shift error values
		for (i = 0; i < QTY_OF_ERR - 1; i++) {
  e4:	e6 15       	cp	r30, r6
  e6:	f7 05       	cpc	r31, r7
  e8:	a9 f7       	brne	.-22     	; 0xd4 <main+0x44>
			error_history[i] = error_history[i + 1];
		}
		//error_history[QTY_OF_ERR - 1] = CurrentRobotError ();

		// Calculation of value P
		P = error_history[QTY_OF_ERR - 1] * kP;			// Current error * kP
  ea:	8d a0       	ldd	r8, Y+37	; 0x25
  ec:	9e a0       	ldd	r9, Y+38	; 0x26
  ee:	af a0       	ldd	r10, Y+39	; 0x27
  f0:	b8 a4       	ldd	r11, Y+40	; 0x28
	//delay_ms (5000);									// This delay is required by the competition rules
	
	
	// MAIN CYCLE
	while (true) {
		error_sum = 0.0;
  f2:	c1 2c       	mov	r12, r1
  f4:	d1 2c       	mov	r13, r1
  f6:	e1 2c       	mov	r14, r1
  f8:	f1 2c       	mov	r15, r1

		// Calculation of value P
		P = error_history[QTY_OF_ERR - 1] * kP;			// Current error * kP
		// Calculation of value I
		for (i = 0; i < QTY_OF_ERR; i++) {
			error_sum += error_history[i];
  fa:	d8 01       	movw	r26, r16
  fc:	2d 91       	ld	r18, X+
  fe:	3d 91       	ld	r19, X+
 100:	4d 91       	ld	r20, X+
 102:	5d 91       	ld	r21, X+
 104:	8d 01       	movw	r16, r26
 106:	6c 2d       	mov	r22, r12
 108:	7d 2d       	mov	r23, r13
 10a:	8e 2d       	mov	r24, r14
 10c:	9f 2d       	mov	r25, r15
 10e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__addsf3>
 112:	c6 2e       	mov	r12, r22
 114:	d7 2e       	mov	r13, r23
 116:	e8 2e       	mov	r14, r24
 118:	f9 2e       	mov	r15, r25
		//error_history[QTY_OF_ERR - 1] = CurrentRobotError ();

		// Calculation of value P
		P = error_history[QTY_OF_ERR - 1] * kP;			// Current error * kP
		// Calculation of value I
		for (i = 0; i < QTY_OF_ERR; i++) {
 11a:	02 15       	cp	r16, r2
 11c:	13 05       	cpc	r17, r3
 11e:	69 f7       	brne	.-38     	; 0xfa <main+0x6a>
        	error_history[0]) * kD;

		PID_total_correction = (P + I) + D;

		// 
		left_motor_speed  = AVG_SPEED - (uint16_t)PID_total_correction;
 120:	29 81       	ldd	r18, Y+1	; 0x01
 122:	3a 81       	ldd	r19, Y+2	; 0x02
 124:	4b 81       	ldd	r20, Y+3	; 0x03
 126:	5c 81       	ldd	r21, Y+4	; 0x04
 128:	c5 01       	movw	r24, r10
 12a:	b4 01       	movw	r22, r8
 12c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__subsf3>
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	0e 94 1a 02 	call	0x434	; 0x434 <__mulsf3>
 13c:	69 a7       	std	Y+41, r22	; 0x29
 13e:	7a a7       	std	Y+42, r23	; 0x2a
 140:	8b a7       	std	Y+43, r24	; 0x2b
 142:	9c a7       	std	Y+44, r25	; 0x2c
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	6c 2d       	mov	r22, r12
 14e:	7d 2d       	mov	r23, r13
 150:	8e 2d       	mov	r24, r14
 152:	9f 2d       	mov	r25, r15
 154:	0e 94 1a 02 	call	0x434	; 0x434 <__mulsf3>
 158:	a5 01       	movw	r20, r10
 15a:	94 01       	movw	r18, r8
 15c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__addsf3>
 160:	9b 01       	movw	r18, r22
 162:	ac 01       	movw	r20, r24
 164:	69 a5       	ldd	r22, Y+41	; 0x29
 166:	7a a5       	ldd	r23, Y+42	; 0x2a
 168:	8b a5       	ldd	r24, Y+43	; 0x2b
 16a:	9c a5       	ldd	r25, Y+44	; 0x2c
 16c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__addsf3>
 170:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__fixunssfsi>
 174:	92 01       	movw	r18, r4
 176:	26 1b       	sub	r18, r22
 178:	37 0b       	sbc	r19, r23
		right_motor_speed = AVG_SPEED + (uint16_t)PID_total_correction;
 17a:	65 56       	subi	r22, 0x65	; 101
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	c9 01       	movw	r24, r18
 180:	99 23       	and	r25, r25
 182:	14 f4       	brge	.+4      	; 0x188 <main+0xf8>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	77 23       	and	r23, r23
 18a:	14 f4       	brge	.+4      	; 0x190 <main+0x100>
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	70 e0       	ldi	r23, 0x00	; 0
		else if (right_motor_speed < 0)
			right_motor_speed = 0;

		// Motors power difference compensation
		#if MOTORS_NOT_PERFECT
			OCR2A = 0;
 190:	e3 eb       	ldi	r30, 0xB3	; 179
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	10 82       	st	Z, r1
			OCR2B = left_motor_speed * L_MOTOR_MISMATCH;
 196:	8f 3f       	cpi	r24, 0xFF	; 255
 198:	91 05       	cpc	r25, r1
 19a:	11 f0       	breq	.+4      	; 0x1a0 <main+0x110>
 19c:	0c f0       	brlt	.+2      	; 0x1a0 <main+0x110>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	a4 eb       	ldi	r26, 0xB4	; 180
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	8c 93       	st	X, r24
			OCR0A = 0;
 1a6:	17 bc       	out	0x27, r1	; 39
			OCR0B = right_motor_speed * R_MOTOR_MISMATCH;
 1a8:	6f 3f       	cpi	r22, 0xFF	; 255
 1aa:	71 05       	cpc	r23, r1
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <main+0x124>
 1ae:	14 f0       	brlt	.+4      	; 0x1b4 <main+0x124>
 1b0:	6f ef       	ldi	r22, 0xFF	; 255
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	07 2e       	mov	r0, r23
 1b6:	00 0c       	add	r0, r0
 1b8:	88 0b       	sbc	r24, r24
 1ba:	99 0b       	sbc	r25, r25
 1bc:	0e 94 8e 01 	call	0x31c	; 0x31c <__floatsisf>
 1c0:	23 ec       	ldi	r18, 0xC3	; 195
 1c2:	35 ef       	ldi	r19, 0xF5	; 245
 1c4:	48 e8       	ldi	r20, 0x88	; 136
 1c6:	5f e3       	ldi	r21, 0x3F	; 63
 1c8:	0e 94 1a 02 	call	0x434	; 0x434 <__mulsf3>
 1cc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__fixunssfsi>
 1d0:	68 bd       	out	0x28, r22	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	e3 ef       	ldi	r30, 0xF3	; 243
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x146>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x14c>
 1dc:	00 00       	nop
 1de:	76 cf       	rjmp	.-276    	; 0xcc <main+0x3c>

000001e0 <__subsf3>:
 1e0:	50 58       	subi	r21, 0x80	; 128

000001e2 <__addsf3>:
 1e2:	bb 27       	eor	r27, r27
 1e4:	aa 27       	eor	r26, r26
 1e6:	0e 94 08 01 	call	0x210	; 0x210 <__addsf3x>
 1ea:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_round>
 1ee:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__fp_pscA>
 1f2:	38 f0       	brcs	.+14     	; 0x202 <__addsf3+0x20>
 1f4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fp_pscB>
 1f8:	20 f0       	brcs	.+8      	; 0x202 <__addsf3+0x20>
 1fa:	39 f4       	brne	.+14     	; 0x20a <__addsf3+0x28>
 1fc:	9f 3f       	cpi	r25, 0xFF	; 255
 1fe:	19 f4       	brne	.+6      	; 0x206 <__addsf3+0x24>
 200:	26 f4       	brtc	.+8      	; 0x20a <__addsf3+0x28>
 202:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__fp_nan>
 206:	0e f4       	brtc	.+2      	; 0x20a <__addsf3+0x28>
 208:	e0 95       	com	r30
 20a:	e7 fb       	bst	r30, 7
 20c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_inf>

00000210 <__addsf3x>:
 210:	e9 2f       	mov	r30, r25
 212:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__fp_split3>
 216:	58 f3       	brcs	.-42     	; 0x1ee <__addsf3+0xc>
 218:	ba 17       	cp	r27, r26
 21a:	62 07       	cpc	r22, r18
 21c:	73 07       	cpc	r23, r19
 21e:	84 07       	cpc	r24, r20
 220:	95 07       	cpc	r25, r21
 222:	20 f0       	brcs	.+8      	; 0x22c <__addsf3x+0x1c>
 224:	79 f4       	brne	.+30     	; 0x244 <__addsf3x+0x34>
 226:	a6 f5       	brtc	.+104    	; 0x290 <__addsf3x+0x80>
 228:	0c 94 13 02 	jmp	0x426	; 0x426 <__fp_zero>
 22c:	0e f4       	brtc	.+2      	; 0x230 <__addsf3x+0x20>
 22e:	e0 95       	com	r30
 230:	0b 2e       	mov	r0, r27
 232:	ba 2f       	mov	r27, r26
 234:	a0 2d       	mov	r26, r0
 236:	0b 01       	movw	r0, r22
 238:	b9 01       	movw	r22, r18
 23a:	90 01       	movw	r18, r0
 23c:	0c 01       	movw	r0, r24
 23e:	ca 01       	movw	r24, r20
 240:	a0 01       	movw	r20, r0
 242:	11 24       	eor	r1, r1
 244:	ff 27       	eor	r31, r31
 246:	59 1b       	sub	r21, r25
 248:	99 f0       	breq	.+38     	; 0x270 <__addsf3x+0x60>
 24a:	59 3f       	cpi	r21, 0xF9	; 249
 24c:	50 f4       	brcc	.+20     	; 0x262 <__addsf3x+0x52>
 24e:	50 3e       	cpi	r21, 0xE0	; 224
 250:	68 f1       	brcs	.+90     	; 0x2ac <__addsf3x+0x9c>
 252:	1a 16       	cp	r1, r26
 254:	f0 40       	sbci	r31, 0x00	; 0
 256:	a2 2f       	mov	r26, r18
 258:	23 2f       	mov	r18, r19
 25a:	34 2f       	mov	r19, r20
 25c:	44 27       	eor	r20, r20
 25e:	58 5f       	subi	r21, 0xF8	; 248
 260:	f3 cf       	rjmp	.-26     	; 0x248 <__addsf3x+0x38>
 262:	46 95       	lsr	r20
 264:	37 95       	ror	r19
 266:	27 95       	ror	r18
 268:	a7 95       	ror	r26
 26a:	f0 40       	sbci	r31, 0x00	; 0
 26c:	53 95       	inc	r21
 26e:	c9 f7       	brne	.-14     	; 0x262 <__addsf3x+0x52>
 270:	7e f4       	brtc	.+30     	; 0x290 <__addsf3x+0x80>
 272:	1f 16       	cp	r1, r31
 274:	ba 0b       	sbc	r27, r26
 276:	62 0b       	sbc	r22, r18
 278:	73 0b       	sbc	r23, r19
 27a:	84 0b       	sbc	r24, r20
 27c:	ba f0       	brmi	.+46     	; 0x2ac <__addsf3x+0x9c>
 27e:	91 50       	subi	r25, 0x01	; 1
 280:	a1 f0       	breq	.+40     	; 0x2aa <__addsf3x+0x9a>
 282:	ff 0f       	add	r31, r31
 284:	bb 1f       	adc	r27, r27
 286:	66 1f       	adc	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	88 1f       	adc	r24, r24
 28c:	c2 f7       	brpl	.-16     	; 0x27e <__addsf3x+0x6e>
 28e:	0e c0       	rjmp	.+28     	; 0x2ac <__addsf3x+0x9c>
 290:	ba 0f       	add	r27, r26
 292:	62 1f       	adc	r22, r18
 294:	73 1f       	adc	r23, r19
 296:	84 1f       	adc	r24, r20
 298:	48 f4       	brcc	.+18     	; 0x2ac <__addsf3x+0x9c>
 29a:	87 95       	ror	r24
 29c:	77 95       	ror	r23
 29e:	67 95       	ror	r22
 2a0:	b7 95       	ror	r27
 2a2:	f7 95       	ror	r31
 2a4:	9e 3f       	cpi	r25, 0xFE	; 254
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <__addsf3x+0x9a>
 2a8:	b0 cf       	rjmp	.-160    	; 0x20a <__addsf3+0x28>
 2aa:	93 95       	inc	r25
 2ac:	88 0f       	add	r24, r24
 2ae:	08 f0       	brcs	.+2      	; 0x2b2 <__addsf3x+0xa2>
 2b0:	99 27       	eor	r25, r25
 2b2:	ee 0f       	add	r30, r30
 2b4:	97 95       	ror	r25
 2b6:	87 95       	ror	r24
 2b8:	08 95       	ret

000002ba <__fixunssfsi>:
 2ba:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__fp_splitA>
 2be:	88 f0       	brcs	.+34     	; 0x2e2 <__fixunssfsi+0x28>
 2c0:	9f 57       	subi	r25, 0x7F	; 127
 2c2:	98 f0       	brcs	.+38     	; 0x2ea <__fixunssfsi+0x30>
 2c4:	b9 2f       	mov	r27, r25
 2c6:	99 27       	eor	r25, r25
 2c8:	b7 51       	subi	r27, 0x17	; 23
 2ca:	b0 f0       	brcs	.+44     	; 0x2f8 <__fixunssfsi+0x3e>
 2cc:	e1 f0       	breq	.+56     	; 0x306 <__fixunssfsi+0x4c>
 2ce:	66 0f       	add	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	88 1f       	adc	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	1a f0       	brmi	.+6      	; 0x2de <__fixunssfsi+0x24>
 2d8:	ba 95       	dec	r27
 2da:	c9 f7       	brne	.-14     	; 0x2ce <__fixunssfsi+0x14>
 2dc:	14 c0       	rjmp	.+40     	; 0x306 <__fixunssfsi+0x4c>
 2de:	b1 30       	cpi	r27, 0x01	; 1
 2e0:	91 f0       	breq	.+36     	; 0x306 <__fixunssfsi+0x4c>
 2e2:	0e 94 13 02 	call	0x426	; 0x426 <__fp_zero>
 2e6:	b1 e0       	ldi	r27, 0x01	; 1
 2e8:	08 95       	ret
 2ea:	0c 94 13 02 	jmp	0x426	; 0x426 <__fp_zero>
 2ee:	67 2f       	mov	r22, r23
 2f0:	78 2f       	mov	r23, r24
 2f2:	88 27       	eor	r24, r24
 2f4:	b8 5f       	subi	r27, 0xF8	; 248
 2f6:	39 f0       	breq	.+14     	; 0x306 <__fixunssfsi+0x4c>
 2f8:	b9 3f       	cpi	r27, 0xF9	; 249
 2fa:	cc f3       	brlt	.-14     	; 0x2ee <__fixunssfsi+0x34>
 2fc:	86 95       	lsr	r24
 2fe:	77 95       	ror	r23
 300:	67 95       	ror	r22
 302:	b3 95       	inc	r27
 304:	d9 f7       	brne	.-10     	; 0x2fc <__fixunssfsi+0x42>
 306:	3e f4       	brtc	.+14     	; 0x316 <__fixunssfsi+0x5c>
 308:	90 95       	com	r25
 30a:	80 95       	com	r24
 30c:	70 95       	com	r23
 30e:	61 95       	neg	r22
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	8f 4f       	sbci	r24, 0xFF	; 255
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	08 95       	ret

00000318 <__floatunsisf>:
 318:	e8 94       	clt
 31a:	09 c0       	rjmp	.+18     	; 0x32e <__floatsisf+0x12>

0000031c <__floatsisf>:
 31c:	97 fb       	bst	r25, 7
 31e:	3e f4       	brtc	.+14     	; 0x32e <__floatsisf+0x12>
 320:	90 95       	com	r25
 322:	80 95       	com	r24
 324:	70 95       	com	r23
 326:	61 95       	neg	r22
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	8f 4f       	sbci	r24, 0xFF	; 255
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	99 23       	and	r25, r25
 330:	a9 f0       	breq	.+42     	; 0x35c <__floatsisf+0x40>
 332:	f9 2f       	mov	r31, r25
 334:	96 e9       	ldi	r25, 0x96	; 150
 336:	bb 27       	eor	r27, r27
 338:	93 95       	inc	r25
 33a:	f6 95       	lsr	r31
 33c:	87 95       	ror	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b7 95       	ror	r27
 344:	f1 11       	cpse	r31, r1
 346:	f8 cf       	rjmp	.-16     	; 0x338 <__floatsisf+0x1c>
 348:	fa f4       	brpl	.+62     	; 0x388 <__floatsisf+0x6c>
 34a:	bb 0f       	add	r27, r27
 34c:	11 f4       	brne	.+4      	; 0x352 <__floatsisf+0x36>
 34e:	60 ff       	sbrs	r22, 0
 350:	1b c0       	rjmp	.+54     	; 0x388 <__floatsisf+0x6c>
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	8f 4f       	sbci	r24, 0xFF	; 255
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	16 c0       	rjmp	.+44     	; 0x388 <__floatsisf+0x6c>
 35c:	88 23       	and	r24, r24
 35e:	11 f0       	breq	.+4      	; 0x364 <__floatsisf+0x48>
 360:	96 e9       	ldi	r25, 0x96	; 150
 362:	11 c0       	rjmp	.+34     	; 0x386 <__floatsisf+0x6a>
 364:	77 23       	and	r23, r23
 366:	21 f0       	breq	.+8      	; 0x370 <__floatsisf+0x54>
 368:	9e e8       	ldi	r25, 0x8E	; 142
 36a:	87 2f       	mov	r24, r23
 36c:	76 2f       	mov	r23, r22
 36e:	05 c0       	rjmp	.+10     	; 0x37a <__floatsisf+0x5e>
 370:	66 23       	and	r22, r22
 372:	71 f0       	breq	.+28     	; 0x390 <__floatsisf+0x74>
 374:	96 e8       	ldi	r25, 0x86	; 134
 376:	86 2f       	mov	r24, r22
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	2a f0       	brmi	.+10     	; 0x388 <__floatsisf+0x6c>
 37e:	9a 95       	dec	r25
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	da f7       	brpl	.-10     	; 0x37e <__floatsisf+0x62>
 388:	88 0f       	add	r24, r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	97 f9       	bld	r25, 7
 390:	08 95       	ret

00000392 <__fp_inf>:
 392:	97 f9       	bld	r25, 7
 394:	9f 67       	ori	r25, 0x7F	; 127
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	08 95       	ret

0000039e <__fp_nan>:
 39e:	9f ef       	ldi	r25, 0xFF	; 255
 3a0:	80 ec       	ldi	r24, 0xC0	; 192
 3a2:	08 95       	ret

000003a4 <__fp_pscA>:
 3a4:	00 24       	eor	r0, r0
 3a6:	0a 94       	dec	r0
 3a8:	16 16       	cp	r1, r22
 3aa:	17 06       	cpc	r1, r23
 3ac:	18 06       	cpc	r1, r24
 3ae:	09 06       	cpc	r0, r25
 3b0:	08 95       	ret

000003b2 <__fp_pscB>:
 3b2:	00 24       	eor	r0, r0
 3b4:	0a 94       	dec	r0
 3b6:	12 16       	cp	r1, r18
 3b8:	13 06       	cpc	r1, r19
 3ba:	14 06       	cpc	r1, r20
 3bc:	05 06       	cpc	r0, r21
 3be:	08 95       	ret

000003c0 <__fp_round>:
 3c0:	09 2e       	mov	r0, r25
 3c2:	03 94       	inc	r0
 3c4:	00 0c       	add	r0, r0
 3c6:	11 f4       	brne	.+4      	; 0x3cc <__fp_round+0xc>
 3c8:	88 23       	and	r24, r24
 3ca:	52 f0       	brmi	.+20     	; 0x3e0 <__fp_round+0x20>
 3cc:	bb 0f       	add	r27, r27
 3ce:	40 f4       	brcc	.+16     	; 0x3e0 <__fp_round+0x20>
 3d0:	bf 2b       	or	r27, r31
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <__fp_round+0x18>
 3d4:	60 ff       	sbrs	r22, 0
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <__fp_round+0x20>
 3d8:	6f 5f       	subi	r22, 0xFF	; 255
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	08 95       	ret

000003e2 <__fp_split3>:
 3e2:	57 fd       	sbrc	r21, 7
 3e4:	90 58       	subi	r25, 0x80	; 128
 3e6:	44 0f       	add	r20, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	59 f0       	breq	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ec:	5f 3f       	cpi	r21, 0xFF	; 255
 3ee:	71 f0       	breq	.+28     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f0:	47 95       	ror	r20

000003f2 <__fp_splitA>:
 3f2:	88 0f       	add	r24, r24
 3f4:	97 fb       	bst	r25, 7
 3f6:	99 1f       	adc	r25, r25
 3f8:	61 f0       	breq	.+24     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3fa:	9f 3f       	cpi	r25, 0xFF	; 255
 3fc:	79 f0       	breq	.+30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fe:	87 95       	ror	r24
 400:	08 95       	ret
 402:	12 16       	cp	r1, r18
 404:	13 06       	cpc	r1, r19
 406:	14 06       	cpc	r1, r20
 408:	55 1f       	adc	r21, r21
 40a:	f2 cf       	rjmp	.-28     	; 0x3f0 <__fp_split3+0xe>
 40c:	46 95       	lsr	r20
 40e:	f1 df       	rcall	.-30     	; 0x3f2 <__fp_splitA>
 410:	08 c0       	rjmp	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 412:	16 16       	cp	r1, r22
 414:	17 06       	cpc	r1, r23
 416:	18 06       	cpc	r1, r24
 418:	99 1f       	adc	r25, r25
 41a:	f1 cf       	rjmp	.-30     	; 0x3fe <__fp_splitA+0xc>
 41c:	86 95       	lsr	r24
 41e:	71 05       	cpc	r23, r1
 420:	61 05       	cpc	r22, r1
 422:	08 94       	sec
 424:	08 95       	ret

00000426 <__fp_zero>:
 426:	e8 94       	clt

00000428 <__fp_szero>:
 428:	bb 27       	eor	r27, r27
 42a:	66 27       	eor	r22, r22
 42c:	77 27       	eor	r23, r23
 42e:	cb 01       	movw	r24, r22
 430:	97 f9       	bld	r25, 7
 432:	08 95       	ret

00000434 <__mulsf3>:
 434:	0e 94 2d 02 	call	0x45a	; 0x45a <__mulsf3x>
 438:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_round>
 43c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__fp_pscA>
 440:	38 f0       	brcs	.+14     	; 0x450 <__mulsf3+0x1c>
 442:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fp_pscB>
 446:	20 f0       	brcs	.+8      	; 0x450 <__mulsf3+0x1c>
 448:	95 23       	and	r25, r21
 44a:	11 f0       	breq	.+4      	; 0x450 <__mulsf3+0x1c>
 44c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_inf>
 450:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__fp_nan>
 454:	11 24       	eor	r1, r1
 456:	0c 94 14 02 	jmp	0x428	; 0x428 <__fp_szero>

0000045a <__mulsf3x>:
 45a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__fp_split3>
 45e:	70 f3       	brcs	.-36     	; 0x43c <__mulsf3+0x8>

00000460 <__mulsf3_pse>:
 460:	95 9f       	mul	r25, r21
 462:	c1 f3       	breq	.-16     	; 0x454 <__mulsf3+0x20>
 464:	95 0f       	add	r25, r21
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	55 1f       	adc	r21, r21
 46a:	62 9f       	mul	r22, r18
 46c:	f0 01       	movw	r30, r0
 46e:	72 9f       	mul	r23, r18
 470:	bb 27       	eor	r27, r27
 472:	f0 0d       	add	r31, r0
 474:	b1 1d       	adc	r27, r1
 476:	63 9f       	mul	r22, r19
 478:	aa 27       	eor	r26, r26
 47a:	f0 0d       	add	r31, r0
 47c:	b1 1d       	adc	r27, r1
 47e:	aa 1f       	adc	r26, r26
 480:	64 9f       	mul	r22, r20
 482:	66 27       	eor	r22, r22
 484:	b0 0d       	add	r27, r0
 486:	a1 1d       	adc	r26, r1
 488:	66 1f       	adc	r22, r22
 48a:	82 9f       	mul	r24, r18
 48c:	22 27       	eor	r18, r18
 48e:	b0 0d       	add	r27, r0
 490:	a1 1d       	adc	r26, r1
 492:	62 1f       	adc	r22, r18
 494:	73 9f       	mul	r23, r19
 496:	b0 0d       	add	r27, r0
 498:	a1 1d       	adc	r26, r1
 49a:	62 1f       	adc	r22, r18
 49c:	83 9f       	mul	r24, r19
 49e:	a0 0d       	add	r26, r0
 4a0:	61 1d       	adc	r22, r1
 4a2:	22 1f       	adc	r18, r18
 4a4:	74 9f       	mul	r23, r20
 4a6:	33 27       	eor	r19, r19
 4a8:	a0 0d       	add	r26, r0
 4aa:	61 1d       	adc	r22, r1
 4ac:	23 1f       	adc	r18, r19
 4ae:	84 9f       	mul	r24, r20
 4b0:	60 0d       	add	r22, r0
 4b2:	21 1d       	adc	r18, r1
 4b4:	82 2f       	mov	r24, r18
 4b6:	76 2f       	mov	r23, r22
 4b8:	6a 2f       	mov	r22, r26
 4ba:	11 24       	eor	r1, r1
 4bc:	9f 57       	subi	r25, 0x7F	; 127
 4be:	50 40       	sbci	r21, 0x00	; 0
 4c0:	9a f0       	brmi	.+38     	; 0x4e8 <__mulsf3_pse+0x88>
 4c2:	f1 f0       	breq	.+60     	; 0x500 <__mulsf3_pse+0xa0>
 4c4:	88 23       	and	r24, r24
 4c6:	4a f0       	brmi	.+18     	; 0x4da <__mulsf3_pse+0x7a>
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	bb 1f       	adc	r27, r27
 4ce:	66 1f       	adc	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	91 50       	subi	r25, 0x01	; 1
 4d6:	50 40       	sbci	r21, 0x00	; 0
 4d8:	a9 f7       	brne	.-22     	; 0x4c4 <__mulsf3_pse+0x64>
 4da:	9e 3f       	cpi	r25, 0xFE	; 254
 4dc:	51 05       	cpc	r21, r1
 4de:	80 f0       	brcs	.+32     	; 0x500 <__mulsf3_pse+0xa0>
 4e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_inf>
 4e4:	0c 94 14 02 	jmp	0x428	; 0x428 <__fp_szero>
 4e8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ea:	e4 f3       	brlt	.-8      	; 0x4e4 <__mulsf3_pse+0x84>
 4ec:	98 3e       	cpi	r25, 0xE8	; 232
 4ee:	d4 f3       	brlt	.-12     	; 0x4e4 <__mulsf3_pse+0x84>
 4f0:	86 95       	lsr	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b7 95       	ror	r27
 4f8:	f7 95       	ror	r31
 4fa:	e7 95       	ror	r30
 4fc:	9f 5f       	subi	r25, 0xFF	; 255
 4fe:	c1 f7       	brne	.-16     	; 0x4f0 <__mulsf3_pse+0x90>
 500:	fe 2b       	or	r31, r30
 502:	88 0f       	add	r24, r24
 504:	91 1d       	adc	r25, r1
 506:	96 95       	lsr	r25
 508:	87 95       	ror	r24
 50a:	97 f9       	bld	r25, 7
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
